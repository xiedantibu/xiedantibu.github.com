<!DOCTYPE html><!-- saved from url=(0057)http://www.cplusplus.com/forum/general/146635/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>My own Linked List Class Help - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">General C++ Programming</a></li>
<li class="here">My own Linked List Class Help</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico question" title="question">&nbsp;</div> My own Linked List Class Help</h3><span id="CH_edttl"></span><span class="rootdatPost" title="146635,root,0,-1,1,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg771073"><span title="771073,155137,1023,5,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg771073" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm4b239df19b" title="Sun, 02 Nov 2014 03:27:42 +0000"></span><script type="text/javascript">WhenId('CH_zTm4b239df19b');</script><noscript>Nov 2, 2014 at 3:27am UTC</noscript></div>
<div class="dwho"><a href="../../../user/cs_student/default.htm"><b>CS Student</b> (5)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i771073">
So I am trying to make a STD library clone to the linked list and I am having some issues.<br>
<br>
1) I can't get my copy constructor and = operator to work<br>
<br>
2) Destructor isn't working (deleting the list of all current nodes)<br>
<br>
3) I can't get my iterator to work either.<br>
<br>
Those are my main problems. Can anybody spot any syntax errors or have any suggestions? I've been stuck on this for a while.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br></code></pre></td>
<td class="source"><pre><code><cite>/***********************************************
 * list.h
 * LIST CONTAINER and ITERATOR
 ***********************************************/</cite>
 
<dfn>#ifndef LIST_H</dfn>
<dfn>#define LIST_H</dfn>

<dfn>#include &lt;cassert&gt;</dfn>
<cite>// debug........................................................................</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<cite>// Forward declaration of ListIterator</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>class</var> ListIterator;

<cite>/**************************************************
 * NODE
 **************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>struct</var> Node
{
   <cite>// constructors: default and non-default</cite>
   Node ()            : data(NULL), pNext(0x00000000), pPrevious(0x00000000) {}
   Node (<var>const</var> T &amp; t) : data(t),    pNext(0x00000000), pPrevious(0x00000000) {}

   <cite>// member variables</cite>
   T data;
   Node * pNext;
   Node * pPrevious;
};

<cite>/**************************************************
 * LIST
 **************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>class</var> List
{
  <var>public</var>:
   
   <cite>// Default constructor</cite>
  List() : numItems(0), pHead(NULL), pTail(NULL) {}

   <cite>// Copy Constructor</cite>
   <cite>//List(const List &amp; rhs) throw (const char *) { *this = rhs; }</cite>

   
   <cite>// = Operator</cite>
   List &lt;T&gt; &amp; <var>operator</var> = (<var>const</var> List &amp; rhs) <var>throw</var> (<var>const</var> <var>char</var> *);

   <cite>// Destructor (deletes all nodes)</cite>
   <cite>// ~List() { clear();}</cite>

   <cite>// empty() Test whether the list is empty</cite>
   <var>bool</var> empty() {<var>return</var> numItems == 0;}

   <cite>// clear() empties the list</cite>
   <var>void</var> clear();

   <cite>// push_back() Adds an item to the back of the list</cite>
   <var>void</var> push_back(<var>const</var> T &amp; t) <var>throw</var>(<var>const</var> <var>char</var>*);

   <cite>// push_front Adds an item to the front of the list</cite>
   <var>void</var> push_front(<var>const</var> T &amp;t) <var>throw</var>(<var>const</var> <var>char</var>*);

   <cite>// front() returns the item currently at the front of the list</cite>
   T &amp; front() <var>throw</var> (<var>const</var> <var>char</var> *);

   <cite>// back() return the item currentl at the back of the list</cite>
   T &amp; back() <var>throw</var> (<var>const</var> <var>char</var> *);
   
   <cite>// insert() Inserts an item in the middle of the list.</cite>

   <cite>// Remove() Removes an item from the middle of the list</cite>

   <cite>// begin() Return an iterator to the first element of the list</cite>
   ListIterator &lt;T&gt; begin() { <var>return</var> ListIterator&lt;T&gt;(pHead); }

   <cite>// rbegin() Returns an iterator to the last element of the list</cite>
   ListIterator &lt;T&gt; rbegin() { <var>return</var> ListIterator&lt;T&gt;(pTail); }
   
   <cite>// end() Returns an iterator to the past-the-end element in the lsit</cite>
   ListIterator &lt;T&gt; end() { <var>return</var> ListIterator&lt;T&gt;(pTail + 1);}

   <cite>// rend() Returns an iterator referring to the past-the-front element</cite>
   <cite>//   in the list</cite>
   ListIterator &lt;T&gt; rend() { <var>return</var> ListIterator&lt;T&gt;(pHead - 1);}
   
  <var>private</var>:   
   Node &lt;T&gt; * pHead; <cite>// Head node</cite>
   Node &lt;T&gt; * pTail; <cite>// Tail node</cite>
   <var>int</var> numItems;     <cite>// Num of items in the list   </cite>
   <var>void</var> freeData(Node &lt;T&gt; * &amp; pHead); <cite>// private function to delete nodes</cite>
};

<cite>/**************************************************
 * LIST :: CLEAR()
 * Empties the list of all items
 **************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>void</var> List &lt;T&gt; :: clear()
{
   <cite>// Return if there is nothing to do.</cite>
   <var>if</var>(numItems == 0)
      <var>return</var>;

   <cite>// for loop is only running one time, not working right...</cite>
   freeData(pHead);
   numItems = 0;
}

<cite>/*******************************************************************************
 * LIST :: FREE DATA
 * Allows the user to delete every Node in a list. 
 ******************************************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>void</var> List &lt;T&gt; :: freeData(Node &lt;T&gt; * &amp; pHead)
{
   <cite>// if there is another Node linked to this one then delete that one first</cite>
   <var>if</var> (pHead-&gt;pNext)
   {
      freeData(pHead-&gt;pNext); <cite>// recursion!</cite>
      <var>delete</var> pHead;
      <cite>//cout &lt;&lt; "delorted....\n";...............................................</cite>
   }
   <var>else</var>
      <var>delete</var> pHead;
      
   pHead = NULL;
   <cite>//cout &lt;&lt; "end delort\n";....................................................</cite>

   <var>return</var>;
}

<cite>/*******************************************************************************
 * LIST :: PUSH_BACK
 * Add an item to the back of the list
 ******************************************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>void</var> List &lt;T&gt; :: push_back(<var>const</var> T &amp; t) <var>throw</var>(<var>const</var> <var>char</var>*)
{
   Node &lt;T&gt; * pNew = <var>new</var> Node &lt;T&gt;(t);
   pNew -&gt; pPrevious = pTail;

   pTail = pNew;
   <cite>//pTail -&gt; pNext = NULL; it should already be set to null </cite>

   <cite>// Increment numItems</cite>
   numItems++;

   <var>if</var> (numItems == 1)
      pHead = pTail;
}

<cite>/*******************************************************************************
 * List :: PUSH_FRONT
 * Add an item to the front of the list
 ******************************************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>void</var> List &lt;T&gt; :: push_front(<var>const</var> T &amp; t) <var>throw</var>(<var>const</var> <var>char</var>*)
{
   Node &lt;T&gt; * pNew = <var>new</var> Node &lt;T&gt;(t);
   pNew -&gt; pNext = pHead;
   pHead = pNew;
   <cite>//pHead -&gt; pPrevious = NULL;</cite>

   <cite>// Increment numItems</cite>
   numItems++;

   <var>if</var> (numItems == 1)
      pTail = pHead;
}

<cite>/*******************************************************************************
 * LIST :: FRONT()
 * Return the item in the front by reference so it can be changed
 ******************************************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
T &amp; List &lt;T&gt; :: front() <var>throw</var> (<var>const</var> <var>char</var> *)
{
   <var>if</var> (numItems == 0)
      <var>throw</var> <kbd>"ERROR: unable to access data from an empty deque"</kbd>;

   <var>return</var> pHead -&gt; data;
}

<cite>/*******************************************************************************
 * LIST :: BACK()
 * Return the item in the front by reference so it can be changed
 ******************************************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
T &amp; List &lt;T&gt; :: back() <var>throw</var> (<var>const</var> <var>char</var> *)
{
   <var>if</var> (numItems == 0)
      <var>throw</var> <kbd>"ERROR: unable to access data from an empty deque"</kbd>;

   <var>return</var> pTail -&gt; data;
}


<cite>/**************************************************
 * List :: OPERATOR =
 * Acts the same as copy constructor
 **************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
List &lt;T&gt; &amp; List &lt;T&gt; :: <var>operator</var> = (<var>const</var> List &amp; rhs) <var>throw</var> (<var>const</var> <var>char</var> *)
{
}

<cite>/**************************************************
 * LIST ITERATOR
 **************************************************/</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>class</var> ListIterator
{
  <var>public</var>:
   <cite>// default constructor</cite>
  ListIterator() : p(0x00000000) {}

   <cite>// initialize to direct p to some item</cite>
  ListIterator(T * p) : p(p) {}

   <cite>// copy constructor</cite>
   ListIterator(<var>const</var> ListIterator &amp; rhs) { *<var>this</var> = rhs; }

   <cite>// assignment operator</cite>
   ListIterator &amp; <var>operator</var> = (<var>const</var> ListIterator &amp; rhs)
   {
      <var>this</var>-&gt;p = rhs.p;
      <var>return</var> *<var>this</var>;
   }

   <cite>// not equals operator</cite>
   <var>bool</var> <var>operator</var> != (<var>const</var> ListIterator &amp; rhs) <var>const</var>
   {
      <var>return</var> rhs.p != <var>this</var>-&gt;p;
   }
   <cite>// dereference operator</cite>
   T &amp; <var>operator</var> * ()
   {
      <var>return</var> *p;
   }

   <cite>// prefix increment</cite>
   ListIterator &lt;T&gt; &amp; <var>operator</var> ++ ()
   {
      p++;
      <var>return</var> *<var>this</var>;
   }

   <cite>// postfix increment</cite>
   ListIterator &lt;T&gt; <var>operator</var>++(<var>int</var> postfix)
   {
      ListIterator tmp(*<var>this</var>);
      p++;
      <var>return</var> tmp;
   }

   <cite>// prefix decrement for reverse iterator</cite>
   ListIterator &lt;T&gt; &amp; <var>operator</var> -- ()
   {
      p--;
      <var>return</var> *<var>this</var>;
   }

   <cite>// postfix decrement for reverse iterator</cite>
   ListIterator &lt;T&gt; <var>operator</var>--(<var>int</var> postfix)
   {
      ListIterator tmp(*<var>this</var>);
      p;
      <var>return</var> tmp;
   }

  <var>private</var>:
   T * p;
};

<dfn>#endif  </dfn><cite>// LIST_H </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn771073"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Registered users can post here. <a href="../../../user/default.htm">Sign in or register</a> to post.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(146635,0,155137,0,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li><a href="../../beginner/default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li><a href="../../unices/default.htm"><b>UNIX/Linux Programming</b></a></li><li class="selected"><a href="../default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~441.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
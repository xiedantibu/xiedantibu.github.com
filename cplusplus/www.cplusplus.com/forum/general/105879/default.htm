<!DOCTYPE html><!-- saved from url=(0057)http://www.cplusplus.com/forum/general/105879/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Mysterious logical error - semiprime cal - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">General C++ Programming</a></li>
<li class="here">Mysterious logical error - semiprime cal</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico default" title="post">&nbsp;</div> Mysterious logical error - semiprime calculation</h3><span id="CH_edttl"></span><span class="rootdatPost" title="105879,root,0,-1,5,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg572247"><span title="572247,79695,1023,170,1"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg572247" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm1d1902a65f" title="Sun, 07 Jul 2013 18:08:22 +0000"></span><script type="text/javascript">WhenId('CH_zTm1d1902a65f');</script><noscript>Jul 7, 2013 at 6:08pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/eklavya_sharma_2/default.htm"><b>eklavya sharma 2</b> (170)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i572247">
I've been trying to solve Project Euler problem 123 - semiprimes<br>
<br>
<table class="quote"><tr><td class="qd">A composite is a number containing at least 2 prime factors. For example, 15 = 3 * 5; 9 = 3 * 3; 12 = 2 * 2 * 3.<br>
<br>
There are 10 composites below 30 containing precisely 2, not necessarily distinct, prime factors: 4, 6, 9, 10, 14, 15, 21, 22, 25, 26.<br>
<br>
How many composite integers, n &lt; 10^8, have precisely 2, not necessarily distinct, prime factors?</td></tr></table><br>
<br>
At first I tried to make a very efficient algorithm, but it gave wrong answer. So I made a brute force algorithm to generate answer for small values of n and then use them to cross check my efficient algorithm and find bugs. I was pretty sure my brute force algorithm would work for all n, but sadly it didn't.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br></code></pre></td>
<td class="source"><pre><code><cite>//Semiprimes</cite>
<dfn>#include&lt;iostream&gt;</dfn>
<dfn>#include&lt;fstream&gt;</dfn>
<dfn>#include&lt;algorithm&gt;</dfn>
<dfn>#include&lt;eku\math\sqrt_uint.h&gt;</dfn>

<var>using</var> std::cout;
<var>using</var> std::cin;
<var>using</var> std::endl;

<var>void</var> init_pbf(<var>unsigned</var>* pbf,<var>unsigned</var> size)
<cite>//fills pbf with primes from a file containing 10^8 primes</cite>
{
	std::ifstream ifile(<kbd>"E:\\PND\\1e+8.pb32"</kbd>,std::ios::binary);
	<var>if</var>(!ifile.is_open()){std::cout&lt;&lt;<kbd>"Err"</kbd>;<var>return</var>;}
	ifile.read((<var>char</var>*)pbf,size*<var>sizeof</var>(<var>unsigned</var>));
}

<var>int</var> main()
{
	<var>unsigned</var> i,j,n,size,sqrt_n;
	<var>unsigned</var> <var>long</var> <var>long</var> count,prod;
	<var>unsigned</var>* pbf;
<cite>//	unsigned* lb;</cite>
	
	cout&lt;&lt;<kbd>"Enter pbf size: "</kbd>;
	cin&gt;&gt;size;
<cite>//Enter 10^8</cite>
	pbf=<var>new</var> <var>unsigned</var>[size];
	init_pbf(pbf,size);
	<var>while</var>(<var>true</var>)
	{
		cout&lt;&lt;<kbd>"Enter n: "</kbd>;
		cin&gt;&gt;n;
		sqrt_n=eku::sqrt_uint&lt;<var>unsigned</var>&gt;(n).first;
		count=0;
		<cite>/*for(i=0;pbf[i]&lt;=sqrt_n;++i)
		{
			lb=std::upper_bound(pbf,pbf+size,n/pbf[i])-1;
			count+=lb-pbf-i+1;
		}*/</cite>
		<var>for</var>(i=0;pbf[i]&lt;=sqrt_n;++i)<var>for</var>(j=i;pbf[j]&lt;=n;++j)
		{
			prod=pbf[i];
			prod*=pbf[j];
			<var>if</var>(prod&gt;=n)<var>break</var>;
			++count;
		}
		cout&lt;&lt;count&lt;&lt;endl;
	}
	<var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Then I found this OEIS page: <a href="../../../../oeis.org/a066265">http://oeis.org/A066265</a><br>
<br>
This sadly revealed the answer, but I used the values to cross check my brute force approach. It works for n = 10, 100, 1000, 10^4, 10^5, 10^6, 10^7, but not for 10^8. The answer my program displays is one more than the correct answer. I have no idea why this is happening.<br>
<br>
The file &lt;eku\math\sqrt_uint.h&gt; is my own and contains a function to calculate square root of an integer. The answer is rounded down if the parameter is not a perfect square.<br>
<br>
The file containing the list of primes has never betrayed me in any Project Euler problem before, so there is very little chance that the file is wrong.
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTm06e96af103" title="Sun, 07 Jul 2013 18:12:12 +0000"></span><script type="text/javascript">WhenId('CH_zTm06e96af103');</script><noscript>Jul 7, 2013 at 6:12pm UTC</noscript></span>
<span class="dbtn" id="CH_btn572247"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg572312"><span title="572312,100145,1023,1516,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg572312" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm4f9bbccba1" title="Sun, 07 Jul 2013 20:09:46 +0000"></span><script type="text/javascript">WhenId('CH_zTm4f9bbccba1');</script><noscript>Jul 7, 2013 at 8:09pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/smac89/default.htm"><b>Smac89</b> (1516)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i572312">
This might be a brute-force approach, but I don`t see any other efficient method of doing this except using hashmaps:<br>
<br>
All you need to solve this is all the prime numbers below 10,000 (9973 and below). Store all the values 4-10^8 in a bool array and mark each one as true.<br>
<br>
Now using 2 for-loops, go through all the primes you have and as you mark the product of the 2 for-loops as false, keep counting. When your for-loop is done, you have your answer if you print your counter variable.<br>
<br>
E: The double for-loops should not scare you as there are only 1229 primes below 10000 so this code should run quite faster than O(1229^2)
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTm4324088f3d" title="Sun, 07 Jul 2013 20:31:09 +0000"></span><script type="text/javascript">WhenId('CH_zTm4324088f3d');</script><noscript>Jul 7, 2013 at 8:31pm UTC</noscript></span>
<span class="dbtn" id="CH_btn572312"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg572427"><span title="572427,79695,1023,170,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg572427" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmdec1b51761" title="Mon, 08 Jul 2013 02:38:44 +0000"></span><script type="text/javascript">WhenId('CH_zTmdec1b51761');</script><noscript>Jul 8, 2013 at 2:38am UTC</noscript></div>
<div class="dwho"><a href="../../../user/eklavya_sharma_2/default.htm"><b>eklavya sharma 2</b> (170)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i572427">
Well I have devised an O(NlogN) algorithm, but that's not my focus right now. What I'm curious about is that my brute force algorithm doesn't seem to work for n =10^8 and larger n.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn572427"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg572470"><span title="572470,13171,1023,11788,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg572470" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmfa9ab89edd" title="Mon, 08 Jul 2013 05:17:13 +0000"></span><script type="text/javascript">WhenId('CH_zTmfa9ab89edd');</script><noscript>Jul 8, 2013 at 5:17am UTC</noscript></div>
<div class="dwho"><a href="../../../user/helios/default.htm"><b>helios</b> (11788)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i572470">
Here's an idea: how about factoring prod after incrementing count? That way you can easily find the incorrect pair.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn572470"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg572500"><span title="572500,75536,1023,5443,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg572500" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm98a4f10bc8" title="Mon, 08 Jul 2013 07:08:37 +0000"></span><script type="text/javascript">WhenId('CH_zTm98a4f10bc8');</script><noscript>Jul 8, 2013 at 7:08am UTC</noscript></div>
<div class="dwho"><a href="../../../user/jlborges/default.htm"><b>JLBorges</b> (5443)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i572500">
(10^8 is a small number. By the prime number theorem, the number of primes less than or equal to 10^8 / 2 is about 2.8 million; we can easily hold them in memory.)<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;type_traits&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>

<var>constexpr</var> <var>auto</var> MAX = 100000000 ; <cite>// 10^8</cite>
<var>using</var> int_type = std::remove_const&lt; <var>decltype</var>(MAX) &gt;::type ;

std::vector&lt;int_type&gt; prime_numbers()
{
    <var>const</var> int_type SZ = MAX / 2 + 1 ;
    std::vector&lt;<var>bool</var>&gt; sieve( SZ, <var>true</var> ) ;
    <var>for</var>( int_type i = 2 ; i &lt; SZ ; ++i ) <var>if</var>( sieve[i] )
       <var>for</var>( int_type j = i+i ; j &lt; SZ ; j += i ) sieve[j] = <var>false</var> ;

    std::vector&lt;int_type&gt; result ;
    <var>for</var>( int_type i = 2 ; i &lt; SZ ; ++i ) <var>if</var>( sieve[i] ) result.push_back(i) ;
    <var>return</var> result ;
}

<var>int</var> main()
{
    <var>auto</var> primes = prime_numbers() ;

    int_type count = 0 ;

    <var>for</var>( <var>auto</var> p : primes )
    {
        <var>for</var>( <var>auto</var> p2 : primes )
        {
            <var>if</var>( p*p2 &gt;= MAX ) <var>break</var> ;
            <var>if</var>( p2 &gt;= p ) ++count ;
        }
    }

    std::cout &lt;&lt; count &lt;&lt; <kbd>'\n'</kbd> ; <cite>// 17427258</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<a href="../../../../ideone.com/i4ibde">http://ideone.com/I4ibdE</a> <br>
<br>
EDIT: Note: The logic is unchanged from the code in the original post; but generates the prime numbers instead of reading them from a file. (And deduces an appropriate unsigned integral type capable of  holding numbers up to 10^8).
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTmdab810191d" title="Mon, 08 Jul 2013 08:45:53 +0000"></span><script type="text/javascript">WhenId('CH_zTmdab810191d');</script><noscript>Jul 8, 2013 at 8:45am UTC</noscript></span>
<span class="dbtn" id="CH_btn572500"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Topic archived. No new replies allowed.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(105879,1,79695,0,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li><a href="../../beginner/default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li><a href="../../unices/default.htm"><b>UNIX/Linux Programming</b></a></li><li class="selected"><a href="../default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~365.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0057)http://www.cplusplus.com/forum/general/146658/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Code Review for a boost asio udp seriali - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">General C++ Programming</a></li>
<li class="here">Code Review for a boost asio udp seriali</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico default" title="post">&nbsp;</div> Code Review for a boost asio udp serialization attempt.</h3><span id="CH_edttl"></span><span class="rootdatPost" title="146658,root,0,-1,1,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg771160"><span title="771160,139415,1023,89,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg771160" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm698f681942" title="Sun, 02 Nov 2014 09:01:03 +0000"></span><script type="text/javascript">WhenId('CH_zTm698f681942');</script><noscript>Nov 2, 2014 at 9:01am UTC</noscript></div>
<div class="dwho"><a href="../../../user/poteto/default.htm"><b>poteto</b> (89)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i771160">
I just converted this serialization example: <br>
<a href="../../../../www.boost.org/doc/libs/1_56_0/doc/html/boost_asio/example/cpp03/serialization/default.htm">http://www.boost.org/doc/libs/1_56_0/doc/html/boost_asio/example/cpp03/serialization/</a><br>
to work with UDP.<br>
<br>
I did it pretty lazily so there must be some places to improve. I really sliced down the code from it because I removed the wrapper, and the header that was on it(UDP has the length inside its protocol header).<br>
<br>
Server.cpp<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;boost/asio.hpp&gt;</dfn>
<dfn>#include &lt;boost/bind.hpp&gt;</dfn>
<dfn>#include &lt;boost/lexical_cast.hpp&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include "connection.hpp" </dfn><cite>// Must come before boost/serialization headers.</cite>
<dfn>#include &lt;boost/serialization/vector.hpp&gt;</dfn>
<dfn>#include "stock.hpp"</dfn>

<cite>/// Serves stock quote information to any client that connects to it.</cite>
<var>class</var> server
{
<var>private</var>:
  <cite>/// The data to be sent to each client.</cite>
  std::vector&lt;stock&gt; stocks_;

  boost::asio::ip::udp::socket sock_;

<var>public</var>:
  <cite>/// Constructor opens the acceptor and starts waiting for the first incoming</cite>
  <cite>/// connection.</cite>
  server(boost::asio::io_service&amp; io_s, <var>unsigned</var> <var>short</var> port)
    : sock_(io_s, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port))
  {
    <cite>// Create the data to be sent to each client.</cite>
    stock s;
    s.code = <kbd>"ABC"</kbd>;
    s.name = <kbd>"A Big Company"</kbd>;
    s.open_price = 4.56;
    s.high_price = 5.12;
    s.low_price = 4.33;
    s.last_price = 4.98;
    s.buy_price = 4.96;
    s.buy_quantity = 1000;
    s.sell_price = 4.99;
    s.sell_quantity = 2000;
    stocks_.push_back(s);
    s.code = <kbd>"DEF"</kbd>;
    s.name = <kbd>"Developer Entertainment Firm"</kbd>;
    s.open_price = 20.24;
    s.high_price = 22.88;
    s.low_price = 19.50;
    s.last_price = 19.76;
    s.buy_price = 19.72;
    s.buy_quantity = 34000;
    s.sell_price = 19.85;
    s.sell_quantity = 45000;
    stocks_.push_back(s);

    <cite>// Start an accept operation for a new connection.</cite>
    <cite>//connection_ptr new_conn(new connection(acceptor_.get_io_service()));</cite>
    <cite>/*acceptor_.async_accept(new_conn-&gt;socket(),
        boost::bind(&amp;server::handle_accept, this,
          boost::asio::placeholders::error, new_conn));*/</cite>

    std::cout&lt;&lt;<kbd>"Starting.\n"</kbd>;

    <var>char</var> data[1024];

    <cite>/// Holds the outbound data.</cite>
    std::string outbound_data_;

    <cite>/// Holds the inbound data.</cite>
    std::vector&lt;<var>char</var>&gt; inbound_data_;

    <var>for</var>(;;)
    {
      boost::asio::ip::udp::endpoint sender_endpoint;

      size_t length = sock_.receive_from(
          boost::asio::buffer(data, 1024), sender_endpoint);

      std::cout.write(data,length);

      std::cout&lt;&lt;<kbd>"Got a connection, and sending.\n"</kbd>;

      std::stringstream ss;
      boost::archive::text_oarchive archive(ss);
      archive &lt;&lt; stocks_;
      outbound_data_ = ss.str();



      <cite>// Write the serialized data to the socket. We use "gather-write" to send</cite>
      sock_.send_to(boost::asio::buffer(outbound_data_), sender_endpoint);

      std::cout&lt;&lt;<kbd>"Waiting for a new connection.\n"</kbd>;
    }
  }

};

<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
  <var>try</var>
  {
    <cite>// Check command line arguments.</cite>
    <var>if</var> (argc != 2)
    {
      std::cerr &lt;&lt; <kbd>"Usage: server &lt;port&gt;"</kbd> &lt;&lt; std::endl;
      <var>return</var> 1;
    }
    <var>unsigned</var> <var>short</var> port = boost::lexical_cast&lt;<var>unsigned</var> <var>short</var>&gt;(argv[1]);

    boost::asio::io_service io_service;
    server server(io_service, port);
    io_service.run();
  }
  <var>catch</var> (std::exception&amp; e)
  {
    std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Client.cpp<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;boost/asio.hpp&gt;</dfn>
<dfn>#include &lt;boost/bind.hpp&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include "connection.hpp" </dfn><cite>// Must come before boost/serialization headers.</cite>
<dfn>#include &lt;boost/serialization/vector.hpp&gt;</dfn>
<dfn>#include "stock.hpp"</dfn>

<cite>/// Downloads stock quote information from a server.</cite>
<var>class</var> client
{
<var>private</var>:

  boost::asio::ip::udp::socket sock;

  <cite>/// The data received from the server.</cite>
  std::vector&lt;stock&gt; stocks_;

  boost::asio::ip::udp::resolver resolver;
  boost::asio::ip::udp::resolver::query query;

  boost::asio::ip::udp::resolver::iterator it;

  <var>char</var> data[1024];
<var>public</var>:
  <cite>/// Constructor starts the asynchronous connect operation.</cite>
  client(boost::asio::io_service&amp; io_s,
      <var>const</var> std::string host, <var>const</var> std::string&amp; port)
    : sock(io_s, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),
      resolver(io_s),
      query(boost::asio::ip::udp::v4(), host.c_str(), port.c_str())
  {
    std::cout&lt;&lt;<kbd>"Starting.\n"</kbd>;
    it = resolver.resolve(query);

    sock.send_to(boost::asio::buffer(<kbd>"0"</kbd>,1),*it);

    boost::asio::ip::udp::endpoint sender_endpoint;

    <cite>/// Holds the outbound data.</cite>
    std::string outbound_data_;

    <cite>/// Holds the inbound data.</cite>
    std::vector&lt;<var>char</var>&gt; inbound_data_;

    size_t length = sock.receive_from(boost::asio::buffer(data, 1024), sender_endpoint);

    std::string archive_data(&amp;data[0], length);
    std::istringstream archive_stream(archive_data);
    boost::archive::text_iarchive archive(archive_stream);
    archive &gt;&gt; stocks_;

    std::cout&lt;&lt;<kbd>"Data in raw: \n"</kbd>;
    std::cout.write(data,length);

    <var>for</var> (std::size_t i = 0; i &lt; stocks_.size(); ++i)
    {
      std::cout &lt;&lt; <kbd>"Stock number "</kbd> &lt;&lt; i &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  code: "</kbd> &lt;&lt; stocks_[i].code &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  name: "</kbd> &lt;&lt; stocks_[i].name &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  open_price: "</kbd> &lt;&lt; stocks_[i].open_price &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  high_price: "</kbd> &lt;&lt; stocks_[i].high_price &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  low_price: "</kbd> &lt;&lt; stocks_[i].low_price &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  last_price: "</kbd> &lt;&lt; stocks_[i].last_price &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  buy_price: "</kbd> &lt;&lt; stocks_[i].buy_price &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  buy_quantity: "</kbd> &lt;&lt; stocks_[i].buy_quantity &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  sell_price: "</kbd> &lt;&lt; stocks_[i].sell_price &lt;&lt; <kbd>"\n"</kbd>;
      std::cout &lt;&lt; <kbd>"  sell_quantity: "</kbd> &lt;&lt; stocks_[i].sell_quantity &lt;&lt; <kbd>"\n"</kbd>;
    }

    std::cout&lt;&lt;<kbd>"Done.\n"</kbd>;
  }
};

<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
  <var>try</var>
  {
    <cite>// Check command line arguments.</cite>
    <var>if</var> (argc != 3)
    {
      std::cerr &lt;&lt; <kbd>"Usage: client &lt;host&gt; &lt;port&gt;"</kbd> &lt;&lt; std::endl;
      <var>return</var> 1;
    }

    boost::asio::io_service io_service;
    client client(io_service, argv[1], argv[2]);
    io_service.run();
  }
  <var>catch</var> (std::exception&amp; e)
  {
    std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And, "Connection.hpp" is exactly the same as the one in the example.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn771160"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Registered users can post here. <a href="../../../user/default.htm">Sign in or register</a> to post.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(146658,0,139415,0,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li><a href="../../beginner/default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li><a href="../../unices/default.htm"><b>UNIX/Linux Programming</b></a></li><li class="selected"><a href="../default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~396.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
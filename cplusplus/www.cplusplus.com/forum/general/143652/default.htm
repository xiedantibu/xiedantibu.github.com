<!DOCTYPE html><!-- saved from url=(0057)http://www.cplusplus.com/forum/general/143652/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Issues with forwarding of variadics - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">General C++ Programming</a></li>
<li class="here">Issues with forwarding of variadics</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico question" title="question">&nbsp;</div><div class="C_ico solved" title="solved">&nbsp;</div> Issues with forwarding of variadics</h3><span id="CH_edttl"></span><span class="rootdatPost" title="143652,root,0,-1,5,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg757838"><span title="757838,151925,1023,29,1"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg757838" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm850a2d78a8" title="Tue, 30 Sep 2014 11:58:15 +0000"></span><script type="text/javascript">WhenId('CH_zTm850a2d78a8');</script><noscript>Sep 30, 2014 at 11:58am UTC</noscript></div>
<div class="dwho"><a href="../../../user/hellhound/default.htm"><b>hellhound</b> (29)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i757838">
Based on this thread <a href="../143019/default.htm">http://www.cplusplus.com/forum/general/143019/</a> I could realize my delegate factory, which is working fine. Now it's time to embed those delegates to my IOC Container.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br></code></pre></td>
<td class="source"><pre><code><cite>// Predefine template delegate factory</cite>
<var>template</var> &lt; <var>typename</var> R, <var>typename</var>... Args &gt; 
<var>class</var> brGenericDelegate ;

<cite>// C++11 template alias to announce functor definition</cite>
<var>template</var> &lt; <var>typename</var> R, <var>typename</var>... Args &gt; 
<var>using</var> brGenericDelegateType = std::function&lt; R(Args...) &gt; ;

<var>class</var> brDelegate
{
<var>protected</var>:
	brDelegate(){}
	
<var>public</var>:
    <var>virtual</var> ~brDelegate() = <var>default</var> ;

    <var>template</var> &lt; <var>typename</var> R, <var>typename</var>... Args &gt;
    <var>static</var> std::shared_ptr&lt;brDelegate&gt; create( <var>typename</var> brGenericDelegate&lt;R,Args...&gt;::functor func ) 
    { 
	<var>return</var> std::make_shared&lt;brGenericDelegate&lt;R,Args...&gt;&gt;(func) ; 
    }
	
    <var>template</var> &lt; <var>typename</var> R, <var>typename</var>... Args &gt; R run( Args... args ) <var>const</var>
    {
        <var>using</var> derived_type = brGenericDelegate&lt;R,Args...&gt; ;
        <var>return</var> <var>dynamic_cast</var>&lt; <var>const</var> derived_type&amp; &gt;(*<var>this</var>)(args...) ;
    }
};

<var>template</var> &lt; <var>typename</var> R, <var>typename</var>... Args &gt; 
<var>class</var> brGenericDelegate : <var>public</var> brDelegate
{
<var>public</var>:
    <var>using</var> functor = brGenericDelegateType&lt; R, Args... &gt;;
    brGenericDelegate( functor f ) : fn(f) {}

    R <var>operator</var>() ( Args... args ) <var>const</var> { <var>return</var> fn(args...) ; }

<var>private</var>:
    <var>const</var> functor fn ;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
The IOC Container uses a nested wrapper (based on same concept as the delegates) to reference my delegates or instances (if singletons are required) and have to return the requested object on request:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br></code></pre></td>
<td class="source"><pre><code><cite>// Define generic resolver template</cite>
<var>template</var> &lt; <var>class</var> R&gt; 
<var>class</var> GenericResolver;
	
<var>class</var> Resolver
{
<var>protected</var>:
    Resolver(){}
		
 <var>public</var>:
    <var>virtual</var> ~Resolver() = <var>default</var>;
		
    <var>template</var>&lt;<var>typename</var> R, <var>typename</var> ... ARGS&gt;
    std::shared_ptr&lt;R&gt; resolve(ARGS&amp;&amp; ... args) <var>const</var>
    {
	std::cout &lt;&lt; <kbd>"Type to resolve: "</kbd> &lt;&lt; <var>typeid</var>(R).name() &lt;&lt; std::endl;
	std::cout &lt;&lt; <kbd>"Args count: "</kbd> &lt;&lt; <var>sizeof</var>...(ARGS) &lt;&lt; std::endl;
	<var>using</var> derived_type = GenericResolver&lt;R&gt;;		
	<var>auto</var> rs = <var>dynamic_cast</var>&lt; <var>const</var> derived_type&amp; &gt;(*<var>this</var>);
	rs.run&lt;ARGS...&gt;(std::forward&lt;ARGS&gt;(args)...);
    }		
};
	
<var>template</var> &lt;<var>typename</var> T&gt;
<var>class</var> GenericResolver : <var>public</var> Resolver
{
<var>public</var>:	
	GenericResolver(std::shared_ptr&lt;brDelegate&gt; delegate)
	:m_delegate(delegate){}
		
	GenericResolver(std::shared_ptr&lt;T&gt; instance)
	:m_instance(instance){}

	<var>virtual</var> ~GenericResolver() = <var>default</var>;
		
	<var>template</var>&lt;<var>typename</var> ... ARGS&gt;
	std::shared_ptr&lt;T&gt; run(ARGS&amp;&amp; ... args) <var>const</var>
	{
  	     <var>if</var>(m_instance.get()){
		<var>return</var> m_instance;
	     }
	     <var>else</var>{
		<var>return</var> std::make_shared&lt;T&gt;(
		   m_delegate-&gt;run&lt;T, Args...&gt;(std::forward&lt;Args&gt;(args)...));
				m_delegate-&gt;run&lt;T, ARGS...&gt;(args ...));
	     } 
	}
		
	std::shared_ptr&lt;brDelegate&gt; getDelegate(<var>void</var>) <var>const</var> {
	     <var>return</var> m_delegate;
	}
		
<var>private</var>:
	std::shared_ptr&lt;brDelegate&gt; m_delegate = <var>nullptr</var>;
	std::shared_ptr&lt;T&gt; m_instance = <var>nullptr</var>;	
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The IOCContainer has a single resolve method to trigger transient/singleton object requests:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>typename</var> T, <var>typename</var> ... ARGS&gt;
<var>inline</var> std::shared_ptr&lt;T&gt; brIOCContainer::resolve(ARGS&amp;&amp; ... args) <var>const</var>
{	
	std::type_index type = <var>typeid</var>(T);
	<var>if</var>(std::is_abstract&lt;T&gt;::value){
		std::string msg = <kbd>"[brIOCContainer]:resolve: Cant resolve object of abstract type: "</kbd>;
		msg.append(brStringUtils::demangle(type.name()));		
		<var>throw</var> brRegistrationException(msg);
	}
	
	<var>auto</var> iter = <var>this</var>-&gt;find(type);
	<var>if</var>(iter==m_repository.end()){
		std::string msg = <kbd>"[brIOCContainer]:resolve: No entry found for requested class type: "</kbd>;
		msg.append(brStringUtils::demangle(type.name()));		
		<var>throw</var> brRegistrationException(msg);
	}
	
	<var>auto</var> resolver = (iter-&gt;second)-&gt;getResolver();
	<var>return</var> resolver-&gt;resolve&lt;T, ARGS...&gt;(std::forward&lt;ARGS&gt;(args)...);			
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The issue occurs in line 21 of the Resolver snipped. The forwarding of the arguments fails with follwoing output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
In file included from D:/tmp/test/modules/brCore/branches/refactor/include/brCore/brApplication.h:38:0,
                 from d:/tmp/test/modules/brCore/branches/refactor/src/brApplication.cpp:25:
D:/tmp/test/modules/brCore/branches/refactor/include/brCore/brIOCContainer.h: In member function 'std::shared_ptr&lt;_Tp1&gt; binrev::brCore::brIOCContainer::Resolver::resolve(ARGS&amp;&amp; ...) const':
D:/tmp/test/modules/brCore/branches/refactor/include/brCore/brIOCContainer.h:208:15: error: expected primary-expression before '...' token
    rs.run&lt;ARGS...&gt;(std::forward&lt;ARGS&gt;(args)...);
               ^
D:/tmp/test/modules/brCore/branches/refactor/include/brCore/brIOCContainer.h:208:15: error: expected ';' before '...' token
make[2]: *** [CMakeFiles/brCore.dir/src/brApplication.cpp.obj] Error 1
make[1]: *** [CMakeFiles/brCore.dir/all] Error 2
</samp></pre></td></tr></table></div><br>
<br>
But why? I've tested multiple forwards with this simple code and this works as expected:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br></code></pre></td>
<td class="source"><pre><code><cite>// used for end of recursion - and for the empty arguments list</cite>
<var>void</var> print() { }

<var>template</var> &lt;<var>typename</var> ... Tail&gt;
<var>void</var> print(<var>const</var> std::string&amp; head, Tail&amp;&amp; ... tail)
{
    std::cout &lt;&lt; head &lt;&lt; <kbd>'\n'</kbd>;
    print(std::forward&lt;Tail&gt;(tail)...);
}

<var>template</var> &lt; <var>typename</var> M, <var>typename</var>... ARGS &gt; 
<var>inline</var> <var>void</var> doFinal(ARGS&amp;&amp; ... args)
{
    std::cout &lt;&lt; <var>typeid</var>(M).name() &lt;&lt; std::endl;
    std::cout &lt;&lt; <kbd>"Args count: "</kbd> &lt;&lt; <var>sizeof</var>...(ARGS) &lt;&lt; std::endl;
    print(std::forward&lt;ARGS&gt;(args)...);
}

<var>template</var> &lt; <var>typename</var> K, <var>typename</var>... ARGS &gt; 
<var>inline</var> <var>void</var> doSomethingElse(ARGS&amp;&amp; ... args)
{
    doFinal&lt;K, ARGS...&gt;(std::forward&lt;ARGS&gt;(args)...);
}


<var>template</var> &lt; <var>typename</var> R, <var>typename</var>... ARGS &gt; 
<var>inline</var> <var>void</var> doSomething(ARGS&amp;&amp; ... args)
{
    doSomethingElse&lt;R, ARGS...&gt;(std::forward&lt;ARGS&gt;(args)...);
}

<var>template</var> &lt;<var>typename</var> T, <var>typename</var> ... ARGS&gt;
<var>void</var> run(ARGS&amp;&amp; ... args) 
{
    doSomething&lt;T, ARGS...&gt;(std::forward&lt;ARGS&gt;(args)...);
}

<var>int</var> main()
{
  <var>try</var>{ 
     run&lt;<var>int</var>, std::string&gt;(std::string(<kbd>"Hallo Du"</kbd>)); 
  }
  <var>catch</var>(...){
       printf(<kbd>"Unknown exception caught!"</kbd>);
       <var>return</var> APPLICATION_EXIT_ABNORMAL;
  }
  <var>return</var> APPLICATION_EXIT_SUCCESFULLY;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
I've no idea what is the difference between the simple functions and my object structure. Thanks for any help.
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTm31dda57450" title="Tue, 30 Sep 2014 12:01:34 +0000"></span><script type="text/javascript">WhenId('CH_zTm31dda57450');</script><noscript>Sep 30, 2014 at 12:01pm UTC</noscript></span>
<span class="dbtn" id="CH_btn757838"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg757870"><span title="757870,75536,1023,5443,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg757870" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm62f19dcfe4" title="Tue, 30 Sep 2014 14:42:31 +0000"></span><script type="text/javascript">WhenId('CH_zTm62f19dcfe4');</script><noscript>Sep 30, 2014 at 2:42pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/jlborges/default.htm"><b>JLBorges</b> (5443)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i757870">
The compiler has not seen the declaration of the member function <tt>run()</tt> (during phase one of the two phase look up) and proceeds on the  assumption that <tt>run()</tt> is not a template.  <br>
Unless you announce that you expect it to be a template.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><cite>// rs.run&lt;ARGS...&gt;(std::forward&lt;ARGS&gt;(args)...);</cite>
rs.<b><var>template</var></b> run&lt;ARGS...&gt;(std::forward&lt;ARGS&gt;(args)...);</code></pre></td><td class="C_btnholder"></td></tr></table></div>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn757870"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg757929"><span title="757929,151925,1023,29,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg757929" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTme27c159fc5" title="Tue, 30 Sep 2014 19:36:59 +0000"></span><script type="text/javascript">WhenId('CH_zTme27c159fc5');</script><noscript>Sep 30, 2014 at 7:36pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/hellhound/default.htm"><b>hellhound</b> (29)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i757929">
This solves the problem... I've seen this kind of announce in some posts, but never understand why I should use this and when. Thanks a lot! <br>
<br>
I would learn to understand why the compiler has lost the declaration of the member function. Could you give me more details or a link, describing the look up mechanism please? Thanks in advance.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn757929"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg757944"><span title="757944,75536,1023,5443,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg757944" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmec39856a0d" title="Tue, 30 Sep 2014 20:46:40 +0000"></span><script type="text/javascript">WhenId('CH_zTmec39856a0d');</script><noscript>Sep 30, 2014 at 8:46pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/jlborges/default.htm"><b>JLBorges</b> (5443)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i757944">
Two phase name lookup (somewhat dated, with respect to the GNU and Microsoft implementations): <a href="../../../../blog.llvm.org/2009/12/dreaded-two-phase-name-lookup.html">http://blog.llvm.org/2009/12/dreaded-two-phase-name-lookup.html</a><br>
<br>
Legalese (IS, emphasis (underline) added): <br>
<table class="quote"><tr><td class="qd">When the name of a member template specialization appears after . or -&gt; in a <i>postfix-expression</i> or after a <i>nested-name-specifier</i> in a <i>qualified-id</i>, and the object expression of the <i>postfix-expression</i> is type-dependent or the <i>nested-name-specifier</i> in the <i>qualified-id</i> refers to a dependent type, <u>but the name is not a member of the current instantiation</u>, the member template name must be prefixed by the keyword <b>template</b>.<br>
<br>
<u>Otherwise the name is assumed to name a non-template.</u> <br>
<br>
[Example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><var>struct</var> X {
    <var>template</var>&lt;std::size_t&gt; X* alloc();
    <var>template</var>&lt;std::size_t&gt; <var>static</var> X* adjust();
};

<var>template</var>&lt;<var>class</var> T&gt; <var>void</var> f(T* p) {

    T* p1 = p-&gt;alloc&lt;200&gt;(); <cite>// ill-formed: &lt; means less than</cite>
    T* p2 = p-&gt;<var>template</var> alloc&lt;200&gt;(); <cite>// OK: &lt; starts template argument list</cite>

    T::adjust&lt;100&gt;(); <cite>// ill-formed: &lt; means less than</cite>
    T::<var>template</var> adjust&lt;100&gt;(); <cite>// OK: &lt; starts template argument list</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
—end example ]</td></tr></table><br>
<br>
Disambiguating dependent template names (annotation): <br>
<a href="../../../../eli.thegreenplace.net/2012/02/06/dependent-name-lookup-for-c-templates/default.htm">http://eli.thegreenplace.net/2012/02/06/dependent-name-lookup-for-c-templates/</a>
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn757944"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg758141"><span title="758141,151925,1023,29,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg758141" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm861b286021" title="Wed, 01 Oct 2014 05:36:34 +0000"></span><script type="text/javascript">WhenId('CH_zTm861b286021');</script><noscript>Oct 1, 2014 at 5:36am UTC</noscript></div>
<div class="dwho"><a href="../../../user/hellhound/default.htm"><b>hellhound</b> (29)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i758141">
Great job! Thanks again for this perfect advise!
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn758141"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Registered users can post here. <a href="../../../user/default.htm">Sign in or register</a> to post.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(143652,0,151925,1,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li><a href="../../beginner/default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li><a href="../../unices/default.htm"><b>UNIX/Linux Programming</b></a></li><li class="selected"><a href="../default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~381.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
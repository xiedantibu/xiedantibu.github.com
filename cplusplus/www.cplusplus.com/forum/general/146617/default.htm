<!DOCTYPE html><!-- saved from url=(0057)http://www.cplusplus.com/forum/general/146617/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Huffman Coding Project Problem - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">General C++ Programming</a></li>
<li class="here">Huffman Coding Project Problem</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico default" title="post">&nbsp;</div> Huffman Coding Project Problem</h3><span id="CH_edttl"></span><span class="rootdatPost" title="146617,root,0,-1,1,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg770981"><span title="770981,156258,255,1,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg770981" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm0c4a71da60" title="Sat, 01 Nov 2014 22:35:31 +0000"></span><script type="text/javascript">WhenId('CH_zTm0c4a71da60');</script><noscript>Nov 1, 2014 at 10:35pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/martinmh10/default.htm"><b>martinmh10</b> (1)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i770981">
I am doing this project to create a huffman encoder and decoder, but I am stuck in the part where every character from an input file has to be assigned the huffman code.<br>
<br>
// FILE: huffman.cc<br>
// This file contains the implementation of Huffman coding and decoding program.<br>
<br>
#include &lt;fstream&gt;<br>
#include &lt;list&gt;<br>
#include &lt;string&gt;<br>
#include &lt;cassert&gt;<br>
#include "node.h"<br>
<br>
void generateCode(node* root, string codeString, list &lt;node*&gt; temp_list)<br>
{<br>
	if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL)<br>
	{<br>
		node* tempNode = new node(root-&gt;letter, root-&gt;probability);<br>
		tempNode-&gt;code = codeString;<br>
		temp_list.push_back(tempNode);<br>
	}<br>
	else if (root-&gt;left != NULL)<br>
	{<br>
		generateCode(root-&gt;left, codeString + "1", temp_list);<br>
	}<br>
	else if (root-&gt;right != NULL)<br>
	{<br>
		generateCode(root-&gt;right, codeString + "0", temp_list);<br>
	}<br>
}<br>
<br>
int main()<br>
{<br>
//////////////////////   Read Probability Data   /////////////////////<br>
<br>
	// Open the probability file for reading<br>
	string probfilename = "probability.txt";<br>
	ifstream probfile;<br>
	probfile.open(probfilename.c_str(), ifstream::in);<br>
<br>
	assert(probfile);<br>
<br>
	// Read in letters and associated probabilities, create a list of nodes<br>
	list&lt;node*&gt; node_list;<br>
	node* tempNode;<br>
	char y[6];<br>
	char x;<br>
	double probability;<br>
	for (int i = 0; i &lt;= 25; i++)<br>
	{<br>
		x = probfile.get();<br>
		probfile.get(y, 8);<br>
		probability = floor(stod(y) * 10000) / 10000;<br>
		tempNode = new node(x, probability);<br>
		node_list.push_front(tempNode);<br>
		probfile.get();<br>
	}<br>
	<br>
    // Close the probability file<br>
    probfile.close();<br>
<br>
///////////////////   Construct Huffman Coding Tree ////////////////////<br>
<br>
    // sort the node list in the order of ascending probability<br>
    node_list.sort(comp_prob);<br>
<br>
	// Repeat the following until there is only one node left in the node list,<br>
    // this node is also the root of the huffman coding tree:<br>
	//      Extract the two nodes with the lowest probabilities,<br>
    //      connect them to a new node, and insert the new node back into the list<br>
	while (node_list.size() &gt; 1)<br>
	{<br>
		tempNode = node_list.front();<br>
		node_list.pop_front();<br>
		tempNode = combine(tempNode, node_list.front());<br>
		node_list.pop_front();<br>
		node_list.push_front(tempNode);<br>
		node_list.sort(comp_prob);<br>
	}<br>
<br>
	<br>
///////////////////   Generate Huffman Codes ////////////////////////<br>
<br>
	// Traverse the huffman tree to generate the huffman coding table<br>
	list&lt;node*&gt; huffman_list;<br>
	string huffman_code;<br>
	generateCode(node_list.front(), huffman_code, huffman_list);<br>
<br>
/////////////////////////   Encode Input File   ////////////////////////////////<br>
<br>
	// Open the text file for reading<br>
	string textfilename = "input.txt";<br>
	ifstream textfile;<br>
	textfile.open(textfilename.c_str(), ifstream::in);<br>
<br>
	assert(textfile);<br>
<br>
    // Open the file for writing encoded text<br>
	string encodedfilename = "encoded.txt";<br>
	fstream encodedfile;<br>
	encodedfile.open(encodedfilename.c_str(), fstream::out | fstream::in);<br>
<br>
	assert(encodedfile);<br>
<br>
    // Input and encode each character from the input file one by one<br>
    // and output them to the output file<br>
    // TODO: add your code here ...<br>
	char a[1000];<br>
	for (int i = 0; i &lt; 10000; i++)<br>
		textfile.get(a, 2);<br>
<br>
<br>
<br>
<br>
<br>
	// Close the text file<br>
	textfile.close();<br>
<br>
//////////////////////// Decode the Encoded File ///////////////////////////<br>
<br>
	// Reset the encoded text file for reading<br>
	encodedfile.clear();<br>
    encodedfile.seekg(0, ios::beg);<br>
<br>
	// Open the file for writing decoded text<br>
	string decodedfilename = "decoded.txt";<br>
	ofstream decodedfile;<br>
	decodedfile.open(decodedfilename.c_str(), ofstream::out);<br>
<br>
	assert(decodedfile);<br>
<br>
    // Decode the text from the encoded file<br>
    // TODO: add your code here ...<br>
<br>
	// Close the input and output files for decoding<br>
	encodedfile.close();<br>
	decodedfile.close();<br>
<br>
    // Delete all the node objects<br>
    // TODO: add your code here ...<br>
<br>
	return 0;<br>
}<br>
<br>
// FILE: node.h<br>
// CLASS PROVIDED: node<br>
//     Each node on a binarytree has the following features:<br>
//     letter: a character. If an internal node, the NULL character ('\0') is used.<br>
//     probability: a double value showing the probability of occurrence<br>
//     left: a pointer to the left child<br>
//     right: a pointer to the right child<br>
<br>
<br>
#ifndef NODE_H<br>
#define NODE_H<br>
<br>
#include &lt;iostream&gt;<br>
<br>
using namespace std;<br>
<br>
class node<br>
{<br>
public:<br>
	char letter;<br>
	double probability;<br>
	string code;<br>
	node* left;<br>
	node* right;<br>
	node* parent;<br>
<br>
	node(char c, double p)<br>
    {<br>
		letter = c;<br>
		probability = p;<br>
	}<br>
};<br>
<br>
// NON-MEMBER FUNCTIONS<br>
// Attaches two nodes together to a common root<br>
node* combine(node* left_child, node* right_child)<br>
{<br>
	node* parent;<br>
	parent = new node(left_child-&gt;letter + right_child-&gt;letter, left_child-&gt;probability + right_child-&gt;probability);<br>
	parent-&gt;left = left_child;<br>
	parent-&gt;right = right_child;<br>
<br>
	return parent;<br>
}<br>
<br>
<br>
// Clean all nodes attached to the root<br>
void clean(node* root);<br>
<br>
// Define a function comparing the probability<br>
// purpose: to sort the node list in the order of ascending probability<br>
bool comp_prob(node* first, node* second)<br>
{<br>
	if ( first-&gt;probability &lt; second-&gt;probability )<br>
        return true;<br>
<br>
    return false;<br>
}<br>
<br>
#endif<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn770981"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Registered users can post here. <a href="../../../user/default.htm">Sign in or register</a> to post.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(146617,0,156258,0,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li><a href="../../beginner/default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li><a href="../../unices/default.htm"><b>UNIX/Linux Programming</b></a></li><li class="selected"><a href="../default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~437.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
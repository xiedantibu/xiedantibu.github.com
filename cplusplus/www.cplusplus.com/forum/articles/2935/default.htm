<!DOCTYPE html><!-- saved from url=(0056)http://www.cplusplus.com/forum/articles/2935/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Recusion Types - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Recusion Types</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico default" title="post">&nbsp;</div> Recusion Types</h3><span id="CH_edttl"></span><span class="rootdatPost" title="2935,root,0,-1,2,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg11951"><span title="11951,11481,255,1,1"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg11951" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTme313138232" title="Tue, 15 Jul 2008 04:38:51 +0000"></span><script type="text/javascript">WhenId('CH_zTme313138232');</script><noscript>Jul 15, 2008 at 4:38am UTC</noscript></div>
<div class="dwho"><a href="../../../user/asadulla/default.htm"><b>asadulla</b> (1)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i11951">
Introduction<br>
<br>
Here I am going to give a detail about Recursion in C++. Definition: Recursion is the process where a function is called itself but stack frame will be out of limit because function call will be infinite times. So a termination condition is mandatory to a recursion.<br>
<br>
Many complex problem can be solved by recursion in a simple code. But it's too much costly than iterative. because in every recursion call one stack frame will formed.You all already know that about it's cost. but if problem is very complex than no way to solve except recursion.<br>
<br>
Background<br>
<br>
First recursion came into mathematics and then came into Computer science. Idea of it's use that first broke your problem into subproblems and solve it by using recursion.<br>
<br>
The code<br>
<br>
In C++, Recursion can be divided into two types:<br>
(a)Run- Time Recursion: Normal as in C<br>
(b)Compile- Time Recursion: By using Template<br>
<br>
Each of these can be also divided into following types:<br>
<br>
1. Linear Recursion<br>
2. Binary Recursion<br>
3. Tail Recursion<br>
4. Mutual Recursion<br>
5. Nested Recursion<br>
<br>
<br>
1. Linear Recursion: This recursion is the most commonly used. In this recursion a function call itself in a simple manner and by termination condition it terminates. This process called 'Winding' and when it returns to caller that is called 'Un-Winding'. Termination condition also known as Base condition.<br>
<br>
Example: Factorial calculation by linear recursion<br>
<br>
Run-Time Version<br>
<br>
Code:<br>
<br>
<br>
int Fact(long n)<br>
{<br>
if(0&gt;n)<br>
return -1;<br>
if(0 == n)<br>
return 1;<br>
else<br>
{<br>
return ( n* Fact(n-1));<br>
}<br>
}<br>
<br>
<br>
<br>
Winding Process:<br>
<br>
Function called Function return<br>
<br>
Fact(6) 6*Fact(5)<br>
Fact(5) 5*Fact(4)<br>
Fact(4) 4*Fact(3)<br>
Fact(3) 3* Fact(2)<br>
Fact(2) 2* Fact(1)<br>
Fact(1) 1* Fact(0)<br>
Terminating Point<br>
Fact(0) 1<br>
<br>
Unwinding Process<br>
<br>
Fact(1) 1*1<br>
Fact(2) 2*1<br>
Fact(3) 3*2*1<br>
Fact(4) 4*3*2*1<br>
Fact(5) 5*4*3*2*1<br>
Fact(6) 6*5*4*3*2*1<br>
<br>
<br>
Compile-Time Version<br>
<br>
Code:<br>
<br>
<br>
// template for Base Condition<br>
template &lt;&gt;<br>
struct Fact&lt;0&gt;<br>
{<br>
enum<br>
{<br>
factVal = 1<br>
};<br>
};<br>
<br>
template<br>
struct Fact<br>
{<br>
// Recursion call by linear method<br>
enum<br>
{<br>
value = n * Fact::factVal<br>
};<br>
};<br>
<br>
<br>
To test it how it's working at compile time, just call<br>
cout &lt;&lt;&gt;::factVal ;<br>
And compile it then compiler error will come, because no template for -1.<br>
<br>
2. Binary Recursion: Binary Recursion is a process where function is called twice at a time inplace of once at a time. Mostly it's using in data structure like operations for tree as traversal, finding height, merging, etc.<br>
<br>
Example: Fibonacci number<br>
<br>
Run Time Version Code<br>
Code:<br>
<br>
<br>
int FibNum(int n)<br>
{<br>
// Base conditions<br>
if (n &lt; 1)<br>
return -1;<br>
if (1 == n || 2 == n)<br>
return 1; // Recursive call by Binary Method<br>
return FibNum(n - 1) + FibNum(n - 2);<br>
// At a time two recursive function called so Binary<br>
}<br>
// binary }<br>
<br>
<br>
Compile Time Version Code<br>
Code:<br>
<br>
<br>
// Base Conditions<br>
template&lt;&gt;<br>
struct FibNum&lt;2&gt;<br>
{<br>
enum { val = 1 };<br>
};<br>
template &lt;&gt;<br>
struct FibNum&lt;1&gt;<br>
{<br>
enum { val = 1 };<br>
};<br>
<br>
// Recursive call by Binary Method<br>
template<br>
struct FibNum<br>
{<br>
enum { val= FibNum::val + FibNum::val };<br>
};<br>
<br>
<br>
3. Tail Recursion: In this method, recursive function is called at the last. So it's more efficient than linear recursion method. Means you can say termination point will come(100%) only you have to put that condition.<br>
<br>
Example: Fibonacci number<br>
<br>
Run Time Version Code<br>
Code:<br>
<br>
<br>
int FibNum(int n, int x, int y)<br>
{<br>
if (1 == n) // Base Condition<br>
{<br>
return y;<br>
}<br>
else // Recursive call by Tail method<br>
{<br>
return FibNum(n-1, y, x+y);<br>
}<br>
}<br>
<br>
<br>
Compile Time Version Code<br>
<br>
Code:<br>
<br>
<br>
template<br>
struct FibNum<br>
{<br>
// Recursive call By tail method<br>
enum<br>
{<br>
val = FibNum::val<br>
};<br>
};<br>
<br>
// Base Condition or Termination<br>
template<br>
struct FibNum&lt;1,&gt;<br>
{<br>
enum<br>
{<br>
val = y<br>
};<br>
};<br>
<br>
<br>
4. Mutual Recursion: Functions calling each other. Let's say FunA calling FunB and FunB calling FunA recursively. This is not actually not recursive but it's doing same as recursive. So you can say Programming languages which are not supporting recursive calls, mutual recursion can be applied there to fulfill the requirement of recursion. Base condition can be applied to any into one or more than one or all functions.<br>
<br>
Example: To find Even Or Odd number<br>
<br>
Run Time Version Code<br>
Code:<br>
<br>
<br>
bool IsOddNumber(int n)<br>
{<br>
// Base or Termination Condition<br>
if (0 == n)<br>
return 0;<br>
else<br>
// Recursive call by Mutual Method<br>
return IsEvenNumber(n - 1);<br>
}<br>
bool IsEvenNumber(int n)<br>
{<br>
// Base or Termination Condition<br>
if (0 == n)<br>
return 1;<br>
else<br>
// Recursive call by Mutual Method<br>
return IsOddNumber(n - 1);<br>
}<br>
<br>
<br>
Compile Time Version Code<br>
Code:<br>
<br>
<br>
// Base Or Termination Conditions<br>
template &lt;&gt;<br>
struct IsOddNumber&lt;0&gt;<br>
{<br>
enum<br>
{<br>
val = 0<br>
};<br>
};<br>
template &lt;&gt;<br>
struct IsEvenNumber&lt;0&gt;<br>
{<br>
enum<br>
{<br>
val = 1<br>
};<br>
};<br>
<br>
// Recursive calls by Mutual Method<br>
<br>
template<br>
struct IsOddNumber<br>
{<br>
enum<br>
{<br>
val = n == 0 ? 0 : IsEvenNumber::val<br>
};<br>
};<br>
<br>
<br>
template<br>
struct IsEvenNumber<br>
{<br>
enum<br>
{<br>
val = n == 0 ? 1 : IsOddNumber::val<br>
};<br>
};<br>
<br>
<br>
5.Nested Recursion: It's very different than all recursions. All recursion can be converted to iterative (loop) except nested recursion. You can understand this recursion by example of Ackermann function.<br>
<br>
Example: Ackermann function<br>
<br>
Run Time Version Code<br>
Code:<br>
<br>
<br>
int Ackermann(int x, int y)<br>
{<br>
// Base or Termination Condition<br>
if (0 == x)<br>
{<br>
return y + 1;<br>
}<br>
// Error Handling condition<br>
if (x &lt;&gt; 0 &amp;&amp; 0 == y)<br>
{<br>
return Ackermann(x-1, 1);<br>
}<br>
// Recursive call by Nested method<br>
else<br>
{<br>
return Ackermann(x-1, Ackermann(x, y-1));<br>
}<br>
}<br>
<br>
<br>
Compile Time Version Code<br>
Code:<br>
<br>
<br>
// Base Or Termination condition<br>
template<br>
struct Ackermann&lt;0,&gt;<br>
{<br>
enum { val = y + 1 };<br>
};<br>
<br>
// Recursive Call by Linear Method<br>
template<br>
struct Ackermann<br>
{<br>
enum<br>
{<br>
val = Ackermann::val<br>
};<br>
};<br>
// Recursive Call by Nested Method<br>
template<br>
struct Ackermann<br>
{<br>
Enum<br>
{<br>
val = Ackermann ::val&gt;::val<br>
};<br>
};<br>
<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn11951"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg16761"><span title="16761,14151,255,1,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg16761" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm99c9598404" title="Sun, 31 Aug 2008 20:38:57 +0000"></span><script type="text/javascript">WhenId('CH_zTm99c9598404');</script><noscript>Aug 31, 2008 at 8:38pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/massoud_raji/default.htm"><b>Massoud Raji</b> (1)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i16761">
Dear Assadulla<br>
<b>In non-reursive processes</b>, the unknown is defined by a set of known elements, as it appears only in the left-hand side of the equation.<br>
<b>In recursive processes</b>, the unkonwn is defined by a set of known elements and the unknown itself, as it appears in both sides of the equation.<br>
<br>
Long before invention of mathematics, recursive approach was used in real life. For example, <br>
<b>Non-recursive:</b>  a young man receives information about his beloved girl from reliable sources.<br>
<b>Recursive:</b> a young man is getting to know his beloved girl by direct interaction with her.<br>
<br>
Leaders use recursive approach and followers use non-recursive approach.<br>
Massoud Raji
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn16761"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Topic archived. No new replies allowed.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(2935,1,11481,0,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li><a href="../../beginner/default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li><a href="../../unices/default.htm"><b>UNIX/Linux Programming</b></a></li><li><a href="../../general/default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~591.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0057)http://www.cplusplus.com/forum/articles/43381/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>map&lt; string, Obj &gt; vs map&lt; string, Obj*  - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">Articles</a></li>
<li class="here">map&lt; string, Obj &gt; vs map&lt; string, Obj* </li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico default" title="post">&nbsp;</div> map&lt; string, Obj &gt; vs map&lt; string, Obj* &gt;</h3><span id="CH_edttl"></span><span class="rootdatPost" title="43381,root,0,-1,5,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg234399"><span title="234399,23666,1023,788,1"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg234399" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm38cd864865" title="Fri, 20 May 2011 16:47:55 +0000"></span><script type="text/javascript">WhenId('CH_zTm38cd864865');</script><noscript>May 20, 2011 at 4:47pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/kfmfe04/default.htm"><b>kfmfe04</b> (788)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i234399">
let's discuss advantages and disadvantages of map&lt; string, Obj &gt; vs map&lt; string, Obj* &gt;<br>
<br>
when do you use one vs the other?  do you use a simple rule like if Obj is POD (plain-old-data), you use Obj - otherwise if class/struct, Obj*?<br>
<br>
please contribute pros and cons, and I will add your comments to the OP - ty<br>
<br>
==================================================================<br>
map&lt; string, Obj &gt;<br>
<br>
- initial copy-construction expensive for large Obj<br>
+ easy memory: when out of scope, goes away<br>
+ more explicit/self-contained in terms of ownership<br>
+ read a bit faster since no indirection needed<br>
- may require a default constructor<br>
=====================================================================<br>
map&lt; string, Obj* &gt;<br>
<br>
+ insertion/copying is cheap: only a pointer<br>
- have to think about ownership issues for new/delete<br>
+ more flexible: actual Obj can live else-where<br>
- requires extra indirection<br>
+ can take-advantage of memory pools if you create a gazillion Obj (requires new)<br>
=====================================================================
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn234399"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg234404"><span title="234404,19724,5119,4004,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg234404" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm21baf1e9d6" title="Fri, 20 May 2011 17:01:08 +0000"></span><script type="text/javascript">WhenId('CH_zTm21baf1e9d6');</script><noscript>May 20, 2011 at 5:01pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/albatross/default.htm"><b>Albatross</b> (4004)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i234404">
*cough*<br>
<span class="auto"><code class="source">std::map &lt;std::string, std::unique_ptr&lt;Obj&gt;&gt;;</code></span><br>
*cough*<br>
<br>
-Albatross
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn234404"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg234409"><span title="234409,23666,1023,788,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg234409" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTme5ae222dbe" title="Fri, 20 May 2011 17:14:26 +0000"></span><script type="text/javascript">WhenId('CH_zTme5ae222dbe');</script><noscript>May 20, 2011 at 5:14pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/kfmfe04/default.htm"><b>kfmfe04</b> (788)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i234409">
how does std::unique_ptr&lt;&gt; interact with boost::singleton_pool&lt;&gt;?<br>
<br>
I've used unique_ptr&lt;&gt; a long time ago, after getting burned by auto_ptr&lt;&gt; - I need to read up more on it before using it...<br>
<br>
btw, I don't think it's thread-safe, right?<br>
<br>
anything I need to watch out for when using unique_ptr?<br>
<br>
edit:  unique_ptr&lt;&gt; is essentially one owner?  lhs becomes the owner?<br>
edit:  does valgrind behave or does it choke on unique_ptr&lt;&gt;?
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTm843ae02cc6" title="Fri, 20 May 2011 17:19:37 +0000"></span><script type="text/javascript">WhenId('CH_zTm843ae02cc6');</script><noscript>May 20, 2011 at 5:19pm UTC</noscript></span>
<span class="dbtn" id="CH_btn234409"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg234429"><span title="234429,19724,5119,4004,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg234429" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm2eef4e898b" title="Fri, 20 May 2011 17:57:24 +0000"></span><script type="text/javascript">WhenId('CH_zTm2eef4e898b');</script><noscript>May 20, 2011 at 5:57pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/albatross/default.htm"><b>Albatross</b> (4004)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i234429">
unique_ptr is... somewhat thread-safe, because of its "uniqueness". Unfortunately, there is a way to get around it...<br>
<br>
Something you would need to watch out for is that std::unique_ptr is a C++0x feature, so... be sure you use the appropriate compiler and flags. ;) Also, if you're relying on the <tt>unique_</tt> properties of a unique_ptr, do note that there are ways to accidentally (or deliberately) circumvent these properties, such as unique_ptr::get().<br>
<br>
Also...<br>
<table class="quote"><tr><td class="qd">[It] stores a pointer to an owned object. The object is owned by <i>no other unique_ptr.</i></td></tr></table><br>
<br>
Finally, I don't know how valgrind works with unique_ptr. Sorry. :(<br>
<br>
-Albatross<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn234429"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg237158"><span title="237158,10532,1023,5804,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg237158" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm08eba01cbd" title="Sat, 28 May 2011 03:51:22 +0000"></span><script type="text/javascript">WhenId('CH_zTm08eba01cbd');</script><noscript>May 28, 2011 at 3:51am UTC</noscript></div>
<div class="dwho"><a href="../../../user/jsmith/default.htm"><b>jsmith</b> (5804)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i237158">
It doesn't matter whether or not unique_ptr is thread-safe (it isn't) because std::map&lt;&gt; isn't thread-safe.<br>
<br>
For me, the answer is very simple:  store pointers only when polymorphism is required or the object to be stored is non-copyable, and then, use boost::ptr_map instead of std::map. <br>
<br>
valgrind knows nothing about the source language of the executable;  it will work just fine.<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn237158"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Topic archived. No new replies allowed.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(43381,1,23666,0,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li><a href="../../beginner/default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li><a href="../../unices/default.htm"><b>UNIX/Linux Programming</b></a></li><li><a href="../../general/default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~577.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
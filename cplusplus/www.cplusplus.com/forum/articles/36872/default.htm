<!DOCTYPE html><!-- saved from url=(0057)http://www.cplusplus.com/forum/articles/36872/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Readonly class variables in C++ - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Readonly class variables in C++</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico default" title="post">&nbsp;</div> Readonly class variables in C++</h3><span id="CH_edttl"></span><span class="rootdatPost" title="36872,root,0,-1,20,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg199660"><span title="199660,52368,255,7,1"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg199660" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm1d115ce4d6" title="Tue, 22 Feb 2011 11:53:32 +0000"></span><script type="text/javascript">WhenId('CH_zTm1d115ce4d6');</script><noscript>Feb 22, 2011 at 11:53am UTC</noscript></div>
<div class="dwho"><a href="../../../user/masoud/default.htm"><b>Masoud</b> (7)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i199660">
One of C++ lacks in defining a class is absence of read-only variable members, something like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code>
<var>class</var> A
{
<var>public</var>:
   <u>readonly</u> <var>int</var> x; <cite>// x can not modify out of this class     </cite>

   <var>void</var> f()
   {
      x = 100; <cite>// Correct    </cite>
   }
}

<var>int</var> main()
{
   A a;
   a.x = 50; <cite>// error !</cite>

   <var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
The popular and standard solution is using Setter/Getter:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code>
<var>class</var> A
{
    <var>int</var> x;

<var>public</var>:
    <var>void</var> setX(<var>int</var> x)
    {
        <var>this</var>-&gt;x = x;
    }

    <var>int</var> getX() <var>const</var> <cite>// The popular way is returning value of the private variable  </cite>
    {
        <var>return</var> <var>this</var>-&gt;x;
    }
};
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
But, there is another solution:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br></code></pre></td>
<td class="source"><pre><code>
<var>class</var> A
{
    <var>int</var> _x; <cite>// Private variable, it can modify in this class directly    </cite>

<var>public</var>:
    A() : x(_x) <cite>// Bind reference variable x to _x</cite>
    {
    }

    <var>void</var> setX(<var>int</var> x)
    {
        <var>this</var>-&gt;_x = x;
    }

    <var>const</var> <var>int</var> &amp;x; <cite>// Constant variable</cite>
};

<cite>// Usage:</cite>

<var>int</var> main()
{
    A a;

    a.setX(50);

    cout &lt;&lt; a.x &lt;&lt; endl; <cite>// Correct</cite>

    a.x = 12; <cite>// Error !</cite>

    <var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
Good luck<br>
Masoud
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTm587094a393" title="Tue, 22 Feb 2011 11:54:31 +0000"></span><script type="text/javascript">WhenId('CH_zTm587094a393');</script><noscript>Feb 22, 2011 at 11:54am UTC</noscript></span>
<span class="dbtn" id="CH_btn199660"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg199723"><span title="199723,10532,1023,5804,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg199723" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm3f38006a37" title="Tue, 22 Feb 2011 15:28:54 +0000"></span><script type="text/javascript">WhenId('CH_zTm3f38006a37');</script><noscript>Feb 22, 2011 at 3:28pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/jsmith/default.htm"><b>jsmith</b> (5804)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i199723">
Yes, though one of my pet peeves about C++ is that the moment you introduce a reference variable (const or not) as a data member of a class (struct) or even just a const non-reference, the class becomes copyable but not assignable.  I don't understand the use of such a thing.  <br>
<br>
Because of that, I tend to prefer the get and set methods, however, as object oriented programming is supposed to model <i>data flow</i>, not the data itself, use of set/get methods generally implies that ownership of the data being set/get is in the wrong place.<br>
<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn199723"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg199805"><span title="199805,49339,0,3549,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg199805" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm3270bcda1e" title="Tue, 22 Feb 2011 19:29:34 +0000"></span><script type="text/javascript">WhenId('CH_zTm3270bcda1e');</script><noscript>Feb 22, 2011 at 7:29pm UTC</noscript></div>
<div class="dwho">closed account (<i><a href="../../../user/closed_account_zb0s216c/default.htm">zb0S216C</a></i>)</div>
</div>
<div class="dwhat" colspan="2" id="CH_i199805">
<table class="quote"><tr><td class="qd"><span class="auto"><code class="source">x = 100;</code></span></td></tr></table><br>
This is not read-only. This is writing. A read-only variable( or <i>const</i> ) cannot change it's value. It's like R.O.M( Read-Only Memory ). <br>
<br>
A way to make sure a variable never changes it's value: <span class="auto"><code class="source"> <var>static</var> <var>const</var> <var>int</var> Variable( 5 ); </code></span>.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn199805"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg199829"><span title="199829,19724,5119,4004,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg199829" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm06fc0097e3" title="Tue, 22 Feb 2011 21:09:21 +0000"></span><script type="text/javascript">WhenId('CH_zTm06fc0097e3');</script><noscript>Feb 22, 2011 at 9:09pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/albatross/default.htm"><b>Albatross</b> (4004)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i199829">
I think you somewhat missed the point, Framework. :/<br>
<br>
The point is that C++ doesn't have a keyword that permits a variable to be read but not modified by non-friends and non-members of a certain class. This article was meant to teach you how to do this in the absence of such a keyword.<br>
<br>
-Albatross
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn199829"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg199832"><span title="199832,21799,1023,7305,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg199832" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm0b7e64ad64" title="Tue, 22 Feb 2011 21:15:00 +0000"></span><script type="text/javascript">WhenId('CH_zTm0b7e64ad64');</script><noscript>Feb 22, 2011 at 9:15pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/chrisname/default.htm"><b>chrisname</b> (7305)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i199832">
I think he wants it to be modified but not by anyone outside of the class.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn199832"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg199833"><span title="199833,52368,255,7,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg199833" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm19f3b0e06e" title="Tue, 22 Feb 2011 21:16:05 +0000"></span><script type="text/javascript">WhenId('CH_zTm19f3b0e06e');</script><noscript>Feb 22, 2011 at 9:16pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/masoud/default.htm"><b>Masoud</b> (7)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i199833">
Dear jsmith and Framework!<br>
<br>
Read this article again!<br>
<br>
Readonly to the outside class but read/write within the class, Obviously "const" won't do that!<br>
<br>
Maybe you only know ANSI C/C++, but if you know about C++Builder or Delphi there is a syntax to make readonly variables:<br>
<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><var>class</var> A
{
<var>private</var>:
  <var>int</var> _x;
<var>public</var>:
  __property <var>int</var> x = {read=_x};
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
More info:<br>
The real problem is: We can not assign one object of this class to another object because of existence of reference variable.<br>
And the solution is: Writing a copy-constructor and Operator overloading for assignment
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTma039d15be4" title="Wed, 23 Feb 2011 13:18:42 +0000"></span><script type="text/javascript">WhenId('CH_zTma039d15be4');</script><noscript>Feb 23, 2011 at 1:18pm UTC</noscript></span>
<span class="dbtn" id="CH_btn199833"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg199836"><span title="199836,28666,1023,1929,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg199836" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmf161e7bace" title="Tue, 22 Feb 2011 21:32:51 +0000"></span><script type="text/javascript">WhenId('CH_zTmf161e7bace');</script><noscript>Feb 22, 2011 at 9:32pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/moorecm/default.htm"><b>moorecm</b> (1929)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i199836">
I don't see anything wrong with the getter returning by value above...actually, how about returning a const reference there?
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn199836"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg199842"><span title="199842,52368,255,7,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg199842" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTma763fa23cb" title="Tue, 22 Feb 2011 21:52:44 +0000"></span><script type="text/javascript">WhenId('CH_zTma763fa23cb');</script><noscript>Feb 22, 2011 at 9:52pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/masoud/default.htm"><b>Masoud</b> (7)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i199842">
moorecm, You are right and Setter/Getter is the best way but this is just another approach.<br>
<br>
We use getter because we have to use it, because there is not another solution in C++ syntax.<br>
<br>
Using setter in many cases is logical because we should aware of changing the value of a variable, but using getter only for returning the value of a variable is not always logical. In fact a variable is a variable not a Function or Method !<br>
<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn199842"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg199859"><span title="199859,10532,1023,5804,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg199859" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTma96886238f" title="Tue, 22 Feb 2011 23:18:05 +0000"></span><script type="text/javascript">WhenId('CH_zTma96886238f');</script><noscript>Feb 22, 2011 at 11:18pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/jsmith/default.htm"><b>jsmith</b> (5804)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i199859">
Masoud... I read it again.  Still, a public getter is probably a better approach for the reasons I gave in my original post.<br>
(C++ Builder / Delphi solutions don't interest me since they are vendor extensions and thus not portable).<br>
<br>
<table class="quote"><tr><td class="qd"><br>
The real problem is: We can not assign one object of this class to another object because of existence of reference variable.<br>
And the solution is: Writing a copy-constructor<br>
</td></tr></table><br>
<br>
Careful with terminology.   Your solution doesn't solve the problem since <i>copy construction</i> and <i>assignment</i> are two different operations in C++.  A copy constructor will not help with assignment.  A data member that is a reference makes the object <i>copyable</i> (ie, copy constructible) but not <i>assignable</i>.<br>
<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn199859"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg200016"><span title="200016,28666,1023,1929,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg200016" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmae29013440" title="Wed, 23 Feb 2011 12:15:31 +0000"></span><script type="text/javascript">WhenId('CH_zTmae29013440');</script><noscript>Feb 23, 2011 at 12:15pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/moorecm/default.htm"><b>moorecm</b> (1929)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i200016">
What I'm saying is that this feature is not needed, an inline getter that returns a const reference does what you want...
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn200016"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg200033"><span title="200033,52368,255,7,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg200033" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm68b560ace1" title="Wed, 23 Feb 2011 13:20:31 +0000"></span><script type="text/javascript">WhenId('CH_zTm68b560ace1');</script><noscript>Feb 23, 2011 at 1:20pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/masoud/default.htm"><b>Masoud</b> (7)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i200033">
jsmith, thnx for second part of your post.<br>
We should overload assignment operator for that.<br>
(i edited it.)
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn200033"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg200792"><span title="200792,37152,1023,7003,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg200792" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTme0c25717c2" title="Fri, 25 Feb 2011 15:21:02 +0000"></span><script type="text/javascript">WhenId('CH_zTme0c25717c2');</script><noscript>Feb 25, 2011 at 3:21pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/ne555/default.htm"><b>ne555</b> (7003)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i200792">
lol<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><var>class</var> A{
<var>private</var>:
	<var>struct</var> data{
		<var>int</var> member;
	};
<var>public</var>:
	A(): set(<var>new</var> data), get(set){}
	A(<var>const</var> A &amp;b): set( <var>new</var> data(*b.set) ), get(set){}
	~A(){
		<var>delete</var> set;
	}
	A&amp; <var>operator</var>=(<var>const</var> A &amp;b){
		*set = *b.set;
		<var>return</var> *<var>this</var>;
	}
	data * <var>const</var> set; <cite>//initialization sequence (error prone)</cite>
	<var>const</var> data * <var>const</var> get;
};

<cite>//Access</cite>
A a;
a.set-&gt;member = 42;
std::cout &lt;&lt; a.get-&gt;member;</code></pre></td><td class="C_btnholder"></td></tr></table></div>

</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTm07a8b1f5df" title="Fri, 25 Feb 2011 15:23:41 +0000"></span><script type="text/javascript">WhenId('CH_zTm07a8b1f5df');</script><noscript>Feb 25, 2011 at 3:23pm UTC</noscript></span>
<span class="dbtn" id="CH_btn200792"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg200835"><span title="200835,21799,1023,7305,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg200835" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm6bf397d3d3" title="Fri, 25 Feb 2011 18:15:15 +0000"></span><script type="text/javascript">WhenId('CH_zTm6bf397d3d3');</script><noscript>Feb 25, 2011 at 6:15pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/chrisname/default.htm"><b>chrisname</b> (7305)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i200835">
That's pretty cool.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn200835"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg200840"><span title="200840,28666,1023,1929,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg200840" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmfe3aa098d5" title="Fri, 25 Feb 2011 18:23:23 +0000"></span><script type="text/javascript">WhenId('CH_zTmfe3aa098d5');</script><noscript>Feb 25, 2011 at 6:23pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/moorecm/default.htm"><b>moorecm</b> (1929)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i200840">
?<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><var>class</var> A {
    <var>int</var> data_;
<var>public</var>:
    <var>const</var> <var>int</var> &amp; get() <var>const</var> { <var>return</var> data_; }
    <var>void</var> set( <var>const</var> <var>int</var> &amp; data ) { data_ = data; }
};

<cite>//...</cite>
A a;
a.set( 42 );
std::cout &lt;&lt; a.get();</code></pre></td><td class="C_btnholder"></td></tr></table></div>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn200840"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg200842"><span title="200842,9863,1023,6031,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg200842" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTme21e81cd50" title="Fri, 25 Feb 2011 18:26:33 +0000"></span><script type="text/javascript">WhenId('CH_zTme21e81cd50');</script><noscript>Feb 25, 2011 at 6:26pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/firedraco/default.htm"><b>firedraco</b> (6031)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i200842">
The point of having the struct was so you didn't have write a get/set method for every single variable.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn200842"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg200859"><span title="200859,30864,1023,2163,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg200859" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm675fe95362" title="Fri, 25 Feb 2011 19:03:40 +0000"></span><script type="text/javascript">WhenId('CH_zTm675fe95362');</script><noscript>Feb 25, 2011 at 7:03pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/m4ster_r0shi/default.htm"><b>m4ster r0shi</b> (2163)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i200859">
I want to ask something. Why is Masoud's class not assignable? I understand the general rule that adding a (const) reference member makes the class not assignable, but in this particular case this is not a problem, as that particular member doesn't need to be changed during the assignment. The only thing that needs to be changed is the <i>real</i> x, not the (public) fake one.
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTmeb1295110f" title="Fri, 25 Feb 2011 19:16:28 +0000"></span><script type="text/javascript">WhenId('CH_zTmeb1295110f');</script><noscript>Feb 25, 2011 at 7:16pm UTC</noscript></span>
<span class="dbtn" id="CH_btn200859"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg200864"><span title="200864,9863,1023,6031,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg200864" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm24e8eb3fba" title="Fri, 25 Feb 2011 19:17:34 +0000"></span><script type="text/javascript">WhenId('CH_zTm24e8eb3fba');</script><noscript>Feb 25, 2011 at 7:17pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/firedraco/default.htm"><b>firedraco</b> (6031)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i200864">
Well the compiler doesn't know that. The pointer could point to anything...
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn200864"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg200871"><span title="200871,30864,1023,2163,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg200871" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm4c8d262220" title="Fri, 25 Feb 2011 19:21:34 +0000"></span><script type="text/javascript">WhenId('CH_zTm4c8d262220');</script><noscript>Feb 25, 2011 at 7:21pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/m4ster_r0shi/default.htm"><b>m4ster r0shi</b> (2163)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i200871">
Yes, I know.<br>
<br>
What I want to say is that in this case the problem <i>can</i> be solved by providing your own assignment operator.<br>
<br>
EDIT: Never mind. I just noticed that the suggestion for an overloaded assignment operator was added <i>later</i>.
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTm4c95605376" title="Tue, 01 Mar 2011 14:59:17 +0000"></span><script type="text/javascript">WhenId('CH_zTm4c95605376');</script><noscript>Mar 1, 2011 at 2:59pm UTC</noscript></span>
<span class="dbtn" id="CH_btn200871"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg201865"><span title="201865,11526,1023,1169,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg201865" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm83b2df9a69" title="Tue, 01 Mar 2011 00:42:19 +0000"></span><script type="text/javascript">WhenId('CH_zTm83b2df9a69');</script><noscript>Mar 1, 2011 at 12:42am UTC</noscript></div>
<div class="dwho"><a href="../../../user/kempofighter/default.htm"><b>kempofighter</b> (1169)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i201865">
m4sterr0shi, why would I want to have to implement an assignment operator in order to have that proposed solution?  It doesn't make things any easier does it?<br>
<br>
moorecm, there is no benefit to returning a const reference to an integer unless you need to have a reference.  It won't save you any time since a pointer has to be copied.  The only reason to use a reference is if you needed to have a variable that would change when the underlying class attribute changes but if you need that then the design might be a problem.  Moreover it could end up being very confusing for readers if you were to use that concept throughout a large scale program.  You could easily lose track of which variables are truly local and which ones are really just pointers to private class attributes.<br>
<br>
Anyway I don't see the lack of the readonly keyword as a weakness.  C++ just happens to be a different language then C# and the designer had a different idea about how to do that.  It seems like a waste of time to design work arounds to make make C++ look like C#.  It's not the same language.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn201865"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg202028"><span title="202028,30864,1023,2163,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg202028" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmd069cc7ce0" title="Tue, 01 Mar 2011 14:44:34 +0000"></span><script type="text/javascript">WhenId('CH_zTmd069cc7ce0');</script><noscript>Mar 1, 2011 at 2:44pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/m4ster_r0shi/default.htm"><b>m4ster r0shi</b> (2163)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i202028">
<table class="quote"><tr><th class="qh"><strong>kempofighter</strong> wrote:</th></tr><tr><td class="qd">why would I want to have to implement an assignment operator in order to have that proposed solution? It doesn't make things any easier does it?</td></tr></table><br>
No, it doesn't. I don't disagree with that. Well, there is a way to make it work without providing an assignment operator. You could encapsulate the read-only functionality in a separate class and overload the assignment operator of <i>that</i> class to do nothing. Then you can use that class to build classes with read-only variables without having to overload the assignment operator again (the default assignment operator will call the overloaded assignment operator of the read-only class, which does nothing).<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>template</var> &lt;<var>class</var> T&gt;
<var>class</var> ReadOnly
{
<var>private</var>:

    <var>const</var> T &amp; real_data;

<var>public</var>:

    ReadOnly(<var>const</var> T &amp; real_data_):real_data(real_data_){}

    ReadOnly &amp; <var>operator</var>=(<var>const</var> ReadOnly &amp;)
    {
        cout &lt;&lt; <kbd>"inside ReadOnly assignment operator"</kbd> &lt;&lt; endl;
        <var>return</var> *<var>this</var>;
    }

    <var>operator</var> <var>const</var> T &amp;() {<var>return</var> real_data;}
};

<var>class</var> MyClass
{
<var>private</var>:

    <var>int</var> real_x;

<var>public</var>:

    ReadOnly&lt;<var>int</var>&gt; x;

    MyClass():real_x(0),x(real_x) {}
    MyClass(<var>const</var> MyClass &amp; obj):real_x(0),x(real_x) {real_x=obj.real_x;}

    <var>void</var> SetX(<var>int</var> n) {real_x=n;}
};

<var>void</var> print_int(<var>int</var> n) {cout &lt;&lt; n &lt;&lt; endl;}
<var>void</var> print_double(<var>double</var> d) {cout &lt;&lt; d &lt;&lt; endl;}
<var>void</var> set(<var>int</var> &amp; n, <var>int</var> m) {n=m;}

<var>int</var> main()
{
    MyClass a;

    <cite>//a.x=1; //ERROR!!!</cite>
    a.SetX(1);

    MyClass b(a); <cite>//Copy Constructor</cite>

    b.SetX(2);

    cout &lt;&lt; <kbd>"assigning b to c"</kbd> &lt;&lt; endl;
    MyClass c; c=b; <cite>//Assignment</cite>

    <cite>//set(c.x,3); //ERROR!!!</cite>
    c.SetX(c.x+1);

    cout &lt;&lt; <kbd>"a.x: "</kbd>; cout &lt;&lt; a.x &lt;&lt; endl;
    cout &lt;&lt; <kbd>"b.x: "</kbd>; print_int(b.x);
    cout &lt;&lt; <kbd>"c.x: "</kbd>; print_double(c.x);

    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
I wonder if it can be done without writing a (copy) constructor too...<br>
<br>
Perhaps by having a ReadOnly variable which also happens to be<br>
the real variable and making the owning class a friend of that variable...<br>
<br>
EDIT: Something like this (the testing code is the same as above):<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> T&gt;
<var>struct</var> FriendMaker {<var>typedef</var> T Type;};

<var>template</var> &lt;<var>class</var> T, <var>class</var> C&gt;
<var>class</var> ReadOnly
{
<var>friend</var> <var>class</var> FriendMaker&lt;C&gt;::Type;

<var>private</var>:
    T data;
    ReadOnly &amp; <var>operator</var>=(<var>const</var> T &amp; t) {data=t;}

<var>public</var>:
    <var>operator</var> <var>const</var> T &amp;() {<var>return</var> data;}
};

<var>class</var> MyClass
{
<var>public</var>:
    ReadOnly&lt;<var>int</var>,MyClass&gt; x;
    <var>void</var> SetX(<var>int</var> n) {x=n;}
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<table class="quote"><tr><th class="qh"><strong>kempofighter</strong> wrote:</th></tr><tr><td class="qd">Anyway I don't see the lack of the readonly keyword as a weakness.</td></tr></table><br>
Neither do I. But I find it challenging/entertaining to come up with such hacks/work-arounds. <br>
At the very least, it can help one understand better how C++ works.
</div>
<div class="dhow">
<span class="sedited">Last edited on <span id="CH_zTm375ee69b88" title="Tue, 01 Mar 2011 15:51:09 +0000"></span><script type="text/javascript">WhenId('CH_zTm375ee69b88');</script><noscript>Mar 1, 2011 at 3:51pm UTC</noscript></span>
<span class="dbtn" id="CH_btn202028"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Topic archived. No new replies allowed.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(36872,1,52368,0,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li><a href="../../beginner/default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li><a href="../../unices/default.htm"><b>UNIX/Linux Programming</b></a></li><li><a href="../../general/default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~562.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
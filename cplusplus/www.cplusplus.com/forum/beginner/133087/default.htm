<!DOCTYPE html><!-- saved from url=(0058)http://www.cplusplus.com/forum/beginner/133087/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Simple Image Display - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">Beginners</a></li>
<li class="here">Simple Image Display</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico question" title="question">&nbsp;</div> Simple Image Display</h3><span id="CH_edttl"></span><span class="rootdatPost" title="133087,root,0,-1,3,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg715199"><span title="715199,119025,1023,6,1"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg715199" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm42fa7fa9cf" title="Fri, 23 May 2014 22:12:18 +0000"></span><script type="text/javascript">WhenId('CH_zTm42fa7fa9cf');</script><noscript>May 23, 2014 at 10:12pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/pheonix/default.htm"><b>Pheonix</b> (6)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i715199">
I am looking for a line(s) of code to use to display a previously saved image in a window. I am currently working in Microsoft Visual Studio 2010 Express and would prefer if the method did not involve downloading any external programs. I would be happy if the image could be displayed in either a separate window or within the console application, it does not matter (if it is in another window, it would be good if you include code to change an image within that window to another image, without actually closing that window and opening another). Also, please include any other libraries used ( #include &lt;&gt; ). I am using it for the purposes of making a game, I already have all of main code for the game, I am just looking for a way of displaying some kind of visuals to go along with it.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn715199"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg715206"><span title="715206,18360,1023,12939,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg715206" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmafae8ebacf" title="Sat, 24 May 2014 00:48:12 +0000"></span><script type="text/javascript">WhenId('CH_zTmafae8ebacf');</script><noscript>May 24, 2014 at 12:48am UTC</noscript></div>
<div class="dwho"><a href="../../../user/disch/default.htm"><b>Disch</b> (12939)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i715206">
Tsk... another newbie that got sucked into the foreboding vortex of console games.<br>
<br>
Console games are difficult to make.  The console really just isn't designed with them in mind.. and any attempt to use the console to make them usually twists the console into a mockery of its primary function.  Usually it's much easier to use a proper window.<br>
<br>
It's especially difficult to add images as an afterthought.  If you would have just started with a real window from day 1, you would have had a much easier time.<br>
<br>
<br>
That said.... I've created 2 working examples for you below.<br>
<br>
1)  Using WinAPI only (only works on Windows, is slow, is clunky, and is much more confusing, but does not require any additional downloads)<br>
<br>
2)  Using SFML  (crossplatform -- works on Windows, *nix, Mac... is much much faster, and is much, much easier to write, use and understand.  But does require an additional download).<br>
<br>
<br>
I know you said you didn't want to download any libs.. but you really should reconsider.  Working directly with WinAPI for a game is a horrendous choice.  You'll see why when you look at the code below<br>
<br>
<br>
Each of these approaches assume the following:<br>
- You want to create a new window that just houses the image and does nothing else<br>
- The image is a singular static image of a fixed size that takes up the whole screen<br>
<br>
<br>
There are ways to display the image directly to the console... but you are limited in the number of colors it will display... it will be EVEN SLOWER, even clunkier, and much, much more confusing.  Plus I don't even really know how to do it.<br>
<br>
<br>
Without further ado... here's the code.  I tried to make both of these as simple as possible.  I did not intentionally make the WinAPI version confusing -- WinAPI just really is that confusing:<br>
<br>
<b>Using WinAPI directly:</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;Windows.h&gt;</dfn>

<cite>///////////////////////////////</cite>
<cite>///////////////////////////////</cite>
<cite>// I hate globals, but to keep this simple, we'll have our image stuff be global</cite>
HDC         imageDC;        <cite>// the DC to hold our image</cite>
HBITMAP     imageBmp;       <cite>// the actual bitmap which contains the image (will be put in the DC)</cite>
HBITMAP     imageBmpOld;    <cite>// the DC's old bitmap (for cleanup)</cite>

<var>const</var> <var>int</var>   screenSize_X = 640;
<var>const</var> <var>int</var>   screenSize_Y = 480;

<cite>///////////////////////////////</cite>
<cite>///////////////////////////////</cite>
<cite>// Function to load the image into our DC so we can draw it to the screen</cite>
<var>void</var> loadImage(<var>const</var> <var>char</var>* pathname)
{
    imageDC = CreateCompatibleDC(NULL);     <cite>// create an offscreen DC</cite>

    imageBmp = (HBITMAP)LoadImageA(         <cite>// load the bitmap from a file</cite>
            NULL,                           <cite>// not loading from a module, so this is NULL</cite>
            pathname,                       <cite>// the path we're loading from</cite>
            IMAGE_BITMAP,                   <cite>// we are loading a bitmap</cite>
            0,0,                            <cite>// don't need to specify width/height</cite>
            LR_DEFAULTSIZE | LR_LOADFROMFILE<cite>// use the default bitmap size (whatever the file is), and load it from a file</cite>
            );

    imageBmpOld = (HBITMAP)SelectObject(imageDC,imageBmp);  <cite>// put the loaded image into our DC</cite>
}


<cite>///////////////////////////////</cite>
<cite>// Function to clean up</cite>
<var>void</var> cleanUpImage()
{
    SelectObject(imageDC,imageBmpOld);      <cite>// put the old bmp back in our DC</cite>
    DeleteObject(imageBmp);                 <cite>// delete the bmp we loaded</cite>
    DeleteDC(imageDC);                      <cite>// delete the DC we created</cite>
}

<cite>///////////////////////////////</cite>
<cite>///////////////////////////////</cite>
<cite>// The function to draw our image to the display (the given DC is the screen DC)</cite>
<var>void</var> drawImage(HDC screen)
{
    BitBlt(
        screen,         <cite>// tell it we want to draw to the screen</cite>
        0,0,            <cite>// as position 0,0 (upper-left corner)</cite>
        screenSize_X,   <cite>// width of the rect to draw</cite>
        screenSize_Y,   <cite>// height of the rect</cite>
        imageDC,        <cite>// the DC to get the rect from (our image DC)</cite>
        0,0,            <cite>// take it from position 0,0 in the image DC</cite>
        SRCCOPY         <cite>// tell it to do a pixel-by-pixel copy</cite>
        );
}


<cite>///////////////////////////////</cite>
<cite>///////////////////////////////</cite>
<cite>// A callback to handle Windows messages as they happen</cite>
LRESULT CALLBACK wndProc(HWND wnd,UINT msg,WPARAM w,LPARAM l)
{
    <cite>// what kind of message is this?</cite>
    <var>switch</var>(msg)
    {
        <cite>// we are interested in WM_PAINT, as that is how we draw</cite>
    <var>case</var> WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC screen = BeginPaint(wnd,&amp;ps);   <cite>// Get the screen DC</cite>
            drawImage(screen);                  <cite>// draw our image to our screen DC</cite>
            EndPaint(wnd,&amp;ps);                  <cite>// clean up</cite>
        }<var>break</var>;

        <cite>// we are also interested in the WM_DESTROY message, as that lets us know when to close the window</cite>
    <var>case</var> WM_DESTROY:
        PostQuitMessage(0);
        <var>break</var>;
    }

    <cite>// for everything else, let the default window message handler do its thing</cite>
    <var>return</var> DefWindowProc(wnd,msg,w,l);
}


<cite>///////////////////////////////</cite>
<cite>///////////////////////////////</cite>
<cite>// A function to create the window and get it set up</cite>
HWND createWindow(HINSTANCE inst)
{
    WNDCLASSEX wc = {0};        <cite>// create a WNDCLASSEX struct and zero it</cite>
    wc.cbSize =         <var>sizeof</var>(WNDCLASSEX);     <cite>// tell windows the size of this struct</cite>
    wc.hCursor =        LoadCursor(NULL,MAKEINTRESOURCE(IDC_ARROW));        <cite>// tell it to use the normal arrow cursor for this window</cite>
    wc.hInstance =      inst;                   <cite>// give it our program instance</cite>
    wc.lpfnWndProc =    wndProc;                <cite>// tell it to use our wndProc function to handle messages</cite>
    wc.lpszClassName =  TEXT(<kbd>"DisplayImage"</kbd>);   <cite>// give this window class a name.</cite>

    RegisterClassEx(&amp;wc);           <cite>// register our window class with Windows</cite>

    <cite>// the style of the window we want... we want a normal window but do not want it resizable.</cite>
    <var>int</var> style = WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU;    <cite>// normal overlapped window with a caption and a system menu (the X to close)</cite>
        
    <cite>// Figure out how big we need to make the window so that the CLIENT area (the part we will be drawing to) is</cite>
    <cite>//  the desired size</cite>
    RECT rc = {0,0,screenSize_X,screenSize_Y};      <cite>// desired rect</cite>
    AdjustWindowRect(&amp;rc,style,FALSE);              <cite>// adjust the rect with the given style, FALSE because there is no menu</cite>

    <var>return</var> CreateWindow(            <cite>// create the window</cite>
        TEXT(<kbd>"DisplayImage"</kbd>),       <cite>// the name of the window class to use for this window (the one we just registered)</cite>
        TEXT(<kbd>"Display an Image"</kbd>),   <cite>// the text to appear on the title of the window</cite>
        style | WS_VISIBLE,         <cite>// the style of this window (OR it with WS_VISIBLE so it actually becomes visible immediately)</cite>
        100,100,                    <cite>// create it at position 100,100</cite>
        rc.right - rc.left,         <cite>// width of the window we want</cite>
        rc.bottom - rc.top,         <cite>// height of the window</cite>
        NULL,NULL,                  <cite>// no parent window, no menu</cite>
        inst,                       <cite>// our program instance</cite>
        NULL);                      <cite>// no extra parameter</cite>

}


<cite>///////////////////////////////</cite>
<cite>///////////////////////////////</cite>
<cite>// The actual entry point for the program!</cite>
<cite>//  This is Windows' version of the 'main' function:</cite>
<var>int</var> WINAPI WinMain(HINSTANCE inst,HINSTANCE prev,LPSTR cmd,<var>int</var> show)
{
    <cite>// load our image</cite>
    loadImage(<kbd>"image.bmp"</kbd>);

    <cite>// create our window</cite>
    HWND wnd = createWindow(inst);

    <cite>// Do the message pump!  keep polling for messages (and respond to them)</cite>
    <cite>//  until the user closes the window.</cite>
    MSG msg;
    <var>while</var>( GetMessage(&amp;msg,wnd,0,0) ) <cite>// while we are getting non-WM_QUIT messages...</cite>
    {
        TranslateMessage(&amp;msg);     <cite>// translate them</cite>
        DispatchMessage(&amp;msg);      <cite>// and dispatch them (our wndProc will process them)</cite>
    }

    <cite>// once the user quits....</cite>
    cleanUpImage();
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Ran out of space... so I'll put the SFML code in a follow-up post
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn715206"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg715207"><span title="715207,18360,1023,12939,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg715207" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm133eea3e77" title="Sat, 24 May 2014 00:49:26 +0000"></span><script type="text/javascript">WhenId('CH_zTm133eea3e77');</script><noscript>May 24, 2014 at 12:49am UTC</noscript></div>
<div class="dwho"><a href="../../../user/disch/default.htm"><b>Disch</b> (12939)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i715207">
<b>Using SFML:</b><br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br></code></pre></td>
<td class="source"><pre><code>
<cite>// I'm cheating a little with this header -- you normally have to include</cite>
<cite>// SFML/Graphics.hpp and SFML/Window.hpp and link to the libs, but I just include</cite>
<cite>// this common header I made which does all that automatically</cite>
<dfn>#include &lt;sfml.h&gt;</dfn>


<cite>///////////////////////////////</cite>
<cite>///////////////////////////////</cite>

<var>const</var> <var>int</var>   screenSize_X = 640;
<var>const</var> <var>int</var>   screenSize_Y = 480;

<cite>///////////////////////////////</cite>
<cite>///////////////////////////////</cite>
<cite>// Function to load the image into our texture and sprite so we can draw it</cite>
<var>void</var> loadImage(<var>const</var> <var>char</var>* pathname, sf::Texture&amp; texture, sf::Sprite&amp; sprite)
{
    texture.loadFromFile(pathname);     <cite>// load it from the file</cite>
    sprite.setTexture(texture);         <cite>// put that texture in our sprite</cite>
    sprite.setTextureRect( sf::IntRect(0,0,screenSize_X,screenSize_Y) );    <cite>// the rectangle of the texture to use for this sprite</cite>
}

<cite>///////////////////////////////</cite>
<cite>///////////////////////////////</cite>
<cite>// Normal entry point</cite>
<var>int</var> main()
{
    <cite>// Create our window</cite>
    sf::RenderWindow window(
        sf::VideoMode(screenSize_X,screenSize_Y),       <cite>// size of the client area we want</cite>
        <kbd>"Display an Image"</kbd>                              <cite>// The text to appear on the window title</cite>
        );

    <cite>// load our image</cite>
    sf::Texture     texture;        <cite>// the texture which will contain our pixel data</cite>
    sf::Sprite      sprite;         <cite>// the sprite which will actually draw it</cite>
    loadImage(<kbd>"image.bmp"</kbd>,texture,sprite);

    <cite>// Set FPS so this draws at 60 FPS (note:  I didn't do this for the WinAPI version because it'd be too hard for such</cite>
    <cite>//  a small example)</cite>
    window.setFramerateLimit( 60 );
    
    <var>bool</var> program_running = <var>true</var>;        <cite>// true until the user wants to quit</cite>
    <var>while</var>(program_running)
    {
        <cite>// Do the event pump -- same idea as with Windows... look for events and process them</cite>
        sf::Event evt;
        <var>while</var>( window.pollEvent(evt) )      <cite>// while there are any events to process...</cite>
        {
            <cite>// process them. But we're only interested in the closed event</cite>
            <var>if</var>(evt.type == sf::Event::EventType::Closed)        <cite>// is this a close event?</cite>
                program_running = <var>false</var>;                        <cite>// indicate that we want the window to close</cite>
        }

        <cite>// now that events are processed... draw our image</cite>
        window.draw(sprite);        <cite>// just draw it to the back buffer</cite>
        window.display();           <cite>// and display it so the back buffer moves to the front</cite>
    }
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<br>
<br>
So yeah.<br>
<br>
My advice:  Save yourself some headaches.  Ditch the console, get a lib like SFML, and never look back.<br>
<br>
If you're interested in making games... working in the console is a complete waste of time.
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn715207"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Topic archived. No new replies allowed.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(133087,1,119025,0,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li class="selected"><a href="../default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li><a href="../../unices/default.htm"><b>UNIX/Linux Programming</b></a></li><li><a href="../../general/default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~162.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
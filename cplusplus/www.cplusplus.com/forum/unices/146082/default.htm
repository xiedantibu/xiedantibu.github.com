<!DOCTYPE html><!-- saved from url=(0056)http://www.cplusplus.com/forum/unices/146082/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>watershed problem - C++ Forum</title>
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Forum</a></li>
<li><a href="../default.htm">UNIX/Linux Programming</a></li>
<li class="here">watershed problem</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<h3><div class="C_ico default" title="post">&nbsp;</div> watershed problem</h3><span id="CH_edttl"></span><span class="rootdatPost" title="146082,root,0,-1,5,0"></span><div id="CH_PostList"><div class="C_forPost" id="msg768691"><span title="768691,155670,255,4,1"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg768691" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm740a938304" title="Mon, 27 Oct 2014 13:36:10 +0000"></span><script type="text/javascript">WhenId('CH_zTm740a938304');</script><noscript>Oct 27, 2014 at 1:36pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/agondel/default.htm"><b>agondel</b> (4)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i768691">
Hello<br>
<br>
I'm currently working on the localization of elastic waves for a research semester at a university.<br>
I use the software Freefem++ in order to solve equations.<br>
Then, I have to find the crests of the solution found thanks to his graph (for example this kind of graph: <a href="../../../../www.casimages.com/i/141022093627498097.png%29">http://www.casimages.com/i/141022093627498097.png).</a><br>
<br>
Nevertheless, as there's not "watershed" method on Freefem++, I have to compile a C++ code.<br>
<br>
My boss gave me the code below, but the latter doesn't work. As I don't know how a C++ code works, it's very hard for me to understand what I have to change.<br>
<br>
Do you have an idea ?<br>
 <br>
Code :<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "ff++.hpp"</dfn>
<cite>// #ifndef WITH_NO_INIT</cite>
<cite>// #include "ff++.hpp"</cite>
<cite>// #include "AFunction_ext.hpp"</cite>
<cite>// #endif</cite>
<cite>// using namespace std;</cite>
<dfn>#include &lt;set&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>
<cite>//#include "msh3.hpp"</cite>
<cite>// #include &lt;iostream&gt;</cite>
<var>using</var> <var>namespace</var>  Fem2D;
<cite>// FreeFem glue</cite>
<var>class</var> WATERSHED_P1_Op : <var>public</var> E_F0mps
{
<var>public</var>:
    Expression eTh,eff,eret;
   
    <var>static</var> <var>const</var> <var>int</var> n_name_param = 1;
    <var>static</var> basicAC_F0::name_and_type name_param[n_name_param];
    Expression nargs[n_name_param];
<var>public</var>:
    WATERSHED_P1_Op(<var>const</var> basicAC_F0 &amp;  args,Expression tth, Expression fff,Expression rrr)
    : eTh(tth),eff(fff),eret(rrr)
    {
        args.SetNameParam(n_name_param,name_param,nargs);
    }
    AnyType <var>operator</var>()(Stack stack) <var>const</var>;
   
<var>private</var>:
    <var>template</var>&lt;<var>typename</var> T&gt;
    T arg(<var>int</var> i, Stack stack, T a) <var>const</var> {
        <var>return</var> nargs[i]
        ? GetAny&lt; T &gt;( (*nargs[i])(stack) )
        : a;
    }
};
basicAC_F0::name_and_type WATERSHED_P1_Op::name_param[]= {
    {  <kbd>"eps"</kbd>,  &amp;<var>typeid</var>(<var>double</var>)}
};
<cite>// algorithm</cite>
<var>typedef</var> <var>int</var> triangle_t;
<var>typedef</var> <var>int</var> vertex_t;
<var>typedef</var> <var>int</var> color_t;
<var>struct</var> fat_vertex_t {
    vertex_t vertex;
    triangle_t triangle;
    <var>int</var> edge;
   
    fat_vertex_t(vertex_t v, triangle_t t, <var>int</var> e)
    : vertex(v), triangle(t), edge(e) {}
    <var>friend</var> <var>bool</var> <var>operator</var>&lt;(fat_vertex_t <var>const</var>&amp; a, fat_vertex_t <var>const</var>&amp; b)
    { <var>return</var> a.vertex &lt; b.vertex; }
   
    <var>friend</var> <var>bool</var> <var>operator</var>==(fat_vertex_t <var>const</var>&amp; a, fat_vertex_t <var>const</var>&amp; b)
    { <var>return</var> a.vertex == b.vertex; }
};
<var>typedef</var> std::vector&lt;fat_vertex_t&gt; vertices_t;
<var>typedef</var> std::pair&lt;fat_vertex_t, <var>double</var>&gt; ver_val_t;
<var>struct</var> cmp_t {
    <var>bool</var> <var>operator</var>()(ver_val_t <var>const</var>&amp; t1, ver_val_t <var>const</var>&amp; t2) <var>const</var> {
        <var>return</var> t1.second &lt; t2.second;
    }
};
<var>typedef</var> std::priority_queue&lt;ver_val_t, std::vector&lt;ver_val_t&gt;, cmp_t&gt; queue_t;
<var>typedef</var> KNM&lt;<var>long</var>&gt; ret_type;
<var>template</var>&lt;<var>typename</var> Func&gt;
<var>void</var> for_each_triangle(Mesh <var>const</var>&amp; Th, triangle_t <var>const</var> triangle0, <var>int</var> <var>const</var> edge0, Func func) {
    <var>int</var> <var>const</var> vertex = Th(triangle0, edge0);
   
    <var>if</var>( !func( triangle0 ) )
      <var>return</var>;
    <var>int</var> edge = edge0;
    <var>int</var> triangle = triangle0;
    <var>for</var>(;;) {
        edge = (edge + 1) % 3;
        <var>if</var>( Th(triangle, edge) == vertex )
            edge = (edge + 1) % 3;
        triangle = Th.ElementAdj( triangle, edge );
        <var>if</var>( triangle == triangle0 )
            <var>return</var>;
       
        <var>if</var>( triangle &lt; 0 )
            <var>break</var>;
       
        <var>if</var>( !func( triangle ) )
            <var>return</var>;
    }
    triangle = triangle0;
    edge = edge0;
    <var>for</var>(;;) {
        edge = (edge - 1) % 3;
        <var>if</var>( Th(triangle, edge) == vertex )
            edge = (edge - 1) % 3;
        triangle = Th.ElementAdj( triangle, edge );
        <var>if</var>( triangle == triangle0 )
            <var>return</var>;
       
        <var>if</var>( triangle &lt; 0 )
            <var>break</var>;
       
        <var>if</var>( !func( triangle ) )
            <var>return</var>;
    }
}
<var>template</var>&lt;<var>typename</var> Func&gt;
<var>struct</var> for_each_neighbor_helper {
    Func func;
    Mesh <var>const</var>&amp; Th;
    <var>bool</var> <var>operator</var>()(triangle_t triangle) {
        <var>for</var>(<var>int</var> e = 0; e &lt; 3; ++e)
            <var>if</var>(! func( Th(triangle, e), triangle, e ) )
                <var>return</var> <var>false</var>;
        <var>return</var> <var>true</var>;
    }
};
<var>template</var>&lt;<var>typename</var> Func&gt;
<var>void</var> for_each_neighbor(Mesh <var>const</var>&amp; Th, triangle_t <var>const</var> triangle0, <var>int</var> <var>const</var> edge0, Func func) {
    for_each_neighbor_helper&lt;Func&gt; help = { func, Th };
    <cite>// check adjacent triangles</cite>
    for_each_triangle(Th, triangle0, edge0, help);
}
<var>template</var>&lt;<var>typename</var> Cont&gt;
<var>void</var> erase_unique(Cont&amp; cont) {
    std::sort(cont.begin(), cont.end());
    cont.erase(
        std::unique(cont.begin(), cont.end()),
        cont.end()
    );
}
<var>struct</var> maxima_helper {
    KN&lt;<var>double</var>&gt; <var>const</var>&amp; tff;
    <var>double</var>&amp; maxval;
    <var>bool</var>&amp; is_max;
    <var>bool</var> <var>operator</var>()(vertex_t vertex, triangle_t triangle, <var>int</var> edge) <var>const</var> {
        <var>double</var> val = tff[ vertex ];
        <var>if</var>(val &gt; maxval) {
            is_max = <var>false</var>;
            <var>return</var> <var>false</var>;
        }
        <var>return</var> <var>true</var>;
    }
};
<var>static</var> <var>void</var> maxima(Mesh <var>const</var>&amp; Th, KN&lt;<var>double</var>&gt; <var>const</var>&amp; tff, vertices_t&amp; vertices, <var>double</var> epsr)
{
    <var>const</var> <var>int</var> nbt=Th.nt; <cite>// nombre de triangles</cite>
    <cite>// loop over vertices</cite>
    <var>for</var>(<var>int</var> it = 0; it &lt; nbt; ++it) {
        <var>int</var> maxiv = 0;
        <var>double</var> maxval = tff[ Th(it,0) ];
        <var>int</var> iv;
        <var>for</var>(iv=1; iv &lt; 3; ++iv) {
            <var>int</var> i = Th(it,iv);
            <var>double</var> val = tff[i];
            <var>if</var>(val &gt; maxval) {
                maxiv = iv;
                maxval = val;
            }
        }
        iv = maxiv;
       
        <var>if</var>(std::abs(maxval) &lt; epsr)
            <var>continue</var>;
        <var>bool</var> is_max = <var>true</var>;
       
        maxima_helper helper = { tff, maxval, is_max };
       
        for_each_neighbor(Th, it, iv, helper);
        <var>if</var>(!is_max)
            <var>continue</var>;
<cite>//         std::cout &lt;&lt; "FOUND " &lt;&lt; it &lt;&lt; ' ' &lt;&lt; maxiv &lt;&lt; ' ' &lt;&lt; Th(it, maxiv) &lt;&lt; ' ' &lt;&lt; maxval &lt;&lt; std::endl;</cite>
        vertices.push_back(fat_vertex_t( Th(it,maxiv), it, maxiv ));
    }
    erase_unique(vertices);
}
<dfn>#if 0</dfn>
<var>static</var> <var>void</var> maxima(Mesh <var>const</var>&amp; Th, KN&lt;<var>double</var>&gt; <var>const</var>&amp; tff, queue_t&amp; roots, std::vector&lt;color_t&gt;&amp; colors, <var>double</var> epsr)
{
    <var>const</var> <var>int</var> nbt=Th.nt; <cite>// nombre de triangles</cite>
    <var>const</var> <var>int</var> nbv=Th.nv; <cite>// nombre de vertices</cite>
    <var>enum</var> pixel_type {
        MAXIMUM,
        PLATEAU,
        NON_MAXIMUM
    };
    <cite>// the one that increments current_color</cite>
    <cite>// shall push to roots</cite>
    color_t current_color = 1;
    std::vector&lt;<var>bool</var>&gt; visited ( nbv, <var>false</var> );
    <var>auto</var> analyse_neighbors = [&amp;](vertex_t <var>const</var> vertex0, triangle_t <var>const</var> triangle0, <var>int</var> edge0) {
        pixel_type pxl = MAXIMUM;
        for_each_neighbor(Th, triangle0, edge0,
          [&amp;](vertex_t vertex, triangle_t triangle, <var>int</var> edge) {
            <var>if</var>( vertex == vertex0 )
                <var>return</var> <var>true</var>;
            <var>if</var>( tff[vertex] &gt;  tff[vertex0] ) {
                pxl = NON_MAXIMUM;
                <var>return</var> <var>false</var>;
            }
            <var>if</var>( tff[vertex] == tff[vertex0] )
                pxl = PLATEAU;
            <var>return</var> <var>true</var>;
        });
        <var>return</var> pxl;
    };
    <var>auto</var> analyse_plateau = [&amp;](vertex_t <var>const</var> vertex0, triangle_t <var>const</var> triangle0, <var>int</var> edge0) {
        colors[vertex0] = current_color;
        <cite>// early exit</cite>
        color_t new_label = current_color;
        <cite>// do not forget marked nodes</cite>
        std::deque&lt;fat_vertex_t&gt; queue;
        queue.push_back({ vertex0, triangle0, edge0 });
        <var>auto</var> it = queue.begin();
        <var>auto</var> <var>const</var> end = queue.end();
        <var>for</var>(; it != end; ++it ) {
            fat_vertex_t <var>const</var>&amp; vv = *it;
            for_each_neighbor(Th, vv.triangle, vv.edge,
              [&amp;](vertex_t vertex, triangle_t triangle, <var>int</var> edge) {
                <var>if</var>( colors[vertex] == -1 &amp;&amp; tff[vertex] == tff[vertex0] ) {
                    colors[vertex] = current_color;
                    queue.push_back({ vertex, triangle, edge });
                    visited[vertex] = <var>true</var>;
                }
                <var>else</var> <var>if</var>( tff[vertex] &gt; tff[vertex0] )
                    new_label = -1;
                <var>return</var> <var>true</var>;
            });
        }
        <var>if</var>( new_label == -1 )
            <var>for</var>(fat_vertex_t <var>const</var>&amp; vv : queue)
                colors[vv.vertex] = -1;
        <var>else</var> {
            ++current_color;
            roots.push({ { vertex0, triangle0, edge0 }, tff[vertex0] });
        }
    };
    <cite>// loop over vertices</cite>
    <var>for</var>(triangle_t triangle = 0; triangle &lt; nbt; ++triangle)
    <var>for</var>(<var>int</var> edge = 0; edge &lt; 3; ++edge) {
        vertex_t vertex = Th( triangle, edge );
        <var>if</var>( visited[vertex] )
            <var>continue</var>;
        pixel_type pxl = analyse_neighbors(vertex, triangle, edge);
        <var>if</var>( pxl == MAXIMUM ) {
            for_each_neighbor(Th, triangle, edge,
              [&amp;](vertex_t vertex2, <var>int</var>,<var>int</var>) {
                ffassert( tff[vertex2] &lt;= tff[vertex] );
                <var>return</var> <var>true</var>;
            });
            colors[vertex] = current_color++;
            roots.push({{ vertex, triangle, edge }, tff[vertex] });
        }
<cite>//         else if( pxl == PLATEAU )</cite>
<cite>//             analyse_plateau(vertex, triangle, edge);</cite>
        visited[vertex] = <var>true</var>;
    }
    ffassert( roots.size() == current_color-1 );
}
<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn768691"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg768693"><span title="768693,155670,255,4,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg768693" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmc0393a991c" title="Mon, 27 Oct 2014 13:36:54 +0000"></span><script type="text/javascript">WhenId('CH_zTmc0393a991c');</script><noscript>Oct 27, 2014 at 1:36pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/agondel/default.htm"><b>agondel</b> (4)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i768693">
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br></code></pre></td>
<td class="source"><pre><code> <var>struct</var> color_one_neighbor {
    KN&lt;<var>double</var>&gt; <var>const</var>&amp; tff;
    fat_vertex_t <var>const</var>&amp; current;
    std::vector&lt;color_t&gt;&amp; colors;
    color_t <var>const</var> current_color;
    queue_t&amp; queue;
    <var>bool</var> <var>operator</var>()(vertex_t vertex, triangle_t triangle, <var>int</var> edge) {
       
        fat_vertex_t vv ( vertex, triangle, edge );
        <var>if</var>(vertex == current.vertex)
            <var>return</var> <var>true</var>;
        color_t&amp; color = colors[vertex];
        <var>if</var>( color == -1 ) {
            color = current_color;
            queue.push(ver_val_t( vv, tff[vertex] ));
        }
        <var>else</var> <var>if</var>( color != current_color ) {
            color = 0;
            frontier.push_back( vv );
<cite>//                 ffassert( tff[vertex] &lt;= tff[current.vertex] ); // TODO ça explose ici</cite>
<cite>//                 std::cout &lt;&lt; "FOUND " &lt;&lt; vertex &lt;&lt; " -&gt; " &lt;&lt; color &lt;&lt; std::endl;</cite>
        }
        <var>return</var> <var>true</var>;
    }
};
AnyType WATERSHED_P1_Op::<var>operator</var>()(Stack stack) <var>const</var>
{
    MeshPoint *mp(MeshPointStack(stack));
    ret_type&amp; ret = *GetAny&lt;ret_type* &gt;( (*eret)(stack) );
    Mesh* pTh = GetAny&lt;Mesh *&gt;( (*eTh)(stack) );
   
    ffassert(pTh);
    <var>double</var>  epsr = arg(0,stack,1e-5);
    Mesh <var>const</var>&amp; Th = *pTh;
    <var>const</var> <var>int</var> nbv=Th.nv; <cite>// nombre de sommet</cite>
    <var>const</var> <var>int</var> nbt=Th.nt; <cite>// nombre de triangles</cite>
    <var>const</var> <var>int</var> nbe=Th.neb; <cite>// nombre d'aretes fontiere</cite>
    <var>const</var> <var>double</var> unset = -1e-100;
    KN&lt;<var>double</var>&gt; tff(nbv, unset);
    <cite>// loop over triangle</cite>
    <var>for</var>(<var>int</var> it=0; it &lt; nbt; ++it) {
        <var>for</var>(<var>int</var> iv=0; iv&lt;3; ++iv) {
            <var>int</var> i = Th(it,iv);
            <var>if</var>(tff[i]==unset) {
                mp-&gt;setP(pTh,it,iv);
                tff[i]=GetAny&lt;<var>double</var>&gt;((*eff)(stack));
            }
        }
    }
    queue_t queue;
    std::vector&lt;color_t&gt; colors ( nbv, -1 );
    vertices_t frontier;
   
    <cite>// prefill</cite>
    {
        vertices_t roots;
        maxima(Th, tff, roots, epsr);
        color_t color = 1;
       
        vertices_t::iterator it = roots.begin(), en = roots.end();
        <var>for</var>(; it != en; ++it) {
            fat_vertex_t <var>const</var>&amp; current = *it;
            colors[current.vertex] = color++;
            queue.push(ver_val_t( current, tff[current.vertex] ));
        }
    }
    <cite>// loop</cite>
    <var>while</var>( !queue.empty() ) {
        fat_vertex_t <var>const</var> current = queue.top().first; queue.pop();
        color_t <var>const</var> current_color = colors[current.vertex];
        ffassert( current_color != -1 );
        <var>if</var>( current_color == 0 )
            <var>continue</var>;
        <cite>// check adjacent triangles</cite>
        for_each_neighbor(
            Th, current.triangle, current.edge,
            color_one_neighbor(tff, current, colors, current_color, queue)
        );
    }
    erase_unique(frontier);
    std::cout &lt;&lt; <kbd>"OUT "</kbd> &lt;&lt; frontier.size() &lt;&lt; std::endl;
    ret.resize(2, frontier.size());
    <var>for</var>(<var>int</var> k = 0; k &lt; frontier.size(); ++k) {
        fat_vertex_t <var>const</var>&amp; vv = frontier[k];
        ret(0, k) = vv.triangle;
        ret(1, k) = vv.edge;
    }
    <var>return</var> 0l;
}
<var>class</var>  WATERSHED_P1: <var>public</var> OneOperator { <var>public</var>: 
    <var>typedef</var> Mesh *pmesh;
    <var>typedef</var> std::pair&lt;FEbase&lt;<var>double</var>, v_fes&gt;*, <var>int</var>&gt; fem_t;
    WATERSHED_P1() : OneOperator(atype&lt;<var>long</var>&gt;(),atype&lt;pmesh&gt;(),atype&lt;<var>double</var>&gt;(), atype&lt;ret_type*&gt;() ) {}
   
    E_F0 * code(<var>const</var> basicAC_F0 &amp; args) <var>const</var>
    {
        <var>return</var>  <var>new</var> WATERSHED_P1_Op( args,
                                  t[0]-&gt;CastTo(args[0]),
                                  t[1]-&gt;CastTo(args[1]),
                                  t[2]-&gt;CastTo(args[2]) );
    }
};
<var>void</var> finit()
{
    Global.Add(<kbd>"watershed"</kbd>,<kbd>"("</kbd>,<var>new</var> WATERSHED_P1);
}
LOADFUNC(finit);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
 <br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn768693"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg768695"><span title="768695,155670,255,4,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg768695" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmf296481754" title="Mon, 27 Oct 2014 13:37:19 +0000"></span><script type="text/javascript">WhenId('CH_zTmf296481754');</script><noscript>Oct 27, 2014 at 1:37pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/agondel/default.htm"><b>agondel</b> (4)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i768695">
And the mistakes are :<br>
<br>
watershed.cxx03.cpp: In member function ‘bool color_one_neighbor::operator()(vertex_t, triangle_t, int)’: <br>
watershed.cxx03.cpp:353:13: error: ‘frontier’ was not declared in this scope <br>
             frontier.push_back( vv ); <br>
             ^ <br>
watershed.cxx03.cpp: In member function ‘virtual AnyType WATERSHED_P1_Op::operator()(Stack) const’: <br>
watershed.cxx03.cpp:427:74: error: no matching function for call to ‘color_one_neighbor::color_one_neighbor(KN&lt;double&gt;&amp;, const fat_vertex_t&amp;, std::vector&lt;int&gt;&amp;, const color_t&amp;, queue_t&amp; )’ <br>
             color_one_neighbor(tff, current, colors, current_color, queue) <br>
                                                                          ^ <br>
watershed.cxx03.cpp:427:74: note: candidates are: <br>
watershed.cxx03.cpp:330:8: note: color_one_neighbor::color_one_neighbor() <br>
 struct color_one_neighbor { <br>
        ^ <br>
watershed.cxx03.cpp:330:8: note:   candidate expects 0 arguments, 5 provided <br>
watershed.cxx03.cpp:330:8: note: color_one_neighbor::color_one_neighbor(const color_one_neighbor&amp; ) <br>
watershed.cxx03.cpp:330:8: note:   candidate expects 1 argument, 5 provided
</div>
<div class="dhow">
<span class="dbtn" id="CH_btn768695"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg768806"><span title="768806,113833,1023,284,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg768806" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTmdc5e2d9739" title="Mon, 27 Oct 2014 19:38:25 +0000"></span><script type="text/javascript">WhenId('CH_zTmdc5e2d9739');</script><noscript>Oct 27, 2014 at 7:38pm UTC</noscript></div>
<div class="dwho"><a href="../../../user/norm_b/default.htm"><b>norm b</b> (284)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i768806">
<table class="quote"><tr><td class="qd">error: ‘frontier’ was not declared in this scope</td></tr></table>You need to pass "frontier" into the struct color_one_neighbor.<br>
<br>
As for the other errors, take a look at how maxima_helper is coded and implemented.<br>
<br>
I have never used Freefem++ but try the following:<br>
<br>
In color_one_neighbor:<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code><var>struct</var> color_one_neighbor {
    KN&lt;<var>double</var>&gt; <var>const</var>&amp; tff;
    fat_vertex_t <var>const</var>&amp; current;
    std::vector&lt;color_t&gt;&amp; colors;
    color_t <var>const</var> current_color;
    queue_t&amp; queue;
    vertices_t&amp; frontier;  <cite>// added line</cite>
    <var>bool</var> <var>operator</var>()(vertex_t vertex, triangle_t triangle, <var>int</var> edge) {
    . . .</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In WATERSHED_P1_Op::operator():<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code>    . . .
    <var>while</var>( !queue.empty() ) {   <cite>// line 68 above</cite>
        fat_vertex_t <var>const</var> current = queue.top().first; queue.pop();
        color_t <var>const</var> current_color = colors[current.vertex];
        ffassert( current_color != -1 );
        <var>if</var>( current_color == 0 )
            <var>continue</var>;
        <cite>// check adjacent triangles</cite>
        color_one_neighbor neighbor = { ttf, current, colors, current_color, queue, frontier }; <cite>// added</cite>
        for_each_neighbor(Th, current.triangle, current.edge, neighbor); <cite>// changed</cite>
    }
    . . .</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Caveat utilitor!<br>
<br>
HTH<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn768806"></span>

</div>
</div>
</div>
<div class="C_forPost" id="msg769503"><span title="769503,155670,255,4,0"></span>
<div class="box">
<div class="boxtop">
<div class="dwhen"><a href="#msg769503" title="Link to this post"><img src="../../../img/link.png" width="16" height="8"></a> <span id="CH_zTm4eda0defa6" title="Wed, 29 Oct 2014 08:48:15 +0000"></span><script type="text/javascript">WhenId('CH_zTm4eda0defa6');</script><noscript>Oct 29, 2014 at 8:48am UTC</noscript></div>
<div class="dwho"><a href="../../../user/agondel/default.htm"><b>agondel</b> (4)</a></div>
</div>
<div class="dwhat" colspan="2" id="CH_i769503">
hello,<br>
<br>
thank you for you help !<br>
<br>
normally everything works now !<br>
<br>

</div>
<div class="dhow">
<span class="dbtn" id="CH_btn769503"></span>

</div>
</div>
</div>
</div><div class="rootinsMore"></div><div class="rootbtnMore"></div><div class="rootinsNew"></div><div class="rootbtnNew"></div><div id="CH_insNew"></div><div id="CH_reply">Registered users can post here. <a href="../../../user/default.htm">Sign in or register</a> to post.</div><div id="CH_subscription"></div><div class="rootedtNew"></div><script type="text/javascript">new for_PostList(146082,0,155670,0,'CH_PostList','CH_subscription','CH_reply','CH_insNew','CH_edttl','../../thread.cgi','../../post.cgi','../../myposts.cgi.htm',64,32,512,256,1024,16);</script></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder selected forum"><a href="../../default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../../default.htm">Forum</a></b></h3>
<ul>
<li><a href="../../beginner/default.htm"><b>Beginners</b></a></li><li><a href="../../windows/default.htm"><b>Windows Programming</b></a></li><li class="selected"><a href="../default.htm"><b>UNIX/Linux Programming</b></a></li><li><a href="../../general/default.htm"><b>General C++ Programming</b></a></li><li><a href="../../lounge/default.htm"><b>Lounge</b></a></li><li><a href="../../jobs/default.htm"><b>Jobs</b></a></li></ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus.com_252fforum_252fu~18.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
function NavFor(us) {document.getElementById('I_subnav').innerHTML=us.ok?'<div class="sect"><h3><b><a href="../../../user/default.htm">'+us.user+'</a></b></h3><ul><li><a href="../../myposts.cgi.htm">My topics</a></li></ul></div>':'';}onSession(NavFor);ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
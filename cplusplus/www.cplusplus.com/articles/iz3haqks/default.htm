<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/iz3haqks/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Features of C99 - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Features of C99</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/catfish3/default.htm" rel="author">Catfish3</a></b></div>
<div id="I_date">Apr 2, 2013 (last update: Apr 3, 2013)</div>
<h1>Features of C99</h1>
<div id="I_score">Score: 4.6/5 (33 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<H3>Introduction</H3>
C99 is the 1999 standard of the C programming language. C is a simple, low level language, that is best suited for systems programming.<br>
<br>
This article will present a number of C99's features. Some of these features have yet to appear in C++, and therefore might not be familiar to some C++ programmers.<br>
<br>
We will start off easy, with minor backports from C++, then move up to C99-only features, to wrap it up with "serious" code, adapted for this article from a small, real life project.<br>
<br>
The source code in this article was tested to compile with Pelles C IDE 7, however due to the popularity and age of C99, the code should build fine with many other C compilers. Just be sure to enable C99 support, if needed.<br>
<br>
<H3>No mandatory return for <CODE>main()</CODE></H3>
As in C++, if the return statement is omitted in the <CODE>main()</CODE> function, a <CODE>return 0;</CODE> is implied.<br>
<br>
<H3>Booleans</H3>
The <CODE>_Bool</CODE> data type is introduced, which behaves like an unsigned integer capable of storing only 1 or 0.<br>
<br>
The supporting header <EM>stdbool.h</EM> contains the macros <CODE>bool</CODE>, <CODE>true</CODE> and <CODE>false</CODE> expanding to <CODE>_Bool</CODE>, 1 and 0 respectively.<br>
<br>
<EM>Example:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdbool.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>

<var>int</var> main(<var>void</var>)
{
    <var>bool</var> b = <var>false</var>;

    printf(<kbd>"%u\n"</kbd>, b);

    b = 5 &gt; 3;
    printf(<kbd>"%u\n"</kbd>, b);

    b = 0;
    printf(<kbd>"%u\n"</kbd>, b);

    b = -987;
    printf(<kbd>"%u\n"</kbd>, b);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<EM>Output:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>0
1
0
1
</samp></pre></td></tr></table></div>
<br>
<H3><CODE>%zu</CODE> for <CODE>size_t</CODE></H3>
The <CODE>%zu</CODE> format specifier was introduced specifically for <CODE>size_t</CODE>, so as to clear the confusion of having to choose in between the unsigned integer specifiers <CODE>%u</CODE>, <CODE>%lu</CODE>, and more recently <CODE>%llu</CODE>.<br>
<br>
<EM>Example:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stddef.h&gt;</dfn>
<dfn>#include &lt;stdint.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>

<var>int</var> main(<var>void</var>)
{
    size_t sz = SIZE_MAX;

    printf(<kbd>"%zu\n"</kbd>, sz);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<EM>Possible output:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>4294967295
</samp></pre></td></tr></table></div>
<br>
<H3>Functions know their own name</H3>
The <CODE>__func__</CODE> identifier behaves like a constant <CODE>char</CODE> array containing the name of the function where it is invisibly declared.<br>
<br>
<EM>Example:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdio.h&gt;</dfn>

<var>void</var> i_know_my_name(<var>void</var>)
{
    printf(<kbd>"%s\n"</kbd>, __func__);
}

<var>int</var> main(<var>void</var>)
{
    i_know_my_name();
    printf(<kbd>"%s\n"</kbd>, __func__);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<EM>Output:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>i_know_my_name
main
</samp></pre></td></tr></table></div>
<br>
<H3>Variable-length arrays</H3>
The variable-length arrays (or VLA's) are arrays that can be declared by using a variable, instead of a compile-time constant, for their size. They do not have variable length as in being able to resize.<br>
<br>
VLA's are infamous because they're allocated on the stack and not the heap. The stack area is used for local variables, and is more limited in size than the heap. If the size of the VLA is too big, a stack overflow will occur, resulting in a crash.<br>
<br>
Still, the VLA is a very useful tool when the programmer wants to use small arrays, while avoiding the tedious <CODE>malloc()</CODE> + <CODE>free()</CODE> business.<br>
<br>
<EM>Example:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// This program will construct and display an n*n identity matrix.</cite>

<dfn>#include &lt;stddef.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>

<var>int</var> main(<var>void</var>)
{
    size_t n=0;

    printf(<kbd>"Please input `n': "</kbd>);
    scanf(<kbd>"%zu"</kbd>, &amp;n);

    <var>int</var> matrix[n][n];

    <var>for</var> (size_t i=0; i &lt; n; ++i)
        <var>for</var> (size_t j=0; j &lt; n; ++j)
            <var>if</var> (i == j)
                matrix[i][j] = 1;
            <var>else</var>
                matrix[i][j] = 0;

    <var>for</var> (size_t i=0; i &lt; n; ++i)
    {
        <var>for</var> (size_t j=0; j &lt; n; ++j)
            printf(<kbd>"%d "</kbd>, matrix[i][j]);

        printf(<kbd>"\n"</kbd>);
    }
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<EM>Sample output:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Please input `n': 10
1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 
</samp></pre></td></tr></table></div>
<br>
<H3>Variadic macros</H3>
Functions can accept a variable number of parameters by using the ellipsis (<CODE>...</CODE>). Starting from C99, so too can macros. In the macro's definition, <CODE>__VA_ARGS__</CODE> will be used to expand the parameters.<br>
<br>
<EM>Example:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdbool.h&gt;</dfn>
<dfn>#include &lt;stddef.h&gt;</dfn>
<dfn>#include &lt;stdint.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdlib.h&gt;</dfn>
<dfn>#include &lt;string.h&gt;</dfn>
<dfn>#include &lt;time.h&gt;</dfn>

<dfn>#define TIME_PRINTF(format, ...)    do {                        \
    time_t t = time(NULL);                                      \
    const char *prefix = "%s -&gt; ";                              \
    char time_format_vla[strlen(prefix) + strlen(format) + 1];  \
    strcpy(time_format_vla, prefix);                            \
    strcat(time_format_vla, format);                            \
    printf(time_format_vla, ctime(&amp;t), __VA_ARGS__);            \
} while (false)</dfn>

<var>int</var> main(<var>void</var>)
{
    srand(time(NULL));
    TIME_PRINTF(<kbd>"Hello %s, your number is %d! Please wait...\n\n"</kbd>, <kbd>"User"</kbd>, rand() % 100);

    <cite>// waste some time</cite>
    <var>for</var> (size_t n=0; n &lt; SIZE_MAX; ++n);

    <cite>// unfortunately, we need to pass at least two parameters    </cite>
    TIME_PRINTF(<kbd>"%s"</kbd>, <kbd>"So how's it going?"</kbd>);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<EM>Sample output:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Wed Apr  3 12:33:23 2013
 -&gt; Hello User, your number is 75! Please wait...

Wed Apr  3 12:33:33 2013
 -&gt; So how's it going?
</samp></pre></td></tr></table></div>
<br>
<H3>Designated initializers</H3>
C99 offers a way to control which member in a structure, or which element in an array, to initialize and to what value.<br>
<br>
It's easier to just jump into the example for this one.<br>
<br>
<EM>Example:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;ctype.h&gt;</dfn>
<dfn>#include &lt;stddef.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>

<var>int</var> main(<var>void</var>)
{
    <var>char</var> ca[10] = {[4] = <kbd>'e'</kbd>, [0] = <kbd>'a'</kbd>, [2] = <kbd>'c'</kbd>, [1] = <kbd>'b'</kbd>, [3] = <kbd>'d'</kbd>, [9] = <kbd>'z'</kbd>};

    <cite>//         0    1    2    3    4   . . . . . .  9</cite>
    <cite>// ca == {'a', 'b', 'c', 'd', 'e', 0, 0, 0, 0, 'z'}</cite>

    printf(<kbd>"Contents of ca:\n  "</kbd>);

    <cite>// the zeros are not printable, because they aren't the '0' character,</cite>
    <cite>// so we need to cast them to int so as to print their numeric value</cite>
    <var>for</var> (size_t i=0; i &lt; <var>sizeof</var> ca; ++i)
        <var>if</var> (isprint(ca[i]))
            printf(<kbd>"%c "</kbd>, ca[i]);
        <var>else</var>
            printf(<kbd>"%d "</kbd>, (<var>int</var>)ca[i]);

    printf(<kbd>"\n\n"</kbd>);

    <var>struct</var> Test
    {
        <var>char</var>    c;
        <var>int</var>     i;
        <var>float</var>   f;
    };

    <var>struct</var> Test t = {.f = 3.14f, .c = <kbd>'Z'</kbd>, .i = 10};

    printf(<kbd>"Contents of t:\n  c == %c\n  i == %d\n  f == %f\n"</kbd>, t.c, t.i, t.f);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<EM>Output:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Contents of ca:
  a b c d e 0 0 0 0 z 

Contents of t:
  c == Z
  i == 10
  f == 3.140000
</samp></pre></td></tr></table></div>
<br>
<H3>Compound literals</H3>
A compound literal is basically a nameless variables, and looks very similar to a cast. It works together beautifully with variadic macros and designated initializers to produce clean, high-level looking code.<br>
<br>
In the simplest usage scenario, compound literals take the place of temporary variables, which we don't care to have around.<br>
<br>
<EM>Example:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;ctype.h&gt;</dfn>
<dfn>#include &lt;stddef.h&gt;</dfn>
<dfn>#include &lt;stdint.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;string.h&gt;</dfn>
<dfn>#include &lt;time.h&gt;</dfn>

<cite>// this function will change the case of all letters in the message array,</cite>
<cite>// lowercase letters will become uppercase, and vice versa</cite>
<var>void</var> flip_case(<var>char</var> *message)
{
    printf(<kbd>"flip_case()\n"</kbd>);
    printf(<kbd>"Before:   %s\n"</kbd>, message);

    <var>for</var> (size_t i=0, ml = strlen(message); i &lt; ml; ++i)
    {
        <var>const</var> <var>char</var> temp = message[i];

        <var>if</var> (isupper(temp))
            message[i] = tolower(temp);
        <var>else</var>
        <var>if</var> (islower(temp))
            message[i] = toupper(temp);
    }

    printf(<kbd>"After:    %s\n\n"</kbd>, message);
}

<cite>// this function will add 10 to an integer i</cite>
<var>void</var> add_ten(<var>int</var> *i)
{
    printf(<kbd>"add_ten()\n"</kbd>);
    printf(<kbd>"Before:   %d\n"</kbd>, *i);
    *i += 10;
    printf(<kbd>"After:    %d\n\n"</kbd>, *i);
}

<cite>// this function will add 1 to even numbers in the numbers array,</cite>
<cite>// only the first n numbers are operated on</cite>
<var>void</var> kill_evens(<var>int</var> *numbers, size_t n)
{
    printf(<kbd>"kill_evens()\n"</kbd>);
    printf(<kbd>"Before:   "</kbd>);

    <var>for</var> (size_t i=0; i &lt; n; ++i)
        printf(<kbd>"%d "</kbd>, numbers[i]);

    printf(<kbd>"\n"</kbd>);

    <var>for</var> (size_t i=0; i &lt; n; ++i)
        <var>if</var> (numbers[i] % 2 == 0)
            numbers[i] += 1;

    printf(<kbd>"After:    "</kbd>);

    <var>for</var> (size_t i=0; i &lt; n; ++i)
        printf(<kbd>"%d "</kbd>, numbers[i]);

    printf(<kbd>"\n\n"</kbd>);
}

<var>int</var> main(<var>void</var>)
{
    flip_case((<var>char</var>[]){<kbd>"Hello C99 World!"</kbd>});

    add_ten(&amp;(<var>int</var>){5});

    kill_evens((<var>int</var>[]){2, 3, 29, 90, 5, 6, 8, 0}, 8);

    printf(<kbd>"Current time: %s\n"</kbd>, ctime(&amp;(time_t){time(NULL)}));
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<EM>Output:</EM>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>flip_case()
Before:   Hello C99 World!
After:    hELLO c99 wORLD!

add_ten()
Before:   5
After:    15

kill_evens()
Before:   2 3 29 90 5 6 8 0 
After:    3 3 29 91 5 7 9 1 

Current time: Wed Apr  3 12:44:55 2013
</samp></pre></td></tr></table></div>
<br>
For a more advanced example demonstrating the value of compound literals, consider this scenario: we've written our own <CODE>strscat()</CODE> function, which is basically a <CODE>strcat()</CODE> with an extra parameter for maximum length, and we want to test to see if it works correctly.<br>
<br>
Now, I'll let the code talk.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stddef.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>

<cite>///</cite>
<cite>/// @brief Appends contents of array `from` to array `to`.</cite>
<cite>/// @pre `limit` != `0`</cite>
<cite>/// @note No operation is performed for a `limit` of `0`.</cite>
<cite>/// @remarks Resulting array is NUL-terminated.</cite>
<cite>/// @param [out] to      String to be written to.</cite>
<cite>/// @param limit         Maximum number of bytes that string `to` can store, including NUL.</cite>
<cite>/// @param [in] from     String to be copied from.</cite>
<cite>/// @returns Size of resulting string (NUL not counted).</cite>
<cite>///</cite>
size_t strscat(<var>char</var> *to, size_t limit, <var>const</var> <var>char</var> *from)
{
    size_t s=0;

    <var>if</var> (limit != 0)
    {
        <var>while</var> (to[s] != <kbd>'\0'</kbd>)
            ++s;

        <var>for</var> (size_t i=0; from[i] != <kbd>'\0'</kbd> &amp;&amp; s &lt; limit - 1; ++i, ++s)
            to[s] = from[i];

        to[s] = <kbd>'\0'</kbd>;
    }

    <var>return</var> s;
}

<var>typedef</var> <var>struct</var>
{
    <var>char</var>        *to;
    size_t      limit;
    <var>const</var> <var>char</var>  *from;
    <var>const</var> <var>char</var>  *result;
    size_t      retval;
} test_t;

<var>static</var> size_t tests_failed;

<var>static</var> <var>void</var> run_test(test_t *t)
{
    size_t i=0;

    <var>if</var> (t-&gt;retval != strscat(t-&gt;to, t-&gt;limit, t-&gt;from))
    {
        ++tests_failed;
        <var>return</var>;
    }

    <var>while</var> (t-&gt;result[i] != <kbd>'\0'</kbd> || t-&gt;to[i] != <kbd>'\0'</kbd>)
        <var>if</var> (t-&gt;result[i] != t-&gt;to[i])
        {
            ++tests_failed;
            <var>break</var>;
        }
        <var>else</var>
            ++i;
}

<dfn>#define RUN_TEST(...)   run_test(&amp;(test_t){__VA_ARGS__})</dfn>

<var>int</var> main(<var>void</var>)
{
    RUN_TEST(
        .to     = (<var>char</var>[15]){<kbd>"The Cutty"</kbd>},
        .limit  = 15,
        .from   = <kbd>" Sark is a ship dry-docked in London."</kbd>,
        .result = <kbd>"The Cutty Sark"</kbd>,
        .retval = 14
    );

    RUN_TEST(
        .to     = (<var>char</var>[15]){<kbd>"The Cutty"</kbd>},
        .limit  = 0,
        .from   = <kbd>"this won't get appended"</kbd>,
        .result = <kbd>"The Cutty"</kbd>,
        .retval = 0
    );

    RUN_TEST(
        .to     = (<var>char</var>[15]){<kbd>"The Cutty"</kbd>},
        .limit  = 15,
        .from   = <kbd>"!"</kbd>,
        .result = <kbd>"The Cutty!"</kbd>,
        .retval = 10
    );

    RUN_TEST(
        .to     = (<var>char</var>[]){<kbd>"The Cutty Sark"</kbd>},
        .limit  = 3,
        .from   = <kbd>"this shouldn't get appended"</kbd>,
        .result = <kbd>"The Cutty Sark"</kbd>,
        .retval = 14
    );

    RUN_TEST(
        .to     = (<var>char</var>[]){<kbd>"The Cutty Sark"</kbd>},
        .limit  = 1,
        .from   = <kbd>"this shouldn't get appended, either"</kbd>,
        .result = <kbd>"The Cutty Sark"</kbd>,
        .retval = 14
    );

    RUN_TEST(
        .to     = (<var>char</var>[]){<kbd>""</kbd>},
        .limit  = 1,
        .from   = <kbd>"this had better not get appended!"</kbd>,
        .result = <kbd>""</kbd>,
        .retval = 0
    );

    (<var>void</var>)fprintf(stderr, <kbd>"Number of tests failed: %zu.\n"</kbd>, tests_failed);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<H3>Ending notes</H3>
I hope you enjoyed reading this article, and as always, contact me via PM if you have suggestions for improving it.<br>
<br>
<H3>Useful links</H3>
<EM>C99 articles</EM>
<UL>
<LI><A HREF="../../../www.informit.com/guides/content.aspxgcplusplusseqnum215">http://www.informit.com/guides/content.aspx?g=cplusplus&seqNum=215</A></LI>
<LI><A HREF="../../../gcc.gnu.org/onlinedocs/gcc/function-names.html">http://gcc.gnu.org/onlinedocs/gcc/Function-Names.html</A></LI>
<LI><A HREF="../../../gcc.gnu.org/onlinedocs/cpp/variadic-macros.html">http://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html</A></LI>
<LI><A HREF="../../../gcc.gnu.org/onlinedocs/gcc/variable-length.html">http://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html</A></LI>
<LI><A HREF="../../../gcc.gnu.org/onlinedocs/gcc/designated-inits.html">http://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html</A></LI>
<LI><A HREF="../../../gcc.gnu.org/onlinedocs/gcc/compound-literals.html">http://gcc.gnu.org/onlinedocs/gcc/Compound-Literals.html</A></LI>
</UL>
<br>
<EM>Software</EM>
<UL>
<LI><A HREF="../../../www.smorgasbordet.com/pellesc/default.htm">http://www.smorgasbordet.com/pellesc/</A></LI>
<LI><A HREF="../../../nuwen.net/mingw.html">http://nuwen.net/mingw.html</A></LI>
</UL>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','iz3hAqkS');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~55.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='N74NwA7f')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaiz3haqks'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaiz3haqks'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
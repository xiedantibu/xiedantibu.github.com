<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/lz86b7xj/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>The Last Line Effect - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">The Last Line Effect</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/andreykarpov/default.htm" rel="author">AndreyKarpov</a></b></div>
<div id="I_date">May 31, 2014 (last update: May 31, 2014)</div>
<h1>The Last Line Effect</h1>
<div id="I_score">Score: 4.1/5 (48 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<p>I have studied numbers of errors caused by using the Copy-Pate method and can assure you that programmers most often tend to make mistakes in the last fragment of a homogeneous code block. I have never seen this phenomenon described in books on programming, so I decided to write about it myself. I called it the "last line effect".</p>
<h2>Introduction</h2>
<p>My name is Andrey Karpov and I do an unusual job - I analyze program code of various applications with the help of static analyzers and write descriptions of errors and defects I find. I do this for pragmatic and mercenary reasons because what I do is the way our company advertises its tools PVS-Studio and CppCat. The scheme is very simple. I find bugs. Then I describe them in an article. The article attracts our potential customers' attention. Profit. But today's article is not about the analyzers.</p>
<p>When carrying out analysis of various projects, I save bugs I find and the corresponding code fragments in a special database. By the way, anyone interested can take a look at this database. We convert it into a collection of html-pages and upload them to our website in the "<a href="../../../www.viva64.com/en/examples/default.htm">Detected errors</a>" section.</p>
<p>This database is unique indeed! It currently contains 1500 code fragments with errors and is waiting for programmers to study it and reveal certain regularity patterns among these errors. That may serve as a useful basis for many future researches, manuals and articles.</p>
<p>I have never carried out any special investigation of the material gathered by now. One pattern, however, is showing up so clearly that I decided to investigate it a bit deeper. You see, in my articles I have to write the phrase "note the last line" pretty often. It occurred to me that there had to be some reason behind it.</p>
<h2>Last line effect</h2>
<p>When writing program code, programmers often have to write a series of similar constructs. Typing the same code several times is boring and inefficient. That's why they use the Copy-Paste method: a code fragment is copied and pasted several times with further editing. Everyone knows what is bad about this method: you risk easily forgetting to change something in the pasted lines and thus giving birth to errors. Unfortunately, there is often no better alternative to be found.</p>
<p>Now let's speak of the pattern I discovered. I figured out that mistakes are most often made in the last pasted block of code.</p>
<p>Here is a simple and short example:</p>
<pre >inline Vector3int32&amp; operator+=(const Vector3int32&amp; other) {
  x += other.x;
  y += other.y;
  z += other.y;
  return *this;
}</pre>
<p>Note the line "z += other.y;". The programmer forgot to replace 'y' with 'z' in it.</p>
<p>You may think this is an artificial sample, but it is actually taken from a real application. Further in this article, I am going to convince you that this is a very frequent and common issue. This is what the "last line effect" looks like. Programmers most often make mistakes at the very end of a sequence of similar edits.</p>
<p>I heard somewhere that mountain-climbers often fall off at the last few dozens of meters of ascent. Not because they are tired; they are simply too joyful about almost reaching the top - they anticipate the sweet taste of victory, get less attentive, and make some fatal mistake. I guess something similar happens to programmers.</p>
<p>Now a few figures.</p>
<p>Having studied the bug database, I singled out 84 code fragments that I found to have been written through the Copy-Paste method. Out of them, 41 fragments contain mistakes somewhere in the middle of copied-and-pasted blocks. For example:</p>
<pre >strncmp(argv[argidx], "CAT=", 4) &amp;&amp;
strncmp(argv[argidx], "DECOY=", 6) &amp;&amp;
strncmp(argv[argidx], "THREADS=", 6) &amp;&amp;
strncmp(argv[argidx], "MINPROB=", 8)) {</pre>
<p>The length of the "THREADS=" string is 8 characters, not 6.</p>
<p>In other 43 cases, mistakes were found in the last copied code block.</p>
<p>Well, the number 43 looks just slightly bigger than 41. But keep in mind that there may be quite a lot of homogeneous blocks, so mistakes can be found in the first, second, fifth, or even tenth block. So we get a relatively smooth distribution of mistakes throughout blocks and a sharp peak at the end.</p>
<p>I accepted the number of homogeneous blocks to be 5 on the average.</p>
<p>So it appears that the first 4 blocks contain 41 mistakes distributed throughout them; that makes about 10 mistakes per block.</p>
<p>And 43 mistakes are left for the fifth block!</p>
<p>So what we get is the following pattern:</p>
<p><b>The probability of making a mistake in the last pasted block of code is 4 times higher than in any other block.</b></p>
<p>I don't draw any grand conclusions from that. It's just an interesting observation that may be useful to know about for practical reasons - you will stay alert when writing the last fragments of code.</p>
<h2>Examples</h2>
<p>Now I only have to convince the readers that it all is not my fancy, but a real tendency. To prove my words, I will show you some examples.</p>
<p>I won't cite all the examples, of course - only the simplest or most representative ones.</p>
<h3>Source Engine SDK</h3>
<pre >inline void Init( float ix=0, float iy=0,
                  float iz=0, float iw = 0 ) 
{
  SetX( ix );
  SetY( iy );
  SetZ( iz );
  SetZ( iw );
}</pre>
<p>The SetW() function should be called at the end.</p>
<h3>Chromium</h3>
<pre >if (access &amp; FILE_WRITE_ATTRIBUTES)
  output.append(ASCIIToUTF16("\tFILE_WRITE_ATTRIBUTES\n"));
if (access &amp; FILE_WRITE_DATA)
  output.append(ASCIIToUTF16("\tFILE_WRITE_DATA\n"));
if (access &amp; FILE_WRITE_EA)
  output.append(ASCIIToUTF16("\tFILE_WRITE_EA\n"));
if (access &amp; FILE_WRITE_EA)
  output.append(ASCIIToUTF16("\tFILE_WRITE_EA\n"));
break;</pre>
<p>The last block and the one before it are identical.</p>
<h3>ReactOS</h3>
<pre >if (*ScanString == L'\"' ||
    *ScanString == L'^' ||
    *ScanString == L'\"')</pre>
<h3>Multi Theft Auto</h3>
<pre >class CWaterPolySAInterface
{
public:
    WORD m_wVertexIDs[3];
};
CWaterPoly* CWaterManagerSA::CreateQuad (....)
{
  ....
  pInterface-&gt;m_wVertexIDs [ 0 ] = pV1-&gt;GetID ();
  pInterface-&gt;m_wVertexIDs [ 1 ] = pV2-&gt;GetID ();
  pInterface-&gt;m_wVertexIDs [ 2 ] = pV3-&gt;GetID ();
  pInterface-&gt;m_wVertexIDs [ 3 ] = pV4-&gt;GetID ();
  ....
}</pre>
<p>The last line was pasted mechanically and is redundant. There are only 3 items in the array.</p>
<h3>Source Engine SDK</h3>
<pre >intens.x=OrSIMD(AndSIMD(BackgroundColor.x,no_hit_mask),
                AndNotSIMD(no_hit_mask,intens.x));
intens.y=OrSIMD(AndSIMD(BackgroundColor.y,no_hit_mask),
                AndNotSIMD(no_hit_mask,intens.y));
intens.z=OrSIMD(AndSIMD(BackgroundColor.y,no_hit_mask),
                AndNotSIMD(no_hit_mask,intens.z));</pre>
<p>The programmer forgot to replace "BackgroundColor.y" with "BackgroundColor.z" in the last block. </p>
<h3>Trans-Proteomic Pipeline</h3>
<pre >void setPepMaxProb(....)
{  
  ....
  double max4 = 0.0;
  double max5 = 0.0;
  double max6 = 0.0;
  double max7 = 0.0;
  ....
  if ( pep3 ) { ... if ( use_joint_probs &amp;&amp; prob &gt; max3 ) ... }
  ....
  if ( pep4 ) { ... if ( use_joint_probs &amp;&amp; prob &gt; max4 ) ... }
  ....
  if ( pep5 ) { ... if ( use_joint_probs &amp;&amp; prob &gt; max5 ) ... }
  ....
  if ( pep6 ) { ... if ( use_joint_probs &amp;&amp; prob &gt; max6 ) ... }
  ....
  if ( pep7 ) { ... if ( use_joint_probs &amp;&amp; prob &gt; max6 ) ... }
  ....
}</pre>
<p>The programmer forgot to replace "prob &gt; max6" with "prob &gt; max7" in the last condition.</p>
<h3>SeqAn</h3>
<pre >inline typename Value&lt;Pipe&gt;::Type const &amp; operator*() {
  tmp.i1 = *in.in1;
  tmp.i2 = *in.in2;
  tmp.i3 = *in.in2;
  return tmp;
}</pre>
<h3>SlimDX</h3>
<pre >for( int i = 0; i &lt; 2; i++ )
{
  sliders[i] = joystate.rglSlider[i];
  asliders[i] = joystate.rglASlider[i];
  vsliders[i] = joystate.rglVSlider[i];
  fsliders[i] = joystate.rglVSlider[i];
}</pre>
<p>The rglFSlider array should have been used in the last line.</p>
<h3>Qt</h3>
<pre >if (repetition == QStringLiteral("repeat") ||
    repetition.isEmpty()) {
  pattern-&gt;patternRepeatX = true;
  pattern-&gt;patternRepeatY = true;
} else if (repetition == QStringLiteral("repeat-x")) {
  pattern-&gt;patternRepeatX = true;
} else if (repetition == QStringLiteral("repeat-y")) {
  pattern-&gt;patternRepeatY = true;
} else if (repetition == QStringLiteral("no-repeat")) {
  pattern-&gt;patternRepeatY = false;
  pattern-&gt;patternRepeatY = false;
} else {
  //TODO: exception: SYNTAX_ERR
}</pre>
<p>'patternRepeatX' is missing in the very last block. The correct code looks as follows:</p>
<pre >pattern-&gt;patternRepeatX = false;
pattern-&gt;patternRepeatY = false;</pre>
<h3>ReactOS</h3>
<pre >const int istride = sizeof(tmp[0]) / sizeof(tmp[0][0][0]);
const int jstride = sizeof(tmp[0][0]) / sizeof(tmp[0][0][0]);
const int mistride = sizeof(mag[0]) / sizeof(mag[0][0]);
const int mjstride = sizeof(mag[0][0]) / sizeof(mag[0][0]);</pre>
<p>The 'mjstride' variable will always be equal to one. The last line should have been written like this:</p>
<pre >const int mjstride = sizeof(mag[0][0]) / sizeof(mag[0][0][0]);</pre>
<h3>Mozilla Firefox</h3>
<pre >if (protocol.EqualsIgnoreCase("http") ||
    protocol.EqualsIgnoreCase("https") ||
    protocol.EqualsIgnoreCase("news") ||
    protocol.EqualsIgnoreCase("ftp") ||          &lt;&lt;&lt;---
    protocol.EqualsIgnoreCase("file") ||
    protocol.EqualsIgnoreCase("javascript") ||
    protocol.EqualsIgnoreCase("ftp")) {          &lt;&lt;&lt;---</pre>
<p>A suspicious string "ftp" at the end - it has already been compared to.</p>
<h3>Quake-III-Arena</h3>
<pre >if (fabs(dir[0]) &gt; test-&gt;radius ||
    fabs(dir[1]) &gt; test-&gt;radius ||
    fabs(dir[1]) &gt; test-&gt;radius)</pre>
<p>The value from the dir[2] cell is left unchecked.</p>
<h3>Clang</h3>
<pre >return (ContainerBegLine &lt;= ContaineeBegLine &amp;&amp;
        ContainerEndLine &gt;= ContaineeEndLine &amp;&amp;
        (ContainerBegLine != ContaineeBegLine ||
         SM.getExpansionColumnNumber(ContainerRBeg) &lt;=
         SM.getExpansionColumnNumber(ContaineeRBeg)) &amp;&amp;
        (ContainerEndLine != ContaineeEndLine ||
         SM.getExpansionColumnNumber(ContainerREnd) &gt;=
         SM.getExpansionColumnNumber(ContainerREnd)));</pre>
<p>At the very end of the block, the "SM.getExpansionColumnNumber(ContainerREnd)" expression is compared to itself.</p>
<h3>MongoDB</h3>
<pre >bool operator==(const MemberCfg&amp; r) const {
  ....
  return _id==r._id &amp;&amp; votes == r.votes &amp;&amp;
         h == r.h &amp;&amp; priority == r.priority &amp;&amp;
         arbiterOnly == r.arbiterOnly &amp;&amp;
         slaveDelay == r.slaveDelay &amp;&amp;
         hidden == r.hidden &amp;&amp;
         buildIndexes == buildIndexes;
}</pre>
<p>The programmer forgot about "r." in the last line.</p>
<h3>Unreal Engine 4</h3>
<pre >static bool PositionIsInside(....)
{
  return
    Position.X &gt;= Control.Center.X - BoxSize.X * 0.5f &amp;&amp;
    Position.X &lt;= Control.Center.X + BoxSize.X * 0.5f &amp;&amp;
    Position.Y &gt;= Control.Center.Y - BoxSize.Y * 0.5f &amp;&amp;
    Position.Y &gt;= Control.Center.Y - BoxSize.Y * 0.5f;
}</pre>
<p>The programmer forgot to make 2 edits in the last line. Firstly, "&gt;=" should be replaced with "&lt;=; secondly, minus should be replaced with plus.</p>
<h3>Qt</h3>
<pre >qreal x = ctx-&gt;callData-&gt;args[0].toNumber();
qreal y = ctx-&gt;callData-&gt;args[1].toNumber();
qreal w = ctx-&gt;callData-&gt;args[2].toNumber();
qreal h = ctx-&gt;callData-&gt;args[3].toNumber();
if (!qIsFinite(x) || !qIsFinite(y) ||
    !qIsFinite(w) || !qIsFinite(w))</pre>
<p>In the very last call of the function qIsFinite, the 'h' variable should have been used as an argument.</p>
<h3>OpenSSL</h3>
<pre >if (!strncmp(vstart, "ASCII", 5))
  arg-&gt;format = ASN1_GEN_FORMAT_ASCII;
else if (!strncmp(vstart, "UTF8", 4))
  arg-&gt;format = ASN1_GEN_FORMAT_UTF8;
else if (!strncmp(vstart, "HEX", 3))
  arg-&gt;format = ASN1_GEN_FORMAT_HEX;
else if (!strncmp(vstart, "BITLIST", 3))
  arg-&gt;format = ASN1_GEN_FORMAT_BITLIST;</pre>
<p>The length of the "BITLIST" string is 7, not 3 characters.</p>
<p>Let's stop here. I hope the examples I have demonstrated are more than enough.</p>
<h2>Conclusion</h2>
<p>From this article you have learned that with the Copy-Paste method making a mistake in the last pasted block of code is 4 times more probable than in any other fragment.</p>
<p>It has to do with the specifics of human psychology, not professional skills. I have shown you in this article that even highly-skilled developers of such projects as Clang or Qt tend to make mistakes of this kind.</p>
<p>I hope my observation will be useful for programmers and perhaps urge them to investigate our bug database. I believe it will help reveal many regularity patterns among errors and work out new recommendations for programmers.</p>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','Lz86b7Xj');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~40.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='Dj1Rko23')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgialz86b7xj.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgialz86b7xj'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
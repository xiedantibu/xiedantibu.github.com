<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/snywvcm9/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Improving type safety and security with  - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Improving type safety and security with </li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/kempofighter/default.htm" rel="author">kempofighter</a></b></div>
<div id="I_date">Mar 14, 2010 (last update: Jul 13, 2011)</div>
<h1>Improving type safety and security with sequence containers</h1>
<div id="I_score">Score: 3.2/5 (5 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<b>Organization</b>
<br>
Part 1) Passing arrays to functions<br>
<br>
Part 2) Returning arrays from functions<br>
<br>
If you have any trouble understanding any of the examples, consider reviewing the arrays and templates tutorials.  For the templates tutorial you only need to read the first section on function templates. <br>
<br>
<a href="../../doc/tutorial/arrays/default.htm">http://www.cplusplus.com/doc/tutorial/arrays/</a>
<br>
<a href="../../doc/tutorial/templates/default.htm">http://www.cplusplus.com/doc/tutorial/templates/</a>
<br>
<b>Terminology</b>
<br>
The use of the word array will immediately result in some confusion for a number of reasons.  <br>
<br>
1) Other languages have built in smart array types which do not work the same way as C/C++ arrays.  The term array is defined in numerous dictionaries and so there is a generalized concept of an array which leads to confusion when discussing specific kinds of array types that are defined by C++ or some other language.  <br>
<br>
2) The std::vector is described by the C++ standard as a sequence container but C++ programmers commonly refer to the std::vector as a dynamic array.  In fact any of the standard sequence containers that provide random access will fit into a more general definition of the term array.  <br>
<br>
For instance, consider these definitions:<br>
<u>dictionary.com</u>
 <br>
Computers. a block of related data elements, each of which is usually identified by one or more subscripts.	 <br>
<br>
<u>Merriam Webster</u>
 <br>
(1) : a number of mathematical elements arranged in rows and columns (2) : a data structure in which similar elements of data are arranged in a table b : a series of statistical data arranged in classes in order of magnitude	 <br>
<br>
When I use the term array I am talking about the more general definition of the concept that you would find in any dictionary. When referring to the "data structure" described by section 8.3.4 of the C++ std I will use the term C-Array.  The following example shows an example of a C-Array.  This type of a data structure existed in the C language and must be supported by C++ compilers.  I'll use numerous examples to explain why it is sometimes better to consider using one of the standard sequence containers.  <br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>const</var> <var>int</var> SIZE(5);
<var>int</var> data[SIZE];
std::generate(data, data + SIZE, rand);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>PART I - Passing arrays to functions</b>
<br>
<b>Compile and execute the program. </b>It contains a defect which will be evident when you analyze the output.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>

<var>void</var> printArray(<var>int</var> data[])
{
    <var>for</var>(<var>int</var> i = 0, length = <var>sizeof</var>(data); i &lt; length; ++i)
    {
        std::cout &lt;&lt; data[i] &lt;&lt; <kbd>' '</kbd>;
    }
    std::cout &lt;&lt; std::endl;
}

<var>int</var> main()
{
    <var>int</var> data[] = { 5, 7, 8, 9, 1, 2 };
    printArray(data);
    <var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>You will see that only the first 4 elements of the C-Array are printed.</b>  The call to sizeof(data) returns a value of 4!  That happens to be the size of the pointer used to pass the C-Array to printArray.  That has a couple of implications.  First, the array does not get copied.  The pointer to the first element of the array is copied.  C-Arrays do not have copy constructors, assignment operators, or functional interfaces.  In the following examples you will see examples using std::vector, std::deque, and std::list which are dynamic sequence containers provided by the C++ std template library.  This is not a full tutorial on those containers but they are used in order to show the flexibility in the proposed improvements to the flawed program.  <br>
<br>
Let's look at another example.  In it, I have created numerous printArray functions that are overloaded so that I can show a number of solutions.  I will then analyze each of those solutions and explain the pros and cons of each.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>
<dfn>#include &lt;list&gt;</dfn>

<cite>// Method 1: works but very little security.  It is impossible to validate</cite>
<cite>// the inputs since the size of data still cannot be validated. If length is too large</cite>
<cite>// undefined behavior will occur.</cite>
<var>void</var> printArray(<var>int</var> data[], <var>int</var> length)
{
    <var>for</var>(<var>int</var> i(0); i &lt; length; ++i)
    {
        std::cout &lt;&lt; data&lt;i&gt; &lt;&lt; <kbd>' '</kbd>;
    }
    std::cout &lt;&lt; std::endl;
}

<cite>// Method 2: Type safe and more generic.  Works with any container that supports forward iterators.</cite>
<cite>// Limitation - cannot validate iterators so caller could pass null or invalid pointers.  Typesafe - won't</cite>
<cite>// allow you to pass inconsistent iterator types.  Allows you to pass any valid range of a container.</cite>
<var>template</var> &lt;<var>class</var> ForwardIteratorType&gt; 
<var>void</var> printArray(ForwardIteratorType begin, ForwardIteratorType end)
{
    <var>while</var>(begin != end)
    {
        std::cout &lt;&lt; *begin &lt;&lt; <kbd>' '</kbd>;
        ++begin;
    }
    std::cout &lt;&lt; std::endl;
}

<cite>// Method 3 - This implementation is as typesafe and secure as you can get but</cite>
<cite>// does not allow a subrange since the entire container is expected.  It could</cite>
<cite>// be useful if you want that extra security and know that you want to operate</cite>
<cite>// on the entire container.</cite>
<var>template</var> &lt;<var>class</var> ContainerType&gt; 
<var>void</var> printArray(<var>const</var> ContainerType&amp; container)
{
    ContainerType::const_iterator current(container.begin()), end(container.end());
    <var>for</var>( ; 
        current != end; 
        ++current)
    {
        std::cout &lt;&lt; *current &lt;&lt; <kbd>' '</kbd>;
    }
    std::cout &lt;&lt; std::endl;
}

<var>int</var> main()
{
    <cite>// Method 1.</cite>
    <var>const</var> <var>int</var> LENGTH(6);
    <var>int</var> data[LENGTH] = { 5, 7, 8, 9, 1, 2 };
    printArray(data, LENGTH);

    <cite>// Method 2.</cite>
    printArray(data, data + LENGTH);
    std::vector&lt;<var>int</var>&gt; vData(data, data + LENGTH);
    printArray(vData.begin(), vData.end());
    std::list&lt;<var>int</var>&gt; lData(data, data + LENGTH);
    printArray(lData.begin(), lData.end());
    std::deque&lt;<var>int</var>&gt; dData(data, data + LENGTH);
    printArray(dData.begin(), dData.end());
    <cite>// won't compile if caller accidentally mixes iterator types.</cite>
    <cite>//printArray(dData.begin(), vData.end());</cite>

    <cite>// method 3.</cite>
    printArray(vData);
    printArray(dData);
    printArray(lData);
	<var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Method 2 is unique in that it allows you to specify any range of the array where method 1 and 2 accomplish the same goal of printing the entire container.  If that is what your intention was all along then I submit to you that method 3 is the best.  It is most secure and typesafe.  There is very little if any chance that a caller could specify invalid parameters.  An empty container would not cause any problem.  The function simply wouldn't print any values.  <br>
<br>
It is important to note that a C-Array cannot be passed using method 3.  Method 3 requires the use of a container such as the std::vector.  C-Arrays are a holdover from the C language and do not have functional interfaces.  Method 1 or 2 would need to be used if you are dealing with C-Arrays.  I'm sure that there are other ways as well but it is up to you to determine which method is best for your  project.  <br>
<br>
One could produce hundreds of example programs that demonstrate these points even further but I'll leave it up to the readers to copy the program and build other kinds of examples.  The beauty of templates is that it reduces repetitive programming tasks.  Define the function once so that the function can be called multiple times where each time you specify a different type.  It is simply a matter of making sure that the type supports the minimim requirements of the function.  The method 3 printArray function requires that the ContainerType has begin() and end() member functions that return forward iterators and that the objects within the container are instances of classes that support the operator&lt;&lt; function.  The operator&lt;&lt; can be defined for user defined types as well so method 3 is not limited to containers of built in types.<br>
<b>Part II – Returning arrays from functions</b>
<br>
What follows is an example containing two typical problems with returning arrays from functions.  For the record, I do not believe that returning arrays from a function is necessary.  It may seem natural to return the result of a function but it isn't necessary.  You can provide out parameters to a function using pointers or references.<br>
<br>
The following program produces this output using MS Visual Studio C++ express 2008.<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>13 8 9 10 11 12
-858993460 -858993460 -858993460 -858993460 -858993460 3537572
41 18467 6334 26500 19169 15724
41 18467 6334 26500 19169 15724</samp></pre></td></tr></table></div>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;algorithm&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>

<cite>// Prints out array elements. Method 2 from PART I.</cite>
<var>template</var> &lt;<var>class</var> ForwardIteratorType&gt; 
<var>void</var> printArray(ForwardIteratorType begin, ForwardIteratorType end)
{
    <var>while</var>(begin != end)
    {
        std::cout &lt;&lt; *begin &lt;&lt; <kbd>' '</kbd>;
        ++begin;
    }
    std::cout &lt;&lt; std::endl;
}

<cite>// This function is a poor design which will lead to undefined behavior when the caller</cite>
<cite>// tries to use the pointer that is returned.  data is allocated on the stack and destroyed</cite>
<cite>// after the function returns.  The pointer to the memory is returned but it is a dangling</cite>
<cite>// pointer to memory that has already been released.</cite>
{
    <var>int</var> data[6] = { 13, 8, 9, 10, 11, 12 };
    <var>int</var>* pointer = data;
    printArray(pointer, pointer + 6);
    <var>return</var> pointer;
}

<cite>// The *&amp; symbol means reference to a pointer so that modification of the array </cite>
<cite>// results in modification of lotteryNumbers back in main.  In this case the pointer</cite>
<cite>// updated back in main is valid but the caller has to remember to release the memory</cite>
<cite>// at some point.  Therefore this approach is error prone.</cite>
<var>void</var> generateArray(<var>int</var> *&amp;array, <var>int</var> length)
{
    <var>int</var>* pointer = <var>new</var> <var>int</var>[length];
    <cite>// std::generate requires the &lt;algorithm&gt; header</cite>
    std::generate(pointer, pointer + length, rand);
    printArray(pointer, pointer + length);
    array = pointer;
}

<var>int</var> main()
{
    <var>int</var>* lotteryNumbers = generateArray();
    printArray(lotteryNumbers, lotteryNumbers + 6);

    <var>const</var> <var>int</var> LENGTH(6);
    generateArray(lotteryNumbers, LENGTH);
    printArray(lotteryNumbers, lotteryNumbers + 6);
    <var>delete</var> lotteryNumbers;
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>The first call to printArray occurred within the version of generateArray that returns a value. </b> At that time the array named data was valid and had been allocated from stack memory since it was created local to the function.  Once generateArray returns the memory is returned to the stack and available for the program to reuse for some other purpose.  Therefore the pointer that is returned to main points to memory that can and will be overwritten and the second line of output is garbage.  The behavior is undefined.  There is no way to predict how a program like this will behave.  The output that I witnessed may not be the output that you see with another compiler and/or run-time environment.  <br>
<br>
There is another problem with that same version of generateArray.  The function can only return one value.  How does main know how big the array is, even if it was properly constructed using heap memory?  In this case the programmer who wrote both functions coded this assumption which is a bad design.<br>
<br>
<b>Notice that there is another version of generateArray that takes two parameters and has a void return type.  </b>The first argument is a reference to a pointer so that the lotteryNumbers pointer of main is modified .  The second argument is the length which I require the caller to supply.  Although the function can accomplish the task successfully is it the best approach?  In a complicated, large scale application memory leaks can cause serious problems and it may not be so easy to manage memory yourself.  <br>
<br>
<b>I think that we can do even better.  </b>One question that arises is why would you want a function that builds an array?  You can easily instantiate an array in place.  Let me create a function that reads console input, and fills an array for the user.  The below example allows the array to be constructed by a function without the caller having to worry about memory leaks or stack vs. heap memory allocations.  There are many ways to do this.  In this case I chose to allow the caller to pass an array of any size and the function will simply add to it.  It could start out empty but it doesn't have to.  The std::vector is managing the memory so when the main function exits it is destroyed without the programmer having to worry about garbage collection.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;vector&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;limits&gt;</dfn>

<cite>// Prints out array elements. Method 2 from PART I.</cite>
<var>template</var> &lt;<var>class</var> ForwardIteratorType&gt; 
<var>void</var> printArray(ForwardIteratorType begin, ForwardIteratorType end)
{
    <var>while</var>(begin != end)
    {
        std::cout &lt;&lt; *begin &lt;&lt; <kbd>' '</kbd>;
        ++begin;
    }
    std::cout &lt;&lt; std::endl;
}

<cite>// The caller must decide whether to pass an empty container.  This function will </cite>
<cite>// add to it.  </cite>
<var>void</var> readScores(std::vector&lt;<var>int</var>&gt;&amp; container)
{
    std::cout &lt;&lt; <kbd>"Type the list of scores followed by a non-numeric character and press enter when finished. "</kbd> 
              &lt;&lt; <kbd>"For instance (22 25 26 f &lt;enter&gt; "</kbd> &lt;&lt; std::endl;
    <var>int</var> temp(0);
    <var>while</var>(std::cin &gt;&gt; temp)
    {
        container.push_back(temp);
    }
    <cite>// clear and discard any leftover data from the input stream.</cite>
    std::cin.clear();
    std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), <kbd>'\n'</kbd>);
}

<var>int</var> main()
{
    std::vector&lt;<var>int</var>&gt; scores; <cite>// uninitialized.  Let readScores fill it.</cite>
    readScores(scores);
    printArray(scores.begin(), scores.end());
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
I chose not to make readScores a template function this time.  It doesn't have to be and I wanted to keep the example fairly simple.  It could be changed to be more generic.  Try it if you dare and see what happens when you run the program.  The point is that the function doesn't really need to build the array.  Building the array within the function and returning it is tricky.  You will either have to deal with garbage collection or return a std container by value which could result in unnecessary copy construction.  <br>
<br>
Unfortunately return by value means that at the very least you are probably going to have an assignment that would result in the caller's vector allocating memory to hold the copied data.  The best way is really to pass by reference with a void return as I did in the earlier example.  That example is more flexible as well since the caller can decide whether to add to an existing array or fill a new array.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code>std::vector&lt;<var>int</var>&gt; container readScores()
{
    std::vector&lt;<var>int</var>&gt; container;
    std::cout &lt;&lt; <kbd>"Type the list of scores followed by a non-numeric character and press enter when finished. "</kbd> 
              &lt;&lt; <kbd>"For instance (22 25 26 f &lt;enter&gt; "</kbd> &lt;&lt; std::endl;
    <var>int</var> temp(0);
    <var>while</var>(std::cin &gt;&gt; temp)
    {
        container.push_back(temp);
    }
    <cite>// clear and discard any leftover data from the input stream.</cite>
    std::cin.clear();
    std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), <kbd>'\n'</kbd>);
    
    <cite>// return by value. Container will be destroyed but data will be copied into callers vector instance which could result</cite>
    <cite>// in additional memory allocation.  </cite>
    <var>return</var> container;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
I'll finish by stating that there are other ways of accomplishing these kinds of programming tasks and I'd like to encourage anyone to post some examples using template functions of their own or boost libraries.  </div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','SNywvCM9');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~82.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='iGAq5Di1')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiasnywvcm9.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiasnywvcm9'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
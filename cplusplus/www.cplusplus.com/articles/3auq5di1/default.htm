<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/3auq5di1/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>stdiostream - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">stdiostream</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/duoas/default.htm" rel="author">Duoas</a></b></div>
<div id="I_date">Apr 14, 2010 (last update: Apr 22, 2010)</div>
<h1>stdiostream</h1>
<div id="I_score">Score: 4.2/5 (14 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<small>This code is being modified... It currently has a couple of bugs.</small>
<br>
Hey all, I just wanted to play around with this kind of stuff so I thought I'd share.<br>
<br>
This is a <b>stdiobuf</b> implementation of my own design.<br>
The purpose is to allow you to wrap a C stdio FILE* with a std::iostream.<br>
I make no claims as to correctness or efficiency. (But I think I did a pretty good job...)<br>
<br>
It is sometimes convenient to do this kind of thing and get the full power of C++ while interfacing with C. It won't prevent you from doing particularly stupid things with it though.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br></code></pre></td>
<td class="source"><pre><code><cite>// stdiostream.hpp</cite>
<cite>//</cite>
<cite>// Copyright (c) 2010 Michael Thomas Greer</cite>
<cite>// Distributed under the Boost Software License, Version 1.0</cite>
<cite>// (See &lt;a href="http://www.boost.org/LICENSE_1_0.txt"&gt;http://www.boost.org/LICENSE_1_0.txt&lt;/a&gt; )</cite>
<cite>//</cite>

<dfn>#pragma once</dfn>
<dfn>#ifndef DUTHOMHAS_STDIOSTREAM_HPP</dfn>
<dfn>#define DUTHOMHAS_STDIOSTREAM_HPP</dfn>

<dfn>#include &lt;cstdio&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;streambuf&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>namespace</var> duthomhas
  {

  <cite>/* /////////////////////////////////////////////////////////////////////////
    basic_stdiobuf
  ///////////////////////////////////////////////////////////////////////// */</cite>

  <var>template</var> &lt;
    <var>typename</var> CharType,
    <var>typename</var> CharTraits = std::char_traits &lt;CharType&gt;
    &gt;
  <var>class</var> basic_stdiobuf: <var>public</var> std::basic_streambuf &lt;CharType, CharTraits&gt;
    {
    <cite>//------------------------------------------------------------------------</cite>
    <var>public</var>:
    <cite>//------------------------------------------------------------------------</cite>
      <var>typedef</var> CharType                                char_type;
      <var>typedef</var> CharTraits                              traits_type;
      <var>typedef</var> <var>typename</var> traits_type::int_type          int_type;
      <var>typedef</var> <var>typename</var> traits_type::pos_type          pos_type;
      <var>typedef</var> <var>typename</var> traits_type::off_type          off_type;

      <var>typedef</var> basic_stdiobuf &lt;char_type, traits_type&gt; this_type;

      <cite>//......................................................................</cite>
      basic_stdiobuf( FILE* fp = NULL ):
        fp( fp )
        { }

      <cite>//......................................................................</cite>
<cite>//BUG 1: Hey! I never get called! (How is that?)</cite>
      ~basic_stdiobuf()
        {
        <var>this</var>-&gt;close();
        }

      <cite>//......................................................................</cite>
      <var>bool</var> is_open() <var>const</var> <var>throw</var>()
        {
        <var>return</var> fp != NULL;
        }

      <cite>//......................................................................</cite>
      this_type* open( <var>const</var> <var>char</var>* filename, std::ios_base::openmode mode )
        {
        <var>if</var> (is_open()) <var>return</var> NULL;

        <cite>// Figure out the open mode flags  . . . . . . . . . . . . . . . . . .</cite>
        std::string fmode;

        <var>bool</var> is_ate = mode &amp; std::ios_base::ate;
        <var>bool</var> is_bin = mode &amp; std::ios_base::binary;
        mode &amp;= ~(std::ios_base::ate | std::ios_base::binary);

        <dfn>#define _(flag) std::ios_base::flag</dfn>
        <var>if</var>      (mode == (         _(in)                    )) fmode = <kbd>"r"</kbd>;
        <var>else</var> <var>if</var> (mode == (                 _(out) &amp; _(trunc))) fmode = <kbd>"w"</kbd>;
        <var>else</var> <var>if</var> (mode == (_(app)         &amp; _(out)           )) fmode = <kbd>"a"</kbd>;
        <var>else</var> <var>if</var> (mode == (         _(in) &amp; _(out)           )) fmode = <kbd>"r+"</kbd>;
        <var>else</var> <var>if</var> (mode == (         _(in) &amp; _(out) &amp; _(trunc))) fmode = <kbd>"w+"</kbd>;
        <var>else</var> <var>if</var> (mode == (_(app) &amp; _(in) &amp; _(out)           )) fmode = <kbd>"a+"</kbd>;
        <cite>// I would prefer to throw an exception here,</cite>
        <cite>// but the standard only wants a NULL result.</cite>
        <var>else</var> <var>return</var> NULL;
        <dfn>#undef _</dfn>
        <var>if</var> (is_bin) fmode.insert( 1, 1, <kbd>'b'</kbd> );

        <cite>// Try opening the file  . . . . . . . . . . . . . . . . . . . . . . .</cite>
        fp = std::fopen( filename, fmode.c_str() );
        <var>if</var> (!fp) <var>return</var> NULL;

        <cite>// Reposition to EOF if wanted . . . . . . . . . . . . . . . . . . . .</cite>
        <var>if</var> (is_ate) std::fseek( fp, 0, SEEK_END );

        <var>return</var> <var>this</var>;
        }

      <cite>//......................................................................</cite>
      this_type* close()
        {
        <var>if</var> (fp)
          {
          std::fclose( fp );
          fp = NULL;
          }
        pushbacks.clear();
        <var>return</var> <var>this</var>;
        }

      <cite>//......................................................................</cite>
      FILE* stdiofile() <var>const</var>
        {
        <var>return</var> fp;
        }

    <cite>//------------------------------------------------------------------------</cite>
    <var>protected</var>:
    <cite>//------------------------------------------------------------------------</cite>

      <cite>//......................................................................</cite>
      <cite>// Get the CURRENT character without advancing the file pointer</cite>
      <var>virtual</var> int_type underflow()
        {
        <cite>// Return anything previously pushed-back</cite>
        <var>if</var> (pushbacks.size())
          <var>return</var> pushbacks.back();

        <cite>// Else do the right thing</cite>
        fpos_t pos;
        <var>if</var> (std::fgetpos( fp, &amp;pos ) != 0)
          <var>return</var> traits_type::eof();
          
        <var>int</var> c = std::fgetc( fp );
        std::fsetpos( fp, &amp;pos );

        <var>return</var> maybe_eof( c );
        }

      <cite>//......................................................................</cite>
      <cite>// Get the CURRENT character AND advance the file pointer</cite>
      <var>virtual</var> int_type uflow()
        {
        <cite>// Return anything previously pushed-back</cite>
        <var>if</var> (pushbacks.size())
          {
          int_type c = pushbacks.back();
          pushbacks.pop_back();
          <var>return</var> c;
          }

        <cite>// Else do the right thing</cite>
        <var>return</var> maybe_eof( std::fgetc( fp ) );
        }

      <cite>//......................................................................</cite>
      <var>virtual</var> int_type pbackfail( int_type c = traits_type::eof() )
        {
        <var>if</var> (!is_open())
          <var>return</var> traits_type::eof();

        <cite>// If the argument c is EOF and the file pointer is not at the</cite>
        <cite>// beginning of the character sequence, it is decremented by one.</cite>
        <var>if</var> (traits_type::eq_int_type( c, traits_type::eof() ))
          {
          pushbacks.clear();
          <var>return</var> std::fseek( fp, -1L, SEEK_CUR )
               ? traits_type::eof()
               : 0;
          }

        <cite>// Otherwise, make the argument the next value to be returned by</cite>
        <cite>// underflow() or uflow()</cite>
        pushbacks.push_back( c );
        <var>return</var> c;
        }

      <var>virtual</var> int_type overflow( int_type c = traits_type::eof() )
        {
        pushbacks.clear();

        <cite>// Do nothing</cite>
        <var>if</var> (traits_type::eq_int_type( c, traits_type::eof() ))
          <var>return</var> 0;

        <cite>// Else write a character</cite>
        <var>return</var> maybe_eof( std::fputc( c, fp ) );
        }

      <cite>//......................................................................</cite>
      <var>virtual</var> this_type* setbuf( <var>char</var>* s, std::streamsize n )
        {
        <var>return</var> std::setvbuf( fp, s, (s and n) ? _IOLBF : _IONBF, (size_t)n )
             ? NULL
             : <var>this</var>;
        }

      <cite>//......................................................................</cite>
      <var>virtual</var> pos_type seekoff(
        off_type                offset,
        std::ios_base::seekdir  direction,
        std::ios_base::openmode which = std::ios_base::in | std::ios_base::out
        ) {
        pushbacks.clear();
        <var>return</var> std::fseek( fp, offset,
          (direction == std::ios_base::beg) ? SEEK_SET :
          (direction == std::ios_base::cur) ? SEEK_CUR :
                                              SEEK_END
          ) ? (-1) : std::ftell( fp );
        }

      <cite>//......................................................................</cite>
      <var>virtual</var> pos_type seekpos(
        pos_type                position,
        std::ios_base::openmode which = std::ios_base::in | std::ios_base::out
        ) {
        pushbacks.clear();
        <var>return</var> std::fseek( fp, position, SEEK_SET )
             ? (-1)
             : std::ftell( fp );
        }

      <cite>//......................................................................</cite>
      <var>virtual</var> <var>int</var> sync()
        {
        pushbacks.clear();
        <var>return</var> std::fflush( fp )
             ? traits_type::eof()
             : 0;
        }

    <cite>//------------------------------------------------------------------------</cite>
    <var>private</var>:
    <cite>//------------------------------------------------------------------------</cite>
      FILE*                  fp;
      std::vector &lt;int_type&gt; pushbacks;  <cite>// we'll treat this like a stack</cite>

      <cite>//......................................................................</cite>
      <cite>// Utility function to make sure EOF gets translated to the proper value</cite>
      <var>inline</var> int_type maybe_eof( <var>int</var> value ) <var>const</var>
        {
        <var>return</var> (value == EOF) ? traits_type::eof() : value;
        }
    };


  <cite>/* /////////////////////////////////////////////////////////////////////////
    basic_stdiostream
  ///////////////////////////////////////////////////////////////////////// */</cite>

  <var>template</var> &lt;
    <var>typename</var> CharType,
    <var>typename</var> CharTraits = std::char_traits &lt;CharType&gt;
    &gt;
  <var>struct</var> basic_stdiostream: <var>public</var> std::basic_iostream &lt;CharType, CharTraits&gt;
    {
    <var>typedef</var> CharType                                      char_type;
    <var>typedef</var> CharTraits                                    traits_type;

    <var>typedef</var> basic_stdiobuf      &lt;char_type, traits_type&gt;  sbuf_type;
    <var>typedef</var> basic_stdiostream   &lt;char_type, traits_type&gt;  this_type;
    <var>typedef</var> std::basic_iostream &lt;char_type, traits_type&gt;  base_type;

    <cite>//......................................................................</cite>
    basic_stdiostream( FILE* fp = NULL ):
      base_type( <var>new</var> sbuf_type( fp ) )
      { }

    <cite>//......................................................................</cite>
    basic_stdiostream( <var>const</var> <var>char</var>* filename, std::ios_base::openmode mode ):
<cite>//BUG 2: Oops! This is a potential memory leak!</cite>
      base_type( (<var>new</var> sbuf_type)-&gt;open( filename, mode ) )
      { }

    <cite>//......................................................................</cite>
    <var>void</var> open(
      <var>const</var> <var>char</var>*             filename,
      std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out
      ) {
      sbuf_type* buf = <var>static_cast</var> &lt;sbuf_type*&gt; ( <var>this</var>-&gt;rdbuf() );
      <var>if</var> (!(buf-&gt;open( filename, mode )))
        <var>this</var>-&gt;setstate( std::ios_base::badbit );
      }

    <cite>//......................................................................</cite>
    <var>void</var> close()
      {
      sbuf_type* buf = <var>static_cast</var> &lt;sbuf_type*&gt; ( <var>this</var>-&gt;rdbuf() );
      buf-&gt;close();
      }
    };


  <cite>/* /////////////////////////////////////////////////////////////////////////
    Useful typedefs
  ///////////////////////////////////////////////////////////////////////// */</cite>

  <var>typedef</var> basic_stdiobuf    &lt;<var>char</var>&gt; stdiobuf;
  <var>typedef</var> basic_stdiostream &lt;<var>char</var>&gt; stdiostream;

  } <cite>// namespace duthomhas</cite>

<dfn>#endif</dfn>

<cite>// end stdiostream.hpp </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
You can also use it much like you use a normal <b>std</b>::<b>fstream</b>, except it works through a FILE*, of course...<br>
<br>
It is most convenient, however, if you have an open FILE* that you wish to perform some C++ manipulations on...<br>
<br>
All commentary and feedback welcome.<br>
<br>
--Michael<br>
Thanks! :-)<br>
<br>
<b>Uses</b>
Use it whenever you must use a FILE* but still want C++ super powers.<br>
Typical instances are when interfacing with a C library and when playing with <b>tmpfile</b>() and the like. For example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br></code></pre></td>
<td class="source"><pre><code><cite>// Play with a tmpfile()</cite>
<cite>//</cite>
<cite>// BTW, the tmpfile() function is not a very good choice on Windows. The following</cite>
<cite>// code may not work for you. (If it does it will probably stick the temporary in the root</cite>
<cite>// directory of the current drive, so make sure you have access permissions for it first.)</cite>
<cite>//</cite>
<dfn>#include &lt;cstdlib&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;limits&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<dfn>#include "stdiostream.hpp"</dfn>

<var>using</var> <var>namespace</var> std;
<var>using</var> <var>namespace</var> duthomhas;

<var>int</var> main()
  {

  <cite>// Open a temporary file to play with</cite>
  stdiostream tf( tmpfile() );
  <var>if</var> (!tf)
    {
    cerr &lt;&lt; <kbd>"Fooey!\n"</kbd>;
    <var>return</var> 1;
    }

  <cite>// Write some stuff to it...</cite>
  tf &lt;&lt; <kbd>"3."</kbd>;
  tf &lt;&lt; <kbd>"141592\n"</kbd>;
  tf &lt;&lt; <kbd>"Hello "</kbd>;
  tf &lt;&lt; <kbd>"world!\n"</kbd>;

  <cite>// rewind</cite>
  tf.seekg( 0, ios::beg );

  <cite>// Get the stuff we wrote..</cite>
  <var>double</var> pi;
  tf &gt;&gt; pi;
  tf.ignore( numeric_limits &lt;streamsize&gt; ::max(), <kbd>'\n'</kbd> );

  string greeting;
  getline( tf, greeting );

  <cite>// Show whether suceessful:</cite>
  cout &lt;&lt; greeting &lt;&lt; endl;
  cout &lt;&lt; <kbd>"pi = "</kbd> &lt;&lt; pi &lt;&lt; endl;

  <cite>// Play with the user</cite>
  cout &lt;&lt; <kbd>"\nNow is the time to check that the temporary file actually exists.\n"</kbd>
          <kbd>"Press ENTER once done.\n"</kbd>;
  cin.ignore( numeric_limits &lt;streamsize&gt; ::max(), <kbd>'\n'</kbd> );

  <cite>// All done.</cite>
  cout &lt;&lt; <kbd>"\nOK, now it should be gone...\n"</kbd>;
  <var>return</var> 0;
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<b>Other Issues</b>
An unresolved issue is whether the destructor should endeavor to automatically close the file or not, or whether this should be a flaggable option.<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','3AUq5Di1');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~72.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='i8vCpfjN')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia3auq5di1.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia3auq5di1'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/ehvu7k9e/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>C++11 - New features - Variadic template - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">C++11 - New features - Variadic template</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/henri_korpela/default.htm" rel="author">Henri Korpela</a></b></div>
<div id="I_date">May 3, 2012 (last update: May 31, 2012)</div>
<h1>C++11 - New features - Variadic templates</h1>
<div id="I_score">Score: 3.5/5 (148 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<H3><B>Introduction:</B></H3>
Before the possibilities of the new <I>C++ language standard</I>, <B>C++11</B>, the use of <I>templates</I> was quite limited when it came to implementing for instance <I>function objects (functors)</I> & <I>tuple facilities</I>. Implementing these sort of things using earlier C++ standard often require similiar code to be repeated various times without forgetting <I>preprocessor metaprogramming</I>. However, thanks to <B>variadic templates</B>, programming new features using <I>templates</I> has become <I>easier</I>, <I>clearer</I> & more <I>memory-efficient</I>.<br>
<br>
Although <B>the D programming language</B> also provides the use of <I>variadic templates</I>, only variadic templates offered by C++11 standard will be covered here, so knowledge of D programming language's variadic templates is not required in order to read & understand this article. There are assumptions, however, that the reader of this article understands what class & function templates are & how to declare, define & use them.<br>
<H3><IMG SRC="img_qmark.gif" alt="No image found."> <B>What is a variadic template?</B></H3>
<B>Variadic template</B> is a template, which can take an arbitrary number of template arguments of any type. Both the classes & functions can be variadic. Here's a variadic class template:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var>... Arguments&gt;
<var>class</var> VariadicTemplate;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Any of the following ways to create an instance of this class template is valid:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>VariadicTemplate&lt;<var>double</var>, <var>float</var>&gt; instance;
VariadicTemplate&lt;<var>bool</var>, <var>unsigned</var> <var>short</var> <var>int</var>, <var>long</var>&gt; instance;
VariadicTemplate&lt;<var>char</var>, std::vector&lt;<var>int</var>&gt;, std::string, std::string, std::vector&lt;<var>long</var> <var>long</var>&gt;&gt; instance;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The number of variadic template arguments can also be zero, so the following<br>
<br>
<span class="auto"><code class="source">VariadicTemplate&lt;&gt; instance;</code></span>
<br>
<br>
is also valid C++11.<br>
<br>
However, if you create a template like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var> T, <var>typename</var>... Arguments&gt;
<var>class</var> VariadicTemplate;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
You must set at least one type as a template argument (<I>for typename T</I>), unless default type has been initilialized, like in the following declaration:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var> T = <var>int</var>, <var>typename</var>... Arguments&gt;
<var>class</var> VariadicTemplate;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<H3><IMG SRC="img_op.gif" alt="No image found."> <B>Syntax - the ellipsis operator (...):</B></H3>
<B>The ellipsis operator</B> (...) is <I>an operator</I> used in different contexts in C++. It's name comes from an <I>ellipsis mechanism</I> in <B>C</B>. In this mechanism programmer can create a function taking variable number of parameters. Probably the most famous function in both C & C++ to take advantage of this mechanism is <B>printf</B>-function in <I>C standard library</I>:<br>
<br>
<span class="auto"><code class="source"><var>int</var> printf (<var>const</var> <var>char</var>* format, ... );</code></span>
<br>
<br>
Ellipsis mechanism can also be used with <I>preprocessor</I> in a form of a <I>macro</I>. A macro taking a variable number of parameters is called <I>a variadic macro</I>.<br>
<br>
<span class="auto"><code class="source"><dfn>#define VARIADIC_MACRO(...) </dfn></code></span>
<br>
<br>
In <B>C++</B>, this <I>ellipsis operator</I> got a new meaning in different context called <I>exception handling</I>. The operator is used in <I>catch blocks</I> after <I>try blocks</I>:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code><var>try</var>{
    <cite>// Try block.</cite>
}
<var>catch</var>(...){
    <cite>// Catch block.</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Here, <I>the ellipsis operator</I> indicates that the <I>catch block</I> takes in any exception thrown from the <I>try block</I> as it's parameter, no matter the type.<br>
<br>
In C++11, <B>variadic templates</B> brought yet another meaning for this operator. The operator works somewhat like in ellipsis mechanism as already stated, but it's bit more complex:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var>... Arguments&gt;
<var>void</var> SampleFunction(Arguments... parameters);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Here's a function template. The contents of the variadic template arguments are called <I>parameter packs</I>. These packs will then be unpacked inside the function parameters. For example, if you create a function call to the previous variadic function template...<br>
<br>
<span class="auto"><code class="source">SampleFunction&lt;<var>int</var>, <var>int</var>&gt;(16, 24);</code></span>
<br>
<br>
...an equivalent function template would be like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var> T, <var>typename</var> U&gt;
<var>void</var> SampleFunction(T param1, U param2);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<H3><IMG SRC="img_op.gif" alt="No image found."> <B>Syntax - the sizeof... operator (sizeof...):</B></H3>
Another operator used with variadic templates is <I>the <B>sizeof...</B>-operator</I>. Unlike the <B>sizeof</B> operator, which can be used to determine the size of a type (<I>for example sizeof(int) or sizeof(double)</I>), <B>sizeof...</B> operator can be used to determine the amount of types given into a variadic template. This can be achieved like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var>... Arguments&gt;
<var>class</var> VariadicTemplate{
<var>private</var>:
    <var>static</var> <var>const</var> <var>unsigned</var> <var>short</var> <var>int</var> size = <var>sizeof</var>...(Arguments);
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<H3><IMG SRC="img_op.gif" alt="No image found."> <B>Syntax - two ellipsis operators together (......):</B></H3>
In some circumstances, there can be two ellipsis operators put together <I>(......)</I>. These two operators can also be separated <I>(written as ... ...)</I>.<br>
<br>
Probably the most clear way, however, is to separate these two operators with a comma <I>(..., ...)</I>. Both ways with a comma or without a comma are acceptable.<br>
<br>
This kind of syntax can appear with variadic function templates using ellipsis mechanism:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var>... Arguments&gt;
<var>void</var> SampleFunction(Arguments......){

}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
As already stated, these two ellipsis operator put together can be written differently, so the following examples<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var>... Arguments&gt;
<var>void</var> SampleFunction(Arguments... ...){

}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var>... Arguments&gt;
<var>void</var> SampleFunction(Arguments..., ...){

}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
work as well.<br>
<br>
<FIELDSET><IMG SRC="img_warn.gif" alt="No image found."> <B>Author's opinions & thoughts:</B>
For the sake of readability, use the last method to mark the two following ellipsis operators. The previous alternatives may be found confusing and/or cumbersome. Some may find it a matter of taste, though.</FIELDSET>
<H3><IMG SRC="img_tri.gif" alt="No image found."> <B>Uses of variadic templates - inheritance & initialization lists:</B></H3>
When it comes to classes, variadic templates can be used with <I>inheritance</I> & <I>initialization lists.</I> Inheritance taking advantage of variadic templates can be accomplished like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var>... BaseClasses&gt;
<var>class</var> VariadicTemplate : <var>public</var> BaseClasses...</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And, if we want to create a constructor inside this class using initialization list to call the constructors of all the given base classes as template arguments, we'd have to do it this way:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var>... BaseClasses&gt;
<var>class</var> VariadicTemplate : <var>public</var> BaseClasses...{
<var>public</var>:
    VariadicTemplate(BaseClasses&amp;&amp;... base_classes) : BaseClasses(base_classes)...{

    }
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
As you can see there's a new operator introduced in C++11 in the constructor's parameter list - <I>an rvalue operator (&&)</I>, which allows <I>rvalue references</I>. This article is not intended to cover the use of this operator, but for information how to use this operator (<I>& rvalue references in general</I>), please follow this link:<br>
<A HREF="../../../thbecker.net/articles/rvalue_references/section_01.html">http://thbecker.net/articles/rvalue_references/section_01.html</A>
<H3><IMG SRC="img_tri.gif" alt="No image found."> <B>Uses of variadic templates - variadic class template specialization:</B></H3>
Like class templates, variadic class templates can also be specialized. With templates, the specialization happens like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var> T&gt;
<var>class</var> Template{
<var>public</var>:
    <var>void</var> SampleFunction(T param){

    }
};

<var>template</var>&lt;&gt;
<var>class</var> Template&lt;<var>int</var>&gt;{
<var>public</var>:
    <var>void</var> SampleFunction(<var>int</var> param){

    }
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
But with variadic templates it's like the following:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>typename</var>... Arguments&gt;
<var>class</var> VariadicTemplate{
<var>public</var>:
    <var>void</var> SampleFunction(Arguments... params){

    }
};

<var>template</var>&lt;&gt;
<var>class</var> VariadicTemplate&lt;<var>double</var>, <var>int</var>, <var>long</var>&gt;{
<var>public</var>:
    <var>void</var> SampleFunction(<var>double</var> param1, <var>int</var> param2, <var>long</var> param3){

    }
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<FIELDSET><IMG SRC="img_warn.gif" alt="No image found."> <B>Caution:</B>
Some compilers may not support variadic class template specialization yet, or their implementation may be somewhat incomplete.</FIELDSET>
<H3><IMG SRC="img_see_also.gif" alt="No image found."> <B>See also:</B></H3>
If you are interested in seeing a C++11 standard class template utilizing variadic templates, please take a look at already mentioned <B>tuple</B> from the link below:<br>
<A HREF="../../reference/tuple/tuple/default.htm">http://www.cplusplus.com/reference/std/tuple/tuple/</A>
<br>
<br>
Another field where variadic templates may come in handy is <I>delegates</I>. If you are already familiar with <B>managed C++</B> and/or <B>C#</B>, picking up C++ delegates may not be a problem. You might find good use for them  in C++ anyway.<br>
<br>
<H3><IMG SRC="img_lamp.gif" alt="No image found."> <B>Conclusion:</B></H3>
Templates have been a powerful feature in C++. Now, after the introduction of variadic templates, templates have proven themselves even more powerful. Variadic templates are a trustworthy solution to implement delegates and tuples. And, instead of C-style ellipsis mechanism, variadic templates can offer a typesafer solution to replace them.<br>
<H3><B>More information - compiler support:</B></H3>
If you are unfamiliar or simply unaware of your compiler's feature support, please visit this link:<br>
<A HREF="../../../wiki.apache.org/stdcxx/c0xcompilersupport">http://wiki.apache.org/stdcxx/C++0xCompilerSupport</A>
<H3><B>Special thanks to:</B></H3>
- God<br>
- all the helpful sources <I>(please see below)</I>
<H3><B>Sources:</B></H3>
<B>Text sources:</B>
<br>
<A HREF="../../../digitalmars.com/d/1.0/variadic-function-templates.html">http://digitalmars.com/d/1.0/variadic-function-templates.html</A>
<br>
<A HREF="../../../en.wikipedia.org/wiki/variadic_template">http://en.wikipedia.org/wiki/Variadic_template</A>
<br>
<A HREF="../../../gcc.gnu.org/onlinedocs/cpp/variadic-macros.html">http://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html</A>
<br>
<A HREF="../../../linuxprograms.wordpress.com/2008/03/07/c-ellipsis-operator-printf/default.htm">http://linuxprograms.wordpress.com/2008/03/07/c-ellipsis-operator-printf/</A>
<br>
<A HREF="../../../stackoverflow.com/questions/5625600/what-is-the-meaning-of-token/5625782#5625782">http://stackoverflow.com/questions/5625600/what-is-the-meaning-of-token/5625782#5625782</A>
<br>
<A HREF="../../../stackoverflow.com/questions/7767202/template-specialization-with-variadic-templates">http://stackoverflow.com/questions/7767202/template-specialization-with-variadic-templates</A>
<br>
<A  HREF="../../doc/tutorial/exceptions/default.htm">http://www.cplusplus.com/doc/tutorial/exceptions/</A>
<br>
<A HREF="../../../www.devx.com/cplus/article/41533">http://www.devx.com/cplus/Article/41533</A>
<br>
<A HREF="../../../www.fredosaurus.com/notes-cpp/expressions/sizeof.html">http://www.fredosaurus.com/notes-cpp/expressions/sizeof.html</A>
<br>
<A HREF="../../../www.generic-programming.org/~dgregor/cpp/variadic-templates.html">http://www.generic-programming.org/~dgregor/cpp/variadic-templates.html</A></div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','EhvU7k9E');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~59.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='z30RX9L8')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaehvu7k9e.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaehvu7k9e'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/swtbqmol/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Learn design patterns from real projects - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Learn design patterns from real projects</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/issaml/default.htm" rel="author">issaml</a></b></div>
<div id="I_date">Oct 30, 2012 (last update: Oct 30, 2012)</div>
<h1>Learn design patterns from real projects: RigsOfRods case study.</h1>
<div id="I_score">Score: 3.3/5 (97 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
The majority of developers have already heard about design patterns, <a href="../../../en.wikipedia.org/wiki/design_patterns">GOF(Gang Of Four)</a> patterns are the most popularized, and each developer has his way to learn them , we can enumerate:<br>
<br>
<ul>
<li>Reading a book or a magazine.</li>
<li>From web sites.</li>
<li>From a collegue.</li>
<li>Doing a training.</li>
</ul>
<br>
Regardless of the method choosed, we can learn by heart the patterns and spent hours to memorize their UML diagrams, but sometimes when we need to use them in a real project, it becomes more problematic.<br>
<br>
What's very important is not to know exacly pattern names and how to implement them as described in the documentation, but what's more relevant is the motivitations behind each pattern, because it's from motivations that we invent the patterns.<br>
<br>
And to master better pattern motivations, the interesting way is to study them from a real project. it's the goal of this article , we will try to discover an open source project using them heavily.<br>
<br>
<h3>Analysis of Rigs of Rods</h3>
<br>
<a href="../../../www.rigsofrods.com/content/default.htm">Rigs of Rods ("RoR")</a> is an open source multi-simulation game which uses soft-body physics to simulate the motion and deformation of vehicles. The game is built using a specific soft-body physics engine called Beam, which simulates a network of interconnected nodes (forming the chassis and the wheels) and gives the ability to simulate deformable objects. With this engine, vehicles and their loads flex and deform as stresses are applied. Crashing into walls or terrain can permanently deform a vehicle.<br>
<br>
Here we go to dicover some GOF design patterns used, for that we used CppDepend to analyse RoR, and CQLinq will be helpful  to request the code base.<br>
<br>
<h3>Singleton</h3>
<br>
The singleton is the most popular and the most used one. RoR uses generic singleton to avoid repeating the same code for each singleton class, and define two variants: a singleton that create the instance , and another where the instance is assigned.<br>
<br>
<IMG SRC="ror7.png" alt="">
<br>
Let's search for all RoR singletons using the following CQLinq query.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>from t in Types where t.DeriveFrom(<kbd>"RoRSingletonNoCreation"</kbd>) || t.DeriveFrom(<kbd>"RoRSingleton"</kbd>)
select t</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<img src="ror21.png" alt="">
<br>
<em>Motivation:</em>
<br>
Let's take the example of InputEngine singleton, RoR needs to store information about keyboard, mouse, and  joyticks, which are detected in the initialisation by the InputEngine class, all classes needs the same data of the input devices, and no need to create more than one instance, so the primary motivation is to "<strong>Create one instance of InputEngine class</strong>".<br>
<br>
To acheive that we can declare it as global variable or define it as singleton, however  using singleton became controversial, and not all architects and designers recommend it, here's an <a href="../../../code.google.com/p/google-singleton-detector/wiki/whysingletonsarecontroversial">article </a> talking about the singleton controversy.<br>
<br>
<h3>Factory Method</h3>
<br>
There is no mistery about factories, their goal is simple: <strong>Create instances</strong>, and a simple factory containing a CreateInstance method could achieve this goal, however RoR use "Factory Method" pattern for all its factories instead of using a simple factory.<br>
<br>
<img src="ror5.png" alt="">
<br>
<em>Motivation:</em>
<br>
To understand better this pattern let's describe the  scenario where RoR use this pattern:<br>
<br>
- RoR use the graphics engine <a href="../../../www.ogre3d.org/default.htm">OGRE</a>, and some classes of OGRE needs to instantiate ParticleEmitter class.<br>
- RoR defines and uses another class BoxEmitter that inherits from ParticleEmitter, and wants that OGRE uses this new class as ParticleEmitter.<br>
- OGRE doesn't know anything about RoR.<br>
 <br>
The question is how OGRE will know how to instantiate this new class BowEmitter from RoR and use it?<br>
<br>
Here come the role of "Factory Method" pattern:<br>
<br>
OGRE has an abstract class ParticleEmitterFactory who has the CreateEmitter method, and to acheive his job , OGRE needs to a concrete factory, RoR defines a new factory BoxEmitterFactory inheriting from ParticleEmitterFactory  and overloads CreateEmitter method.<br>
<br>
RoR gives to OGRE this factory using ParticleSystemManager::addEmitterFactory (ParticleEmitterFactory * factory). And each time OGRE needs an instance of ParticleEmitter, the BoxEmitterFactory  is invoked to create it.<br>
<br>
The most important motivation is the <strong>low coupling</strong>, indeed OGRE doesnt know anything about RoR and it can instatiate classes from it.<br>
<br>
Using a simple factory is interesting to isolate the logic instantiation , but using "Factory Method" is more suitable to enforce low coupling.<br>
<br>
<h3>Template Method</h3>
<br>
Template method defines the skeleton of Algorithm in a method, differing some steps to subclasses. Template method lets subclasses redefine some steps of an algorithm without changing the algorithm's structure.<br>
<br>
The objective is to ensure that algorithm's structure stays unchanged, while subclasses provide some part of implementation.<br>
<br>
Let's use CQLinq to detect all classes using template method pattern, For that we can search for methods in a parent class where it use a pure virtual methods, and has subclassses implementing these virtual classes.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>from t in Types where t.IsAbstract &amp;&amp; 
t.Methods.Where(a=&gt; a.NbLinesOfCode&gt;0 &amp;&amp; a.MethodsCalled.Where(b=&gt;b.IsPureVirtual &amp;&amp; b.ParentType==t).Count()&gt;0).Count()&gt;0 
select t</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<img src="ror3.png" alt="">
<br>
<br>
<em>Motivation:</em>
<br>
Let's take as example IRCWrapper, the method process implement template method pattern, it invoke the pure virtual method processIRCEvent.<br>
<br>
<img src="ror15.png" alt="">
<br>
LobbyGui is a class that needs to process IRC events,it inherits from IRCWrapper, the logic of processing IRC events received is centralized in the IRCWrapper::process, however for each event received the lobbygui must treat it, for that reason, the process method invoke processIRCEvent which is overloaded by the LobbyGui class.<br>
<br>
With this pattern, we can easilly change the implementation of algorithms without changing the skelton, it enforce <strong>low coupling</strong>, because the client could reference only the abstract class instead of concrete ones. <br>
<br>
<h3>Strategy</h3>
<br>
There are common situations when classes differ only in their behavior. For this cases is a good idea to isolate the algorithms in separate classes in order to have the ability to select different algorithms at runtime. <br>
<br>
Let's use CQLinq to detect all classes using strategy pattern, For this purpose we can search for abstract classes, having multiple derived classes, and where the client reference abstract class instead of concrete implementations.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code>from t in Types where t.IsAbstract &amp;&amp; t.DirectDerivedTypes.Count()&gt;1 &amp;&amp; !t.IsThirdParty
let tt=t.DirectDerivedTypes
from db in tt where db.Methods.Where(a=&gt;a.NbMethodsCallingMe!=0 &amp;&amp; !a.IsStatic).Count()==0
select <var>new</var> {db,t}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<img src="ror4.png" alt="">
<br>
<em>Motivation:</em>
<br>
The camera could have multiple behaviors: fixed, free, static or isometric, and this behavior could be changed dynamically. and other behaviors could be added in the future.<br>
<br>
The CameraManager use the behavior abstraction IBehavior, here's all CameraManger methods using IBehavior class.  <br>
<br>
<img src="ror17.png" alt="">
<br>
As we can observe, there is a method named switchBehavior to change the behavior dynamically.<br>
<br>
This pattern enforce <strong>low coupling</strong>, CameraManger doesnt know the concrete behaviors, and also enfore <strong>high cohesion</strong>, because each specific behavior is implemented in a isolated class.<br>
<br>
<h3>State</h3>
<br>
State pattern is similar to the Strategy Design Pattern from an architectural point of view, and for this reason for the previous CQLinq request when we searched for strategy pattern, we found also state classes.<br>
<br>
But the goal is different, the Strategy pattern represents an algorithm that uses one or more IStrategy implementations.and there's no correlation between these different behavior, however for State pattern we pass from one state to another to acheive the final objective, so there's a cohesion between the different states. <br>
<br>
Here's all state classes inheriting from the abstract class AppState<br>
<br>
<img src="ror18.png" alt="">
<br>
Like Strategy pattern, only the abstract class is reference by other classes, here's all methods using AppState.<br>
<br>
<img src="ror19.png"  alt="">
<br>
As we can observe, AppStateManager contains many methods to manage the state lifecycle.<br>
<br>
<em>Motivation:</em>
<br>
Like Strategy patern, this pattern enforce <strong>low coupling</strong>, AppStateManger doesnt know the concrete states, and also enforce <strong>high cohesion</strong>, because each  traitement is isolated in it's corresponding state.<br>
<br>
<br>
<h3>Facade</h3>
<br>
A facade is an object that provides a simplified interface to a larger body of code, such as a class library. And to detected facades used the simple way is to search for external code used.<br>
<br>
Here's all namespaces used by ROR project:<br>
<br>
<img src="ror12.png" alt="">
<br>
let's take as example the Caelum and search for classes using it from ROR<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>from m in Methods where m.IsUsing (<kbd>"Caelum"</kbd>)
select <var>new</var> { m }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<img src="ror9.png" alt="">
<br>
Only SkyManager use directly Caelum namespace, so it represent the Caelum facade.<br>
<br>
What about OIS namespace:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>from m in Methods where m.IsUsing (<kbd>"OIS"</kbd>)
select <var>new</var> { m }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<img src="ror10.png" alt="">
<br>
mainly InputManager use OIS namespace.<br>
<br>
<em>Motivation</em>
<br>
If we use an external library and this highly coupled with our code, ie many classes use directly this library, it will be very difficult to change the external library, however if a facade is used, only its implementation will be changed if we want to change the external library.<br>
<br>
So this pattern enforce low coupling with external libraries.<br>
<br>
<h3>Domain Driven Design approach</h3>
<br>
The Domain Driven Design that is a software design approach, based on the two premises:<br>
<br>
-That complex domain designs should be based on a model, and<br>
-That for most software projects, the primary focus should be on the domain and domain logic (as opposed to the particular technology used to implement the system).<br>
<br>
In other words the heart of the DDD is Model and the first thing to do when starting development is drawing the model. Model and design you create should shape each other. Model should represent knowledge of the business.<br>
<br>
RoR use this approch and isolate all data into structures, and to check that, let's search for all ROR structures:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>from t in Types where t.IsStructure &amp;&amp; 
t.Methods.Where(a=&gt;!a.IsGeneratedByCompiler).Count()==0 
select t</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The treemap view show us all the code impacted by this query, the blue rectangles represent the result of the CQLinq query<br>
<br>
<img src="ror13.png" alt="">
<br>
<h3>Conclusion</h3>
<br>
Using design patterns has many advantages, but without understanding their motivations is very difficult to implement them, and as we discovered in this article motivations like low coupling and high cohesion are present in almost all design patterns, for this reason it's recommended to discover also patterns focused more on motivations like <a href="../../../en.wikipedia.org/wiki/grasp_%28object-oriented_design%29">GRASP </a>to complete our understanding of GOF.</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','SwTbqMoL');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~101.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='j35jE3v7')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaswtbqmol'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaswtbqmol'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
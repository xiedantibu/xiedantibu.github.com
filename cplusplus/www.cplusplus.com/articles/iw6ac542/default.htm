<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/iw6ac542/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Keep the console open long enough to see - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Keep the console open long enough to see</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/duoas/default.htm" rel="author">Duoas</a></b></div>
<div id="I_date">Jan 28, 2009 (last update: Jan 31, 2009)</div>
<h1>Keep the console open long enough to see your program's output</h1>
<div id="I_score">Score: 4.1/5 (58 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<blockquote><tt>Press any key to continue . . .</tt></blockquote>
This is typically a problem on Windows, caused by really dumb IDEs that don't know enough to keep the console open after the program finishes. However, it does strike right at one of the main philosophical problems with <i>the way you are thinking about programming</i>. After all, a console program should be run from the <i>console</i> --else once it terminates, the console <i>should</i> disappear. We'll get to fixing that later. For now, we'll stick with the immediate problem.<br>
<br>
<br>
<div class="center"><blockquote><b> - - - - - - - - - - - - - - - - The Simple Answer - - - - - - - - - - - - - - - - </b></blockquote></div>
While simple, it really is a <b>Bad Thing</b>. See <b>Why system() is evil</b> for more.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifdef __cplusplus__</dfn>
  <dfn>#include &lt;cstdlib&gt;</dfn>
<dfn>#else</dfn>
  <dfn>#include &lt;stdlib.h&gt;</dfn>
<dfn>#endif</dfn>

system(<kbd>"PAUSE"</kbd>);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
It is also Windows-only. To do the same thing in Linux, you'd need to use the <b>read</b> shell command<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>
system(<kbd>"read -p \"Press a key to continue...\" -n 1 -s"</kbd>);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<div class="center"><blockquote><b> - - - - - - - - - - - - - - - - The Standard Way - - - - - - - - - - - - - - - - </b></blockquote></div>
The most correct way to do it is something like:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;limits&gt;</dfn>

<var>void</var> PressEnterToContinue()
  {
  std::cout &lt;&lt; <kbd>"Press ENTER to continue... "</kbd> &lt;&lt; flush;
  std::cin.ignore( std::numeric_limits &lt;std::streamsize&gt; ::max(), <kbd>'\n'</kbd> );
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdio.h&gt;</dfn>

<var>void</var> PressEnterToContinue()
  {
  <var>int</var> c;
  printf( <kbd>"Press ENTER to continue... "</kbd> );
  fflush( stdout );
  <var>do</var> c = getchar(); <var>while</var> ((c != <kbd>'\n'</kbd>) &amp;&amp; (c != EOF));
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Thereafter, simply place a call to it at the end of your program:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdio.h&gt;</dfn>

<var>int</var> main()
  {
  puts( <kbd>"Hello world!"</kbd> );
  PressEnterToContinue();
  <var>return</var> 0;
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The main problem with this approach is that <i><b>it only works when input is properly synchronized</b></i>. If it isn't, you will need to <b>Flush Stdin</b>. Learn more about proper synchronization with <b>Issues When Reading User Input</b>.<br>
<br>
Also, it requires the user to press the <tt>Enter</tt> key to continue. This isn't such a bad problem as you might think. The mythical <tt>Any</tt> key has befuddled a lot of people. (A better phrase would have been "Press a key to continue..." --at worst people will press the <tt>A</tt> key.) Remember, <i>non-programmers</i> are almost always your target audience. And even if they aren't, what you are thinking isn't often as obvious as you think. Make sure to give clear instructions to the user about what kind of input your program wants next.<br>
<br>
<br>
<div class="center"><blockquote><b> - - - - - - - - - - - - - - - - Using NCurses - - - - - - - - - - - - - - - - </b></blockquote></div>
The Curses library is designed for working with the console. Advantages: it is cross-platform. Disadvantages: it doesn't interact well with the standard streams. In other words, you shouldn't mix <b>printf</b>(), etc or <b>cout</b>, etc with curses. Use one or the other, not both.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;curses.h&gt;</dfn>

<var>int</var> main()
  {
  initscr();

  addstr( <kbd>"Hello world!\n\n"</kbd> );

  addstr( <kbd>"\nPress a key to continue..."</kbd> );
  cbreak();    <cite>/* turn off line-buffering */</cite>
  noecho();    <cite>/* turn off character echo */</cite>

  getch();     <cite>/* read and discard a single character (caveats!) */</cite>

  echo();      <cite>/* turn echo back on */</cite>
  nocbreak();  <cite>/* turn line-buffering back on */</cite>

  endwin();
  <var>return</var> 0;
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
There are some other things you must be aware of when using [<b>w</b>]<b>getch</b>(). Make sure you read through <b>Getting Started with Curses</b>.<br>
<br>
So if all you want to do is pause your program once or twice then using Curses is overkill.<br>
<br>
<br>
<div class="center"><blockquote><b> - - - - - - - - - - - - - - - - Using &lt;conio.h&gt; - - - - - - - - - - - - - - - - </b></blockquote></div>
Well, first some code.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;conio.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>

<var>void</var> PressAKeyToContinue()
  {
  <var>int</var> c;
  printf( <kbd>"\nPress a key to continue..."</kbd> );
  c = getch();
  <var>if</var> (c == 0 || c == 224) getch();
  }

<var>int</var> main()
  {
  puts( <kbd>"Hello world!"</kbd> );
  PressAKeyToContinue();
  <var>return</var> 0;
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
This library is severely deprecated, but it is so popular that some form of it exists on most 80x86 hardware compilers --almost always on Windows compilers, and there exist Linux versions too. However, given the choice, use <b>NCurses</b> instead...<br>
<br>
The caveat is that it is <i>non-standard</i>, meaning that the actual functions it provides vary a lot and they don't always behave just right. (Microsoft invented it years ago. That's right, <i>not</i> Borland --though Borland is [in]famous for it).<br>
<br>
Hence, for anything other than Windows programs it is also a sub-optimal solution. See <b>Using &lt;conio.h&gt;</b> for more.<br>
<br>
<div class="center"><blockquote><b> - - - - - - - - - - - - - - - - OS-specific ways - - - - - - - - - - - - - - - - </b></blockquote></div>
To do it any better, you need to do something OS-specific. Part of the design philosophy behind C and particularly C++ is something to the effect that the OS doesn't exist (or if it does, it is a magical black box). So to do something special with the console (C and C++ don't know what a console is, remember) means you will have to write code that is special to your operating system.<br>
<br>
Here is a function that really lets you press any key, and returns the key that was pressed. Windows provides some nice, simple functions for playing with the console. It takes a little more magic on Linux, but it is just about as easy.<br>
<br>
<tt>    </tt> <b>Windows</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br></code></pre></td>
<td class="source"><pre><code><cite>/* ---------------------------------------------------------------------------
 * PressAnyKey()
 * ---------------------------------------------------------------------------
 * Copyright 2008 Michael Thomas Greer
 * &lt;a href="http://www.boost.org/LICENSE_1_0.txt"&gt;http://www.boost.org/LICENSE_1_0.txt&lt;/a&gt;
 *
 * function
 *   Optionally print a message and and wait for the user to press (and
 *   release) a single key.
 *
 * arguments
 *   The message to print. If NULL, uses a default message. Specify the empty
 *   string "" to not print anything.
 *
 * returns
 *   The virtual keycode for the key that was pressed.
 *
 *   Windows #defines virtual keycode values like
 *     VK_UP
 *     VK_DOWN
 *     VK_RIGHT
 *     VK_LEFT
 *   which you can use to identify special keys.
 *
 *   Letter keys are simply the upper-case ASCII value for that letter.
 */</cite>
<dfn>#include &lt;windows.h&gt;</dfn>

<var>int</var> PressAnyKey( <var>const</var> <var>char</var> *prompt )
  {
  DWORD        mode;
  HANDLE       hstdin;
  INPUT_RECORD inrec;
  DWORD        count;
  <var>char</var>         default_prompt[] = <kbd>"Press a key to continue..."</kbd>;

  <cite>/* Set the console mode to no-echo, raw input, */</cite>
  <cite>/* and no window or mouse events.              */</cite>
  hstdin = GetStdHandle( STD_INPUT_HANDLE );
  <var>if</var> (hstdin == INVALID_HANDLE_VALUE
  || !GetConsoleMode( hstdin, &amp;mode )
  || !SetConsoleMode( hstdin, 0 ))
    <var>return</var> 0;

  <var>if</var> (!prompt) prompt = default_prompt;

  <cite>/* Instruct the user */</cite>
  WriteConsole(
    GetStdHandle( STD_OUTPUT_HANDLE ),
    prompt,
    lstrlen( prompt ),
    &amp;count,
    NULL
    );

  FlushConsoleInputBuffer( hstdin );

  <cite>/* Get a single key RELEASE */</cite>
  <var>do</var> ReadConsoleInput( hstdin, &amp;inrec, 1, &amp;count );
  <var>while</var> ((inrec.EventType != KEY_EVENT) || inrec.Event.KeyEvent.bKeyDown);

  <cite>/* Restore the original console mode */</cite>
  SetConsoleMode( hstdin, mode );

  <var>return</var> inrec.Event.KeyEvent.wVirtualKeyCode;
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<tt>    </tt> <b>POSIX (Unix, Linux, Mac OSX, etc)</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br></code></pre></td>
<td class="source"><pre><code><cite>/* ---------------------------------------------------------------------------
 * PressAnyKey()
 * ---------------------------------------------------------------------------
 * Copyright 2008 Michael Thomas Greer
 * &lt;a href="http://www.boost.org/LICENSE_1_0.txt"&gt;http://www.boost.org/LICENSE_1_0.txt&lt;/a&gt;
 *
 * function
 *   Optionally print a message and and wait for the user to press (and
 *   release) a single key.
 *
 * arguments
 *   The message to print. If NULL, uses a default message. Specify the empty
 *   string "" to not print anything.
 *
 * returns
 *   The keycode for the key that was pressed.
 *
 *   Extended key codes (like arrow keys) are properly handled, but their
 *   keycode is not understood; they are simply returned as the last code in
 *   the sequence, negated. For example, it is likely that the arrow keys are:
 *
 *     UP_ARROW    = -'A' = -65
 *     DOWN_ARROW  = -'B' = -66
 *     RIGHT_ARROW = -'C' = -67
 *     LEFT_ARROW  = -'D' = -68
 *
 *   Exactly identifying the values for these keys requires a foray into the
 *   terminfo database, which is a subject for later. For now we'll leave it
 *   at this.
 */</cite>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;unistd.h&gt;</dfn>
<dfn>#include &lt;termios.h&gt;</dfn>

<var>int</var> PressAnyKey( <var>const</var> <var>char</var>* prompt )
  {
  <dfn>#define MAGIC_MAX_CHARS 18</dfn>
  <var>struct</var> termios initial_settings;
  <var>struct</var> termios settings;
  <var>unsigned</var> <var>char</var>  keycodes[ MAGIC_MAX_CHARS ];
  <var>int</var>            count;

  tcgetattr( STDIN_FILENO, &amp;initial_settings );
  settings = initial_settings;

  <cite>/* Set the console mode to no-echo, raw input. */</cite>
  <cite>/* The exact meaning of all this jazz will be discussed later. */</cite>
  settings.c_cc[ VTIME ] = 1;
  settings.c_cc[ VMIN  ] = MAGIC_MAX_CHARS;
  settings.c_iflag &amp;= ~(IXOFF);
  settings.c_lflag &amp;= ~(ECHO | ICANON);
  tcsetattr( STDIN_FILENO, TCSANOW, &amp;settings );

  printf( <kbd>"%s"</kbd>, prompt ? prompt : <kbd>"Press a key to continue..."</kbd> );
  count = read( stdin, (<var>void</var>*)keycodes, MAGIC_MAX_CHARS );

  tcsetattr( STDIN_FILENO, TCSANOW, &amp;initial_settings );

  <var>return</var> (count == 1)
       ? keycodes[ 0 ]
       : -(<var>int</var>)(keycodes[ count -1 ]);
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
If you are using C++, you can add some convenience this way:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><dfn>#if defined(__cplusplus)</dfn>
  <dfn>#include &lt;string&gt;</dfn>
  <var>inline</var> <var>int</var> PressAnyKey( <var>const</var> std::string&amp; prompt = <kbd>"Press a key to continue..."</kbd> )
    {
    <var>return</var> PressAnyKey( prompt.c_str() );
    }
<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Well, that's enough of that. To learn more about unbuffered (AKA "raw") input, take a gander at <b>Read a single key for input</b>.<br>
<br>
Well, that's enough for now.</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','iw6AC542');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~81.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='i8vCpfjN')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaiw6ac542.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaiw6ac542'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
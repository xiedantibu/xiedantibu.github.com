<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/z8hv0pdg/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Searching And Sorting - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Searching And Sorting</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/jason9/default.htm" rel="author">jason9</a></b></div>
<div id="I_date">Apr 13, 2011</div>
<h1>Searching And Sorting</h1>
<div id="I_score">Score: 3.8/5 (121 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
I couldn't really find a good example of the various searching and sorting algorithms out there so i figured i would post one i did for an assignment.<br>
<br>
The number of comparisons done may not be done quite right but it definitely gives you the idea of which ones are more efficient. <br>
<br>
main.cpp<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include "SearchAndSort.h"</dfn>

<var>using</var> <var>namespace</var> std;

<var>void</var> main()
{
	<cite>//initilizes the varibles to store the number of comparisons</cite>
	<var>int</var> linearSearchComp=0;
	<var>int</var> binarySearchComp=0;
	<var>int</var> insertionSortComp=0;
	<var>int</var> selectionSortComp=0;
	<var>int</var> bubbleSortComp=0;
	<var>int</var> mergeSortComp=0;

	<var>for</var>(<var>int</var> i = 0; i &lt; 50; i++) <cite>//runs 50 instances of the various sorting and seraching methods on data</cite>
	{
		SearchAndSort arr;
		cout &lt;&lt; <kbd>"Initial Conditions"</kbd> &lt;&lt; endl;
		arr.print();

		cout &lt;&lt; endl &lt;&lt; <kbd>"After Linear Search"</kbd> &lt;&lt; endl;
		linearSearchComp = linearSearchComp + arr.linearSearch(50);
		arr.print();

		cout &lt;&lt; endl &lt;&lt; <kbd>"After Binary Search"</kbd> &lt;&lt; endl;
		binarySearchComp = binarySearchComp + arr.binarySearch(50);
		arr.print();

		cout &lt;&lt; endl &lt;&lt; <kbd>"After Insertion Sort"</kbd> &lt;&lt; endl;
		insertionSortComp = insertionSortComp + arr.insertionSort();
		arr.print();

		cout &lt;&lt; endl &lt;&lt; <kbd>"After Selection Sort"</kbd> &lt;&lt; endl;
		selectionSortComp = selectionSortComp + arr.selectionSort();
		arr.print();
		
		cout &lt;&lt; endl &lt;&lt; <kbd>"After Bubble Sort"</kbd> &lt;&lt; endl;
		bubbleSortComp = bubbleSortComp + arr.bubbleSort();
		arr.print();

		cout &lt;&lt; endl &lt;&lt; <kbd>"After Merge Sort"</kbd> &lt;&lt; endl;
		mergeSortComp = mergeSortComp + arr.mergeSort();
		arr.print();
	}

	<cite>//detemines the average amount of comparisons for that are used for each searching and sorting algorithms</cite>
	linearSearchComp = linearSearchComp / 50;
	binarySearchComp = binarySearchComp / 50;
	insertionSortComp = insertionSortComp / 50;
	selectionSortComp = selectionSortComp / 50;
	bubbleSortComp = bubbleSortComp / 50;
	mergeSortComp = mergeSortComp / 50;

	<cite>//outputs the averge number of comparisons performed for each searching and sorting algorithms</cite>
	cout &lt;&lt; <kbd>"Average Number of Comparisons for Linear Search "</kbd> &lt;&lt; linearSearchComp &lt;&lt; endl;
	cout &lt;&lt; <kbd>"Average Number of Comparisons for Binary Search "</kbd> &lt;&lt; binarySearchComp &lt;&lt; endl;
	cout &lt;&lt; <kbd>"Average Number of Comparisons for Insertion Sort "</kbd> &lt;&lt; insertionSortComp &lt;&lt; endl;
	cout &lt;&lt; <kbd>"Average Number of Comparisons for Selection Sort "</kbd> &lt;&lt; selectionSortComp &lt;&lt; endl;
	cout &lt;&lt; <kbd>"Average Number of Comparisons for Bubble Sort "</kbd> &lt;&lt; bubbleSortComp &lt;&lt; endl;
	cout &lt;&lt; <kbd>"Average Number of Comparisons for Merge Sort "</kbd> &lt;&lt; mergeSortComp &lt;&lt; endl;

	system(<kbd>"pause"</kbd>);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
SearchAndSort.h<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef SEARCH_AND_SORT_H</dfn>
<dfn>#define SEARCH_AND_SORT_H</dfn>

<var>class</var> SearchAndSort
{
<var>public</var>:
	SearchAndSort();
	<var>void</var> prepareArr();
	<var>void</var> copyArr();
	<var>void</var> print();
	<var>int</var> linearSearch(<var>int</var>); <cite>//takes in key for search and returns number of comparisons</cite>
	<var>int</var> binarySearch(<var>int</var>); <cite>//takes in key for search and returns number of comparisons</cite>
	<var>int</var> insertionSort(); <cite>//returns number of comparisons</cite>
	<var>int</var> selectionSort(); <cite>//returns number of comparisons</cite>
	<var>int</var> bubbleSort(); <cite>//returns number of comparisons</cite>
	<var>int</var> mergeSort(); <cite>//returns number of comparisons</cite>

<var>private</var>:
	<var>static</var> <var>const</var> <var>int</var> size = 100;
	<var>int</var> initialArr[size];
	<var>int</var> sortResult[size];
	<var>int</var> searchResult;
	<var>int</var> mergeSortReccur(<var>int</var>,<var>int</var>); <cite>//recursive funtion used for merge sort</cite>
	<var>int</var> merge(<var>int</var>,<var>int</var>,<var>int</var>,<var>int</var>); <cite>//utility function for the merge sort that merges two sub arrays</cite>
};

<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
SearchAndSort.cpp<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "SearchAndSort.h"</dfn>

<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdlib.h&gt;</dfn>
<dfn>#include &lt;ctime&gt;</dfn>

<var>using</var> <var>namespace</var> std;

SearchAndSort::SearchAndSort()
{
	prepareArr();
	copyArr();
}

<var>void</var> SearchAndSort::prepareArr() <cite>//fill an array with 100 elements with random values from 0 to 100</cite>
{
	srand(time(0)); <cite>//time is used as the random seed</cite>
	<var>for</var>(<var>int</var> i = 0; i &lt;= size-1;  i++)
	{
		initialArr&lt;i&gt; = rand() % 101; <cite>//assigns random number in array</cite>
	}
}

<var>void</var> SearchAndSort::copyArr() <cite>//copies the values stored in initial array to the sorted result array</cite>
{
	<var>for</var>(<var>int</var> i = 0; i &lt;= size-1;  i++)
	{
		sortResult&lt;i&gt; = initialArr&lt;i&gt;; <cite>//copies element by element</cite>
	}
}

<var>void</var> SearchAndSort::print() <cite>//outputs the initial array, sorted result array, and search result</cite>
{
	cout &lt;&lt; <kbd>"Initial Array"</kbd> &lt;&lt; endl;
	<var>for</var>(<var>int</var> i = 0; i &lt;= size-1;  i++)
	{
		cout &lt;&lt; initialArr&lt;i&gt; &lt;&lt; <kbd>" "</kbd>;
	}
	cout &lt;&lt; endl;

	cout &lt;&lt; <kbd>"Sorted Result Array"</kbd> &lt;&lt; endl;
	<var>for</var>(<var>int</var> i = 0; i &lt;= size-1;  i++)
	{
		cout &lt;&lt; sortResult&lt;i&gt; &lt;&lt; <kbd>" "</kbd>;
	}
	cout &lt;&lt; endl;

	cout &lt;&lt; <kbd>"Search Result"</kbd> &lt;&lt; endl;
	cout &lt;&lt; searchResult &lt;&lt; endl;
}

<var>int</var> SearchAndSort::linearSearch(<var>int</var> key)
{
	copyArr();
	<var>int</var> comparisons = 0;
	searchResult = -1;
	<var>for</var>(<var>int</var> i = 0; i &lt;= size-1; i++) <cite>//cycles through each element in the array</cite>
	{
		comparisons++;
		<var>if</var>(key == initialArr&lt;i&gt;) <cite>//if the value in array matches key then position is stored</cite>
		{
			searchResult = i;
			<var>break</var>; <cite>//breaks once values is found in array</cite>
		}
	}
	<var>return</var> comparisons;
}

<var>int</var> SearchAndSort::binarySearch(<var>int</var> key)
{
	mergeSort(); <cite>//binary search requires that the array be sorted before search</cite>
	<var>int</var> low = 0;
	<var>int</var> high = size -1;
	<var>int</var> mid = (low + high + 1) / 2;
	<var>int</var> loc = -1;
	<var>int</var> comparisons = 0;

	<var>do</var>{
		<var>if</var>(key == sortResult[mid]) <cite>//checks to see if the middle value is equal to the key</cite>
		{
			loc = mid; <cite>//if so the location is set to middle position</cite>
			comparisons++;
		}
		<var>else</var> <var>if</var>(key &gt; sortResult[mid]) <cite>//if key is greater than the mid point then the key value must be in the first half of the array if it exists at all</cite>
		{
			high = mid - 1; <cite>//make the new right bound of array to the left of the midpoint</cite>
			comparisons++;
		}
		<var>else</var> <cite>//if key is less than the mid point then the key value must be in the second half of the array if it exists at all</cite>
		{
			low = mid + 1; <cite>//make the new left bound of the array to the right of the midpoint</cite>
			comparisons++;
		}

		mid = (low + high + 1) / 2; <cite>// the new bid is determined from the new high and low</cite>
	}<var>while</var>((low &lt;= high) &amp;&amp; (loc == -1)); <cite>//runs as long the key has not been found and low does not become greater than high</cite>
	
	searchResult = loc;

	<var>return</var> comparisons;
}

<var>int</var> SearchAndSort::insertionSort()
{
	copyArr();

	<var>int</var> j, insert = 0, comparisons = 0;
	<var>for</var>(<var>int</var> i = 1; i &lt;= size-1; i++)
	{
		comparisons++;
		insert = sortResult&lt;i&gt;;
		<var>for</var>( j = i - 1; (j &gt;= 0) &amp;&amp; (sortResult[j] &lt; insert); j--) <cite>//smaller values move up in the array </cite>
		{
			comparisons++;
			sortResult[j+1] = sortResult[j];
		}
		sortResult[j+1] = insert; <cite>//put the inserted value in the its the right place to be sorted</cite>
	}
	<var>return</var> comparisons;
}

<var>int</var> SearchAndSort::selectionSort()
{
	copyArr();

	<var>int</var> comparisons = 0;
	<var>int</var> first;

	<var>for</var>(<var>int</var> i = size-1; i &gt; 0; i--)
	{
		comparisons++;
		first = 0;
		<var>for</var>(<var>int</var> j = 1; j &lt;= i; j++) <cite>//locates smallest between 1 and i</cite>
		{
			comparisons++;
			<var>if</var>(sortResult[j] &lt; sortResult[first])
			{
				first = j;
				comparisons++;
			}
		}
		<var>int</var> temp = sortResult[first]; <cite>//swaps the smallest with the element in position i</cite>
		sortResult[first] = sortResult&lt;i&gt;;
		sortResult&lt;i&gt; = temp;
	}
	<var>return</var> comparisons;
}


<var>int</var> SearchAndSort::bubbleSort()
{
	copyArr();
	<var>int</var> comparisons = 0;
	<var>for</var>(<var>int</var> i = 0; i &lt; size-1; i++)
	{
		comparisons++;
		<var>for</var>(<var>int</var> j = 0; j &lt; size-1; j++)
		{
			comparisons++;
			<var>if</var>(sortResult[j+1] &gt; sortResult[j]) <cite>//if next element is greater than the current element then swap elements</cite>
			{
				comparisons++;
				<var>int</var> temp = sortResult[j]; <cite>//swaps the elements</cite>
				sortResult[j] = sortResult[j+1];
				sortResult[j+1] = temp;
			}
		}
	}
	<var>return</var> comparisons;
}

<var>int</var> SearchAndSort::mergeSort()
{
	copyArr();
	<var>return</var> mergeSortReccur(0,size-1);  <cite>//calls the merge sort recursive function and returns the number of comparisons</cite>
}

<var>int</var> SearchAndSort::mergeSortReccur(<var>int</var> low, <var>int</var> high)
{
	<var>int</var> comparisons = 0;
	<var>int</var> mid = 0;
	<var>if</var>((high - low) &gt;= 1)
	{
		comparisons++;
		mid = ((low + high) / 2); 
		mergeSortReccur(low, mid); <cite>//runs recursive function with first half of array</cite>
		mergeSortReccur(mid+1, high); <cite>//runs recursive function with second half of the array</cite>
		comparisons = comparisons + merge(low, mid, mid+1, high); <cite>//call the merge and totals the number of comparisons</cite>
	}
	<var>return</var> comparisons;
}

<var>int</var> SearchAndSort::merge(<var>int</var> left, <var>int</var> mid1, <var>int</var> mid2, <var>int</var> right) <cite>//merges two sub arrays</cite>
{
	<var>int</var> leftIndex = left;
	<var>int</var> rightIndex = mid2;
	<var>int</var> combinedIndex = left;
	<var>int</var> combined[size];
	<var>int</var> comparisons = 0;

	<var>while</var>(leftIndex &lt;= mid1 &amp;&amp; rightIndex &lt;= right) <cite>//merge arrays until the end of the either array</cite>
	{
		comparisons++;
		<cite>//places larger of the two current elements into the resulting combined array</cite>
		<var>if</var>(sortResult[leftIndex] &gt;= sortResult[rightIndex])
		{
			comparisons++;
			combined[combinedIndex++] = sortResult[leftIndex++];
		}<var>else</var>
		{
			comparisons++;
			combined[combinedIndex++] = sortResult[rightIndex++];
		}
	}

	<var>if</var>(leftIndex == mid2) <cite>//if the left array is at end</cite>
	{
		comparisons++;
		<var>while</var>(rightIndex &lt;= right) <cite>//copy the remaining elements in the right array</cite>
		{
			comparisons++;
			combined[combinedIndex++] = sortResult[rightIndex++];
		}
	}<var>else</var> <cite>//if the right array is at end </cite>
	{
		comparisons++;
		<var>while</var>(leftIndex &lt;= mid1) <cite>//copy the remaing elements in the left array</cite>
		{
			comparisons++;
			combined[combinedIndex++] = sortResult[leftIndex++];
		}
	}

	<cite>//copies values back in the original result array</cite>
	<var>for</var>(<var>int</var> i = left; i &lt;= right; i++)
		sortResult&lt;i&gt; = combined&lt;i&gt;;

	<var>return</var> comparisons;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','z8hv0pDG');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~116.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='y74wvCM9')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaz8hv0pdg'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaz8hv0pdg'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/2z86b7xj/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>StdAfx.h for Novices - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">StdAfx.h for Novices</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/andreykarpov/default.htm" rel="author">AndreyKarpov</a></b></div>
<div id="I_date">Jun 25, 2014 (last update: Jun 26, 2014)</div>
<h1>StdAfx.h for Novices</h1>
<div id="I_score">Score: 4.4/5 (21 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<p>This article is meant for those programmers who are only getting started with the Visual Studio environment and trying to compile their C++ projects under it. Everything looks strange and complicated in an unfamiliar environment, and novices are especially irritated by the stdafx.h file that causes strange errors during compilation. Pretty often it all ends in them diligently turning off all precompiled headers in every project. We wrote this article to help Visual Studio newcomers to figure it all out.</p>
<h2>The purpose of precompiled headers</h2>
<p>Precompiled headers are intended to speed up project builds. When getting started with Visual C++, programmers usually try it on very small projects that cannot show the performance gain from using precompiled headers. Both with and without them, the program seems to take the same time to compile. This is just what confuses the user: he doesn't see any use in this option and concludes that it is needed for some specific tasks and he will never need it. This delusion may last for years.</p>
<p>Precompiled headers are actually a very useful technology. You can notice the benefit even with a project of just a few dozens of files. Using such heavy libraries as boost makes the performance gain especially evident.</p>
<p>If you examine the *.cpp files in your project, you will notice that many of them include the same sets of headers, for example &lt;vector&gt;, &lt;string&gt;, &lt;algorithm&gt;. These headers, in their turn, include other headers, and so on.</p>
<p>All this results in the compiler's preprocessor doing the same work again and again - it must read the same files many times, insert them into each other, process #ifdef and expand macros. Because of that, the same operations are repeated a huge number of times.</p>
<p>The amount of work the preprocessor has to do during project compilation can be greatly reduced. The idea is to <a href="../../../www.viva64.com/en/t/0040/default.htm">preprocess</a> a group of files in advance and then simply insert already prepared text fragments where necessary.</p>
<p>It actually includes a few more steps: instead of simple text you can store more highly processed information. I don't know how exactly it all is implemented in Visual C++, but I know that, for instance, you can store text already split into lexemes. It will speed up the compilation process even more.</p>
<h2>How precompiled headers work</h2>
<p>A file containing precompiled headers has the ".pch" extension. The file name usually coincides with the project name, but you can naturally change this and any other used names in the settings. The *.pch file may be pretty large, which depends on how many headers are expanded in it. In PVS-Studio, for example, it occupies about 3 Mbytes.</p>
<p>The *.pch file is created as a result of the stdafx.cpp file's compilation. This file is built with the "/Yc" switch that is used specifically to tell the compiler to create precompiled headers. The stdafx.cpp file can contain one line: #include "stdafx.h".</p>
<p>The most interesting stuff is stored in the "stdafx.h" file. All the header files to be precompiled should be included into it. For example, below is the stdafx.h file we use in PVS-Studio (the text is abridged for the article):</p>	<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "VivaCore/VivaPortSupport.h"</dfn>
<cite>//For /Wall</cite>
<dfn>#pragma warning(push)</dfn>
<dfn>#pragma warning(disable : 4820)</dfn>
<dfn>#pragma warning(disable : 4619)</dfn>
<dfn>#pragma warning(disable : 4548)</dfn>
<dfn>#pragma warning(disable : 4668)</dfn>
<dfn>#pragma warning(disable : 4365)</dfn>
<dfn>#pragma warning(disable : 4710)</dfn>
<dfn>#pragma warning(disable : 4371)</dfn>
<dfn>#pragma warning(disable : 4826)</dfn>
<dfn>#pragma warning(disable : 4061)</dfn>
<dfn>#pragma warning(disable : 4640)</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>
<dfn>#include &lt;list&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>
<dfn>#include &lt;memory&gt;</dfn>
<dfn>#pragma warning(pop) </dfn><cite>//For /Wall </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<p>The "#pragma warning" directives are necessary to get rid of warnings generated on standard libraries.</p>
<p>Now the "stdafx.h" file should be included into all the *.c/*.cpp files. You should also remove from these files all the headers already included into "stdafx.h".</p>
<p>But what to do when different files use somewhat similar but still different sets of headers? For example:</p>
<ul>
  <li>File A: &lt;vector&gt;, &lt;string&gt;</li>
  <li>File B: &lt;vector&gt;, &lt;algorithm&gt;</li>
  <li>File C: &lt;string&gt;, &lt;algorithm&gt;</li>
</ul>
<p>Should you create individual precompiled headers? Well, you can do that but you don't need to.</p>
<p>You only need to create one precompiled header where &lt;vector&gt;, &lt;string&gt; and &lt;algorithm&gt; will be expanded. The benefit of the preprocessor not having to read numbers of files and insert them into each other overweighs the losses on syntax analysis of additional code fragments.</p>
<h2>How to use precompiled headers</h2>
<p>When starting a new project, Visual Studio's Wizard creates two files: stdafx.h and stdafx.cpp. It is through them that the mechanism of precompiled headers is implemented.</p>
<p>These files can actually have any other names; it's not the name that matters but the compilation parameters you specify in the project settings.</p>
<p>A *.c/*.cpp file can only use one precompiled header. However, one project may contain a few different precompiled headers. Suppose we have only one for now.</p>
<p>So if you have used the Wizard, the files stdafx.h and stdafx.cpp are already created for you, and all the necessary compilation switches are also defined.</p>
<p>If you didn't use the precompiled headers option in your project, let's find out how to enable it. I suggest the following algorithm:</p>
<ol>
  <li>Enable precompiled headers in all configurations for all *.cpp files. It can be done on the "Precompiled Header" tab:<ol>
      <li>Set the value "Use (/Yu)" for the "Precompiled Header" option.</li>
      <li>Set "stdafx.h" for the "Precompiled Header File" option.</li>
      <li>Set "$(IntDir)$(TargetName).pch" for the "Precompiled Header Output File" option.</li>
    </ol>
  </li>
  <li>Create an stdafx.h file and add it into the project. We will include those headers we want to be preprocessed in advance into this file.</li>
  <li>Create an stdafx.cpp file and add it into the project. This file has only one line: #include "stdafx.h".</li>
  <li>Change the settings for the stdafx.cpp file in all configurations; set the value "Create (/Yc)" for the "Precompiled Header" option.</li>
</ol>
<p>Now we have enabled the precompiled headers option. If we run compilation now, the compiler will create the *.pch file. However, compilation will terminate just a bit later because of errors.</p>
<p>We have set all the *.c/*.cpp files to use precompiled headers, but it's not enough. We need now to add #include "stdafx.h" into each file.</p>
<p><b>The "stdafx.h" header must be the very first one to be included into the *.c/*.cpp file.</b>    This is obligatory! Otherwise you are guaranteed to get compilation errors.</p>
<p>It really makes sense, if you come to think of it. When the "stdafx.h" file is included in the very beginning, you can substitute an already preprocessed text into the file. This text stays the same all the time and is not affected by anything.</p>
<p>And now imagine that we have included some other file prior to "stdafx.h" and that file contains the line #define bool char. It will make the situation undefined as we have changed the contents of all the files where "bool" is mentioned. Now you can't just insert a preprocessed text, and the entire mechanism of "precompiled headers" gets broken. I believe this to be one of the reasons why "stdafx.h" must be included in the first place. Perhaps there are some other reasons too.</p>
<h2>Life hack</h2>
<p>Manually typing #include "stdafx.h" into all the *.c/*.cpp files is pretty tiresome and boring. Besides, you will get a new revision in the version control system with lots of files changed. It's no good doing so.</p>
<p>Third-party libraries included into the project as source files cause some additional troubles. Changing these files won't make sense. The best solution would be to disable precompiled headers for them, but it's inconvenient when you use a number of small libraries. You will be constantly stumbling over precompiled headers.</p>
<p>But there is an easier way to handle precompiled headers. This method is not a universal one, but it did help me in many cases.</p>
<p>Instead of manually adding #include "stdafx.h" in all the files, you may use the "Forced Included File" option.</p>
<p>Go to the "Advanced" settings tab. Select all configurations. In the field "Forced Included File" write the following text:</p>
<p>StdAfx.h;%(ForcedIncludeFiles)</p>
<p>From now on, "stdafx.h" will be automatically included in the beginning of ALL the files to be compiled. PROFIT!</p>
<p>You won't need to manually add #include "stdafx.h" in the beginning of each and every *.c/*.cpp file anymore - the compiler will do it automatically.</p>
<h2>What to include into stdafx.h</h2>
<p>This is a very important question. Mindlessly including every single header into "stdafx.h" will slow down the compilation process instead of speeding it up.</p>
<p>All the files that include "stdafx.h" depend on its contents. Suppose "stdafx.h" includes the file "X.h". Changing "X.h" just a little bit may cause complete recompilation of the whole project.</p>
<p><b>Important rule.</b> Make sure your "stdafx.h" file includes only those files that never or VERY rarely change. The best candidates are headers from system and third-party libraries.</p>
<p>If you include you own project files into "stdafx.h", be especially careful. Include only those files that change very, very rarely.</p>
<p>If any of the *.h files changes once in a month, it's too frequent enough. In most cases, it takes you more than once to do all the necessary edits in an h-file - usually 2 or 3 times. Completely recompiling the entire project 2 or 3 times is quite an unpleasant thing, isn't it? Besides, all your colleagues will need to do the same.</p>
<p>But don't be too fanatical about non-changing files. Include only those headers that you use really often. Including &lt;set&gt; won't make sense if you need it in just a couple of files. Instead, simply include this file where needed.</p>
<h2>Several precompiled headers</h2>
<p>What for may we need several precompiled headers in one project? Well, it's a pretty rare situation indeed. But here you are couple of examples.</p>
<p>Imagine the project is using both *.c and *.cpp files together. You can't use a shared *.pch file for them - the compiler will generate an error. </p>
<p>You have to create two *.pch files. One of them is created after compiling the C-file (xx.c), the other after compiling the C++-file (yy.cpp). Accordingly, you should specify in the settings to use one precompiled header for C-files and another for C++-files.</p>
<p>Note. Don't forget to set different names for these two *.pch files. Otherwise they will be replacing each other.</p>
<p>Here's another situation. One part of the project uses one large library while the other part uses another large library.</p>
<p>Naturally, different parts of the project should not know about both libraries: there may be (unlucky) overlapping of entities' names in different libraries.</p>
<p>It is logical to create two precompiled headers and use them in different parts of the program. As we have already mentioned, you may use any names you like for the files the *.pch files are generated from. Well, even the name of the *.pch file can be changed too. It all should be done very carefully of course, but there's nothing especially difficult about using two precompiled headers.</p>
<h2>Typical mistakes when using precompiled headers</h2>
<p>Now that you have attentively read the text above, you will understand and eliminate any errors related to stdafx.h. But I suggest that we quickly review novice programmers' typical mistakes once again and investigate the reasons behind them. Practice makes perfect.</p>
<h3>Fatal error C1083: Cannot open precompiled header file: 'Debug\project.pch': No such file or directory</h3>
<p>You are trying to compile a file that uses a precompiled header while the corresponding *.pch file is missing. Possible reasons are:</p>
<ol>
  <li>The stdafx.cpp file has not been compiled, so the *.pch file is not created yet. This may happen when, for instance, you first clean the solution and then try to compile one *.cpp file (Compile Ctrl-F7). To solve the problem, compile the entire solution or at least the stdafx.cpp file.</li>
  <li>No file has been specified in the settings to generate the *.pch file from - that is, the troubles are with the /Yc compilation switch. This problem is common with Visual Studio newcomers trying to use precompiled headers in their project for the first time. To find out how to do it correctly, see the above section "How to use precompiled headers".</li>
</ol>
<h3>Fatal error C1010: unexpected end of file while looking for precompiled header. Did you forget to add '#include "stdafx.h"' to your source?</h3>
<p>The error text says it all if you bother to read it. The file is compiled with the /Yu switch. It means that a precompiled header is to be used, but "stdafx.h" is missing from the file.</p>
<p>You need to add #include "stdafx.h" into the file.</p>
<p>If you can't do it, do not use the precompiled header for this *.c/*.cpp file. Delete the /Yu switch.</p>
<h3>Fatal error C1853: 'project.pch' precompiled header file is from a previous version of the compiler, or the precompiled header is C++ and you are using it from C (or vice versa)</h3>
<p>The project contains both C (*.c) and C++ (*.cpp) files. You cannot use a shared precompiled header (*.pch file) for them. </p>
<p>Possible solutions:</p>
<ol>
  <li>Disable precompiled headers for all the C-files. Practice shows that *.c files are preprocessed several times quicker than *.cpp ones. If you have just a few *.c files, you won't lose in performance by disabling precompiled headers for them.</li>
  <li>Create two precompiled headers. The first one should be generated from stdafx_cpp.cpp, stdafx_cpp.h; the second from stdafx_c.c, stdafx_c.h. Accordingly, you should use different precompiled headers for the *.c and *.cpp files. The names of the *.pch files must also be different, of course.</li>
</ol>
<h3>The compiler misbehaves when using precompiled headers</h3>
<p>You must have done something wrong. For example, the line #include "stdafx.h" is not the first one in the file.</p>
<p>Take a look at this example:</p>	<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>int</var> A = 10;
<dfn>#include "stdafx.h"</dfn>
<var>int</var> _tmain(<var>int</var> argc, _TCHAR* argv[]) {
  <var>return</var> A;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<p>This code will fail to compile, the compiler generating a seemingly strange error message:</p>	<br>
<span class="auto"><code class="source">error C2065: <kbd>'A'</kbd> : undeclared identifier</code></span><p>It thinks that all text before #include "stdafx.h" (including this line) is a precompiled header. When compiling the file, the compiler will substitute the text before #include "stdafx.h" with the text from the *.pch file. It will result in losing the line "int A = 10".</p>
<p>The correct code should look like this:</p>	<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "stdafx.h"</dfn>
<var>int</var> A = 10;
<var>int</var> _tmain(<var>int</var> argc, _TCHAR* argv[]) {
  <var>return</var> A;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<p>One more example:</p>	<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "my.h"</dfn>
<dfn>#include "stdafx.h" </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<p>The contents of the file "my.h" won't be used. As a result, you won't be able to use the functions declared in this file. Such behavior does confuse programmers a lot. They try to "cure" it by completely disabling precompiled headers and then come up with stories about how buggy Visual C++ is. Remember one thing: a compiler is one of the least buggy tools. In 99.99% of all cases, it's not the compiler you should be angry with, but mistakes in your own code (<a href="../../../www.viva64.com/en/b/0161/default.htm">Proof</a>).</p>
<p>To avoid such troubles, make sure you add #include "stdafx.h" in the very beginning of the file ALL THE TIME. Well, you can leave comments before #include "stdafx.h"; they don't take part in compilation anyway.</p>
<p>Another way is to use Forced Included File. See the section "Life hack" above.</p>
<h3>The entire project keeps completely recompiling when using precompiled headers</h3>
<p>You have added into stdafx.h a file that you keep regularly editing. Or you could have included an auto-generated file by mistake.</p>
<p>Attentively examine the contents of the "stdafx.h" file: it must contain only headers that never or very rarely change. Keep in mind that while certain included files do not change themselves, they may contain references to other *.h files that do.</p>
<h3>Something strange going on</h3>
<p>You may sometimes come across an issue when an error doesn't disappear even after fixing the code. The debugger reports something strange.</p>
<p>This issue may relate to the *.pch file. For some reason the compiler doesn't notice that one of the header files has been changed, so it doesn't recompile the *.pch file and keeps inserting previously generated text. It might have been caused by some faults related to the time of file modification.</p>
<p>This is an EXTREMELY rare situation. But it is possible and you should know about it. Personally I have faced this issue only 2 or 3 times during the many years of my career. It can be solved by complete full project recompilation.</p>
<h3>A project using precompiled headers cannot be analyzed by PVS-Studio or CppCat</h3>
<p>This is the most frequent trouble users report to our support service. For details, see the documentation: "<a href="../../../www.viva64.com/en/d/0304/default.htm">PVS-Studio: Troubleshooting</a>". Here I will only give a brief summary of the problem.</p>
<p>If a solution compiles well, it doesn't mean that it is implemented correctly. One solution may often contain numbers of projects, each of them using their own precompiled headers (i.e. their own stdafx.h and stdafx.cpp files).</p>
<p>Troubles occur when programmers start using files from one project in another. It may be convenient and this method is quite popular indeed. But they also forget that the *.cpp file contains the line #include "stdafx.h".</p>
<p>The question is, which of the stdafx.h files will be taken up? If the program compiles well, it means the programmer is just lucky enough.</p>
<p>Unfortunately, it is very difficult for us to reproduce the behavior when using the *.pch file. You see, the "honest" preprocessor works quite differently.</p>
<p>You can check if your solution is implemented in a wrong way by temporarily disabling precompiled headers. You may then get lots of interesting errors that will make you sincerely wonder how your project could compile at all.</p>
<p>Again, refer to the documentation for details. If anything is still unclear, ask our support service.</p>
<h2>Conclusion</h2>
<p>As you can see, working with precompiled headers is pretty easy. Programmers that try to use them and constantly face "compiler's numerous bugs" just don't understand the working principles behind this mechanism. I hope this article has helped you to get rid of that misunderstanding.</p>
<p>Precompiled headers are a very useful option that allows you to significantly enhance project compilation speed.</p></div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','2z86b7Xj');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~26.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='Dj1Rko23')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia2z86b7xj.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia2z86b7xj'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
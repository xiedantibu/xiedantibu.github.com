<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/inwturfi/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Topological Sort of Strings - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Topological Sort of Strings</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/shimon/default.htm" rel="author">shimon</a></b></div>
<div id="I_date">Jul 27, 2014 (last update: Jul 27, 2014)</div>
<h1>Topological Sort of Strings</h1>
<div id="I_score">Score: 3.3/5 (37 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
Well, I wonder how a compiler finds out dependencies in a header file( one headers needs another and another needs the other and blah blah blah). So let's say -<br>
<br>
<PRE >
 We have 4 headers named "A", "B", "C" and "D"
--&gt; "A" depends on "B" and "C"
--&gt; "B" depends on "D"
--&gt; "C" doesn't depend on anyone
--&gt; "D" depends on "C"
</pre>
<br>
Here's our problem- How all these headers will be sorted so that before including a header all it's dependencies will be met. And here comes topological sorting. We should sort them like this - <br>
<br>
<PRE >
C -- D -- B -- A
</pre>
<br>
So now all dependencies will be met !<br>
<br>
Here's how I did that - <br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>

<var>using</var> <var>namespace</var> std;

<var>class</var> StringTopoSort
{
	<var>public</var> :
		StringTopoSort(vector&lt;string&gt; [],<var>int</var>);
		~StringTopoSort();
		
		vector&lt;string&gt; string_topo_sort();
	<var>private</var> :
		<var>void</var> visit(<var>int</var> index);
		<var>int</var> len;
		vector&lt;string&gt; * str_lists;
		vector&lt;string&gt; unsorted;
		vector&lt;string&gt; sorted;
		vector&lt;<var>int</var>&gt;	* digit_eq;
		vector&lt;<var>int</var>&gt; digit_sorted;
		vector&lt;<var>bool</var>&gt; is_visited;
};


StringTopoSort :: StringTopoSort(vector&lt;string&gt; * _str_lists,<var>int</var> _len)
{
	str_lists = _str_lists;
	len = _len;
	digit_eq = <var>new</var> vector&lt;<var>int</var>&gt;[len];
	<var>for</var>(<var>int</var> i =0; i&lt;len;i++)
	{
		is_visited.push_back(<var>false</var>);
		unsorted.push_back(str_lists[i].at(0));
	}
	<var>for</var>(<var>int</var> i =0; i&lt;len;i++)
	{
		<var>for</var>(vector&lt;string&gt;::iterator it = str_lists[i].begin(); it&lt;str_lists[i].end();++it)
		{
			vector&lt;string&gt; :: iterator index = find(unsorted.begin(),unsorted.end(),*it);
			<var>if</var>(index != unsorted.end() )
				digit_eq[i].push_back(index-unsorted.begin());
		}
	}
}

StringTopoSort :: ~StringTopoSort() {}

vector&lt;string&gt; StringTopoSort :: string_topo_sort()
{
	<var>for</var>(<var>int</var> i =0;i&lt;len; i++)
	{
		<var>if</var>(is_visited[i] == <var>false</var>)
			visit(i);
	}
	
	<var>for</var>(<var>int</var> i = 0; i&lt;digit_sorted.size();i++)
		sorted.push_back(unsorted[digit_sorted[i]]);
	
	<var>return</var> sorted;
}

<var>void</var> StringTopoSort :: visit(<var>int</var> index)
{
	is_visited[index] = <var>true</var>;
	
	<var>for</var>(vector&lt;<var>int</var>&gt;::iterator i = digit_eq[index].begin(); i&lt;digit_eq[index].end(); i++)
	{
		<var>if</var>(!is_visited[*i])
			visit(*i);
	}
	digit_sorted.push_back(index);
}


<var>int</var> main(<var>int</var> argc, <var>char</var> ** argv)
{
	vector&lt;string&gt; headers[] = {{<kbd>"A"</kbd>,<kbd>"B"</kbd>,<kbd>"C"</kbd>},{<kbd>"B"</kbd>,<kbd>"D"</kbd>},{<kbd>"C"</kbd>},{<kbd>"D"</kbd>,<kbd>"C"</kbd>}};
	StringTopoSort sorter(headers,4);
	vector&lt;string&gt; sorted = sorter.string_topo_sort();
	<var>for</var>(<var>int</var> i =0; i&lt;sorted.size(); i++) 
		cout &lt;&lt; sorted[i] &lt;&lt; <kbd>" -- "</kbd>;
	cout &lt;&lt; endl;
	<var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And here we go -<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
C -- D -- B -- A --
</samp></pre></td></tr></table></div>
<br>
The StringTopoSort doesn't need c++11, but the declaration of headers here needs  <br>
this. So you have to compile it by -<br>
<br>
<PRE >
g++ main.cpp -std=c++1
</pre></div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','iNwTURfi');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~32.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='ShXSE3v7')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiainwturfi.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiainwturfi'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
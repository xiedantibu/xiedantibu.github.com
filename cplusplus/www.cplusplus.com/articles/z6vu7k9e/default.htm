<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/z6vu7k9e/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>When to pass parameters by value, refere - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">When to pass parameters by value, refere</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/jsmith/default.htm" rel="author">jsmith</a></b></div>
<div id="I_date">Feb 27, 2010 (last update: Mar 3, 2010)</div>
<h1>When to pass parameters by value, reference, and pointer</h1>
<div id="I_score">Score: 4.5/5 (251 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"></div>
<div id="I_content">
Occasionally we get posts asking the differences between references<br>
and pointers, and in the context of function calls, when to pass<br>
parameters by reference, pointer, or value.<br>
<br>
<b>Difference between references and pointers</b>
<br>
A pointer variable is a variable which holds the memory address of <br>
some other variable.  That "target" variable may be named or unnamed.<br>
For example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>int</var> i;
<var>int</var>* pInt = &amp;i;  <cite>// pInt "points to" i</cite>
<var>int</var>* pInt2 = <var>new</var> <var>int</var>;  <cite>// pInt2 "points to" an unnamed int. </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
A reference variable is a variable which "refers to" another <br>
named or unnamed variable.  For example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>void</var> foo( <var>const</var> std::string&amp; str ) {}

std::string s1;
std::string&amp; s1ref = s1;   <cite>// s1ref "refers" to s1</cite>

<cite>// Here, we construct an unnamed, temporary string object to call foo.</cite>
<cite>// foo's "str" parameter now "refers to" this unnamed object.</cite>
foo( std::string( <kbd>"Hello World"</kbd> ) );</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
There are three critical attributes of pointers that differentiate them<br>
from references.<br>
<br>
1.  You use pointer syntax to access the values "pointed to" by the pointer.<br>
2.  You can redirect the pointer to point it to a different "target" variable.<br>
3.  You can make a pointer point to nothing (ie, NULL pointer).<br>
<br>
Examples:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><var>int</var> i, j;
<var>int</var>* pInt = &amp;i;  <cite>// pInt "points to" i</cite>
*pInt = 42;  <cite>// This assigns the variable pointed to by pInt to 42</cite>
             <cite>// So in other words, since pInt points to i, i now has</cite>
             <cite>// the value 42.</cite>
pInt = &amp;j;   <cite>// This makes pInt now point to j instead of i.</cite>
pInt = NULL; <cite>// This makes pInt point to nothing. </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Notice how use of an asterisk prior to the pointer variable accesses<br>
the value being pointed to.  This is called the <i>dereference</i>
operator, a somewhat unfortunate name given that the language also<br>
supports references and the dereference operator has nothing to do<br>
with references.<br>
<br>
Now to references.  References have a couple of key characteristics<br>
that differentiate them from pointers:<br>
<br>
1.  References must be initialized at the point of instantiation.<br>
2.  References must ALWAYS "refer to" a named or unnamed variable<br>
    (that is, you cannot have a reference variable that refers to<br>
    nothing, the equivalent of a NULL pointer).<br>
3.  Once a reference is set to refer to a particular variable, you<br>
    cannot, during its lifetime, "rebind" it to refer to a different<br>
    variable.<br>
4.  You use normal "value" syntax to access the value being referred to.<br>
<br>
Lets look at some examples:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>int</var> i = 20, j = 10;
<var>int</var>&amp; iref = i;    <cite>// Instantiate iref and make it refer to i</cite>
iref = 42;        <cite>// Changes the value of i to 42</cite>
iref = j;         <cite>// Changes the value of i to 10 (the value of j)</cite>
iref = NULL;      <cite>// Changes the value of i to 0. </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
So it seems like references are more limiting than pointers in that<br>
two of the three characteristics of pointers are not available with<br>
references.  But in fact, these limitations tend to make programming<br>
<i>easier</i>.  <br>
<br>
First of all, when writing generic template code, you can't easily write<br>
a single template function that operates on values, references, and <br>
pointers, because to access the value "pointed to" by a pointer requires<br>
an asterisk whereas accessing a normal value does not require an asterisk.<br>
Accessing the value of a reference works the same way as accessing a <br>
normal value -- no asterisk needed.  So writing templates that can handle<br>
values and references is easy.  Here's a real-world example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt; <var>typename</var> T &gt;
<var>void</var> my_swap( T&amp; t1, T&amp; t2 ) 
{
    T tmp( t1 );
    t1 = t2;
    t2 = tmp;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The above function works great in these cases:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>int</var> i = 42, j = 10;
<var>int</var>&amp; iref = i, jref = j;

my_swap( i, j );          <cite>// Sets i = 10 and j = 42</cite>
my_swap( iref, jref );    <cite>// Swaps i and j right back </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
But, if you are expecting with the following code that i will be set<br>
to 10 and j to 42, then this doesn't do what you want:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>int</var> i = 42, j = 10;
<var>int</var>* pi = &amp;i, *pj = &amp;j;

my_swap( pi, pj ); <cite>// sets pi = &amp;j and pj = &amp;i </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Why?  Because you need to dereference the pointers to get to the<br>
values being pointed to, and the template function above does not<br>
have a single asterisk in it.<br>
<br>
If you wanted this to work correctly, you'd have to write:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt; <var>typename</var> T &gt;
<var>void</var> my_ptr_swap( T* t1, T* t2 )  <cite>// There are other ways to declare this</cite>
{
    T tmp( *t1 );
    *t1 = *t2;
    *t2 = tmp;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And now in the above example, you'd use <span class="auto"><code class="source">my_ptr_swap( pi, pj );</code></span>
to swap the values pointed to by pi and pj.  Personally, I think this<br>
solution stinks for three reasons.  First, I have to remember two function<br>
names instead of one:  my_ptr_swap and my_swap.  Second, my_ptr_swap is<br>
harder to understand than my_swap because although they have the same number<br>
of lines of code and effectively do the same thing, there are extra<br>
deferences involved.  (And I almost implemented the function wrong when I<br>
wrote it).  Thirdly, NULL pointers!  What happens if one or both of the<br>
pointers you pass to my_ptr_swap are NULL?  Nothing good.  In reality, if<br>
I wanted to make my_ptr_swap robust, to avoid the crash, I'd have to write:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt; <var>typename</var> T &gt;
<var>void</var> my_ptr_swap( T* t1, T* t2 )  <cite>// There are other ways to declare this</cite>
{
    <var>if</var>( t1 != NULL &amp;&amp; t2 != NULL )
    {
        T tmp( *t1 );
        *t1 = *t2;
        *t2 = tmp;
    }
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
But this isn't exactly a great solution either, I suppose, because now<br>
the caller of my_ptr_swap cannot be 100% sure the function did anything<br>
unless they duplicate the if() check:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>if</var>( pi != NULL &amp;&amp; pj != NULL )
    my_ptr_swap( pi, pj );
<var>else</var>
    std::cout &lt;&lt; <kbd>"Uh oh, my_ptr_swap won't do anything!"</kbd> &lt;&lt; std::endl;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
But duplicating the check makes the check inside of my_ptr_swap kinda<br>
pointless.  But on the other hand, a function should always validate its<br>
arguments.  A conundrum.  Perhaps a return value is in order:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt; <var>typename</var> T &gt;
<var>bool</var> my_ptr_swap( T* t1, T* t2 )  <cite>// There are other ways to declare this</cite>
{
    <var>if</var>( t1 != NULL &amp;&amp; t2 != NULL )
    {
        T tmp( *t1 );
        *t1 = *t2;
        *t2 = tmp;
        <var>return</var> <var>true</var>;
    }

    <var>return</var> <var>false</var>;  <cite>// false means function didn't swap anything</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And now I can write:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>if</var>( my_ptr_swap( pi, pj ) == <var>false</var> )
    std::cout &lt;&lt; <kbd>"Uh oh, my_ptr_swap won't do anything!"</kbd> &lt;&lt; std::endl;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Which is definitely better.  But this simply introduces an extra error<br>
leg in your program that you need to think about and deal with.  <i>What<br>
if my_ptr_swap fails?  What should I do?</i>  In most trivial applications,<br>
handling errors, if even done at all, are easy.  But in larger applications<br>
where you need to perform a sequence of 5 steps, each of which may fail<br>
means you have to think about all of the following error legs:<br>
<br>
1.  What if operation #1 fails?<br>
2.  What if operation #2 fails?  Do I roll back operation #1?  What if<br>
    rolling back operation #1 fails?<br>
3.  What if operation #3 fails?  Do I roll back #1 and #2?  What if<br>
    rolling back operation #2 succeeds but #1 fails?  What if rolling<br>
    back operation #2 fails?<br>
4.  What if operation #4 fails? .... etc ...<br>
5.  What if operation #5 fails? .... etc ...<br>
<br>
There are a mind-boggling number of failure cases to think about <i>
and test</i>.  Because it quickly gets complicated, most programmers<br>
handle only one failure;  double faults are often not handled very<br>
gracefully (the program aborts in some way).<br>
<br>
It seems to me that since error handling can easily dominate the design<br>
effort and implementation effort, programmers should strive NOT to<br>
artificially introduce error legs where they can easily be avoided.<br>
<br>
One of the most prevalent error cases to deal with is that of a NULL<br>
pointer.  Enter references.<br>
<br>
(to be continued)<br>
<br>
<br>
<br>
Key characteristic number 2 of references, quoted from above:<br>
<br>
<blockquote>2. References must ALWAYS "refer to" a named or unnamed variable<br>
(that is, you cannot have a reference variable that refers to<br>
nothing, the equivalent of a NULL pointer).</blockquote>
<br>
And this is the second reason why references should be preferred to pointers:<br>
no NULL pointer checks!  It eliminates one of the most common error cases in<br>
all of C++ programming at once!<br>
<br>
Now having said that, pointers cannot simply be avoided all the time.  When<br>
you dynamically allocate memory, pointers must be involved.  But we can<br>
mitigate this by some judicious programming.<br>
<br>
Let's say I want to bubble sort a std::vector of ints.  Ok, bad example given<br>
that vector&lt;&gt; already has a sort method and so does the STL, but humor me.<br>
One way to do this is:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code>std::vector&lt;<var>int</var>&gt;  v;  
<cite>// assume v is filled out with values</cite>

<cite>// This is REALLY suboptimal, but I'm writing this without testing it, and I </cite>
<cite>// want to ensure I get it right:</cite>
<var>for</var>( size_t i = 0; i &lt; v.size() - 1; ++i )
    <var>for</var>( size_t j = 0; j &lt; v.size() - 1; ++ )
        <var>if</var>( v[ i ] &lt; v[ j ] )
            my_ptr_swap( &amp;v[ i ], &amp;v[ j ] );</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Students are taught that when a function needs to modify its parameters, you should<br>
pass by pointer.  That's great for languages like Pascal which don't support references,<br>
but in C++, you have another option:  pass by reference.  In fact, if I replace the<br>
my_ptr_swap call with <span class="auto"><code class="source">my_swap( v[ i ], v[ j ] );</code></span> <i>it still works</i>.  AND,<br>
I've eliminated the use of pointers.<br>
<br>
Which brings me to....<br>
<br>
<b>When to pass parameters by value, by reference, and by pointer</b>
<br>
In college, students are taught that there are two times you should pass by pointer:<br>
<br>
1.  If the function needs to modify its parameter;<br>
2.  If copying the variable to the stack to pass it to the function is expensive.<br>
<br>
Well, in reality, neither of those is a great reason to pass by <i>pointer</i>.  In fact, <br>
they are both great reasons to pass by <i>reference</i>.  In the first case, you'd<br>
pass by non-const reference.  In the second, you'd pass by const reference.  <br>
Constness is beyond the scope of this discussion.  If you are not familiar with it,<br>
a const reference is basically a read-only variable and a non-const reference is<br>
a read-write variable.<br>
<br>
But then, is there ever a reason to pass by pointer?  Yes*.  Sometimes, you truly<br>
have an optional parameter.  To use a horrible example from the C runtime library,<br>
the time() function is declared as:<br>
<br>
<span class="auto"><code class="source">time_t time( time_t* tm );</code></span>
<br>
If you pass a non-NULL pointer to time(), it writes the current time to the variable<br>
pointed to by tm in addition to returning the current time.  If you pass a NULL <br>
pointer, then it does not do that.  In other words, tm is essentially an optional<br>
parameter.  In some cases, passing a NULL pointer may cause the function to do<br>
something different.  For example, pthread_create() takes a pointer to a thread<br>
attributes object.  If you pass NULL, it uses the default attributes for the new thread.<br>
If you pass a non-NULL pointer, it takes the attributes from the parameter.<br>
<br>
Notice that in both cases I gave, NULL is an <i>expected, legal value</i> that has use<br>
to the programmer.  A NULL pointer to my_ptr_swap is unexpected, and is considered<br>
a <i>programming error</i> on the part of the caller.<br>
<br>
So, to summarize:<br>
<br>
1.  Pass by value when the function does not want to modify the parameter and the<br>
     value is easy to copy (ints, doubles, char, bool, etc... simple types.  std::string,<br>
     std::vector, and all other STL containers are NOT simple types.)<br>
<br>
2.  Pass by const pointer when the value is expensive to copy AND the function does<br>
     not want to modify the value pointed to AND NULL is a valid, expected value that<br>
     the function handles.<br>
<br>
3.  Pass by non-const pointer when the value is expensive to copy AND the function<br>
     wants to modify the value pointed to AND NULL is a vlaid, expected value that the<br>
     function handles.<br>
<br>
4.  Pass by const reference when the value is expensive to copy AND the function does<br>
     not want to modify the value referred to AND NULL would not be a valid value if <br>
     a pointer was used instead.<br>
<br>
5.  Pass by non-cont reference when the value is expensive to copy AND the function wants<br>
     to modify the value referred to AND NULL would not be a valid value if a pointer was used <br>
     instead.<br>
<br>
6.  When writing template functions, there isn't a clear-cut answer because there are a few<br>
     tradeoffs to consider that are beyond the scope of this discussion, but suffice it to say that<br>
     most template functions take their parameters by value or (const) reference, however<br>
     because iterator syntax is similar to that of pointers (asterisk to "dereference"), any<br>
     template function that expects iterators as arguments will also by default accept pointers<br>
     as well (and not check for NULL since the NULL iterator concept has a different syntax).<br>
<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','z6vU7k9E');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~61.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='SGhbqMoL')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaz6vu7k9e'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaz6vu7k9e'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/e3wturfi/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Linked List Template and Binary Search T - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Linked List Template and Binary Search T</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/jason9/default.htm" rel="author">jason9</a></b></div>
<div id="I_date">Apr 13, 2011</div>
<h1>Linked List Template and Binary Search Tree</h1>
<div id="I_score">Score: 4.1/5 (111 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
I am posting this because after all my research I could not find a good example of both a templatized linked list and binary search tree. These are what I was able to come up with hope this helps anyone looking for something like this. The template linked list is very useful.<br>
<br>
ListNode.h<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef LIST_NODE_H</dfn>
<dfn>#define LIST_NODE_H</dfn>

<var>template</var> &lt;<var>typename</var> T&gt; 
<var>class</var> List;

<var>template</var> &lt;<var>typename</var> T&gt;
<var>class</var> ListNode <cite>//nodes to be contained with a list</cite>
{
	<var>friend</var> <var>class</var> List&lt;T&gt;;

<var>public</var>:
	ListNode(T);
	T getData();

<var>private</var>:
	T data; <cite>//templatized data stored in node</cite>
	ListNode* nextPtr; <cite>//pointer to the next node in list</cite>
};

<var>template</var> &lt;<var>typename</var> T&gt;
ListNode&lt;T&gt;::ListNode(T dataIn)
{
	data = dataIn; <cite>//stores data in node</cite>
	nextPtr = 0; <cite>//initializes point to next node to null</cite>
}

<var>template</var> &lt;<var>typename</var> T&gt;
T ListNode&lt;T&gt;::getData() <cite>//returns data stored in node</cite>
{
	<var>return</var> data;
}

<dfn>#endif</dfn>
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
List.h<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef LIST_H</dfn>
<dfn>#define LIST_H</dfn>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<dfn>#include "ListNode.h"</dfn>

<var>template</var> &lt;<var>typename</var> T&gt;
<var>class</var> List <cite>//linked list of ListNode objects</cite>
{
<var>public</var>:
	List();
	~List();
	<var>void</var> insertNewNode(T); <cite>//fucntion used to insert new node in order in the list</cite>
	<var>void</var> print(); <cite>//prints the contents of the linked list</cite>
	ListNode&lt;T&gt;* search(T); <cite>//searches for a value in the linked list and returns the point to object that contains that value</cite>

<var>private</var>:
	ListNode&lt;T&gt; *startPtr; <cite>//stores the pointer of first object in the linked list</cite>
	ListNode&lt;T&gt; *endPtr; <cite>//stored the pointer of the last object in the linked list</cite>
	<var>bool</var> isEmpty(); <cite>//utility functions used to see if the list contains no elements</cite>
	<var>void</var> insertBegin(T); <cite>//inserts new node before the first node in the list</cite>
	<var>void</var> insertEnd(T); <cite>//inserts new node after the last node in the list</cite>
};



<var>template</var> &lt;<var>typename</var> T&gt;
List&lt;T&gt;::List() <cite>//creates list with start and end as NULL</cite>
{
	startPtr = NULL;
	endPtr = NULL;
}

<var>template</var> &lt;<var>typename</var> T&gt;
List&lt;T&gt;::~List()
{
	<var>if</var> ( !isEmpty() ) <cite>// List is not empty</cite>
   {    
      ListNode&lt;T&gt; *currentPtr = startPtr;
      ListNode&lt;T&gt; *tempPtr;

      <var>while</var> ( currentPtr != 0 ) <cite>// delete remaining nodes</cite>
      {  
         tempPtr = currentPtr;
         currentPtr = currentPtr-&gt;nextPtr;
         <var>delete</var> tempPtr;
      }
   }
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>bool</var> List&lt;T&gt;::isEmpty()
{
	<var>if</var>(startPtr == NULL &amp;&amp; endPtr == NULL) <cite>//if the start pointer and end pointer are NULL then the list is empty</cite>
		<var>return</var> 1;
	<var>else</var>
		<var>return</var> 0;
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> List&lt;T&gt;::insertBegin(T dataIn)
{
	<var>if</var>(isEmpty()) <cite>//if the list is empty create first element of the list</cite>
	{
		ListNode&lt;T&gt; * newPtr = <var>new</var> ListNode&lt;T&gt;(dataIn); <cite>//creates new node</cite>
		startPtr = newPtr; <cite>//start and end pointer are same becuase there is only one object in list</cite>
		endPtr = newPtr;
	}<var>else</var> <cite>//if node(s) exist in list insert additional object before the first</cite>
	{
		ListNode&lt;T&gt; * newPtr = <var>new</var> ListNode&lt;T&gt;(dataIn);
		newPtr-&gt;nextPtr = startPtr; <cite>//the next pointer of the new node points to the node that was previously first</cite>
		startPtr = newPtr; <cite>//the pointer for the new node is now the starting node</cite>
	}
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> List&lt;T&gt;::insertEnd(T dataIn)
{
	<var>if</var>(isEmpty()) <cite>//if the list is empty create first element of the list (same as first case in insert at begin)</cite>
	{
		ListNode&lt;T&gt; * newPtr = <var>new</var> ListNode&lt;T&gt;(dataIn);
		startPtr = newPtr;
		endPtr = newPtr;
	}<var>else</var> <cite>//if node(s) exist in the list then insert new node at the end of the list</cite>
	{
		ListNode&lt;T&gt; * newPtr = <var>new</var> ListNode&lt;T&gt;(dataIn);
		endPtr-&gt;nextPtr = newPtr; <cite>//the current last node's next pointer points to the new node</cite>
		endPtr = newPtr; <cite>//the new node is now the last node in the list</cite>
	}
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> List&lt;T&gt;::insertNewNode(T dataIn) <cite>//general funtionn to insert new node the proper order in the list</cite>
{
	<var>if</var>(isEmpty()) <cite>//if there is no nodes in the list simply insert at beginning</cite>
	{
		insertBegin(dataIn);
	}<var>else</var> <cite>//otherwise</cite>
	{
		<var>if</var>(dataIn &lt; startPtr-&gt;data) <cite>//if the data of the new object is less than than the data of first node in list insert at beginning</cite>
		{
			insertBegin(dataIn);
		}
		<var>else</var> <var>if</var>(dataIn &gt;= endPtr-&gt;data) <cite>//if the data of the new object is greater than than the data of last node in list insert at end</cite>
		{
			insertEnd(dataIn);
		}
		<var>else</var> <cite>//the new node is being inserted in order but not at the beginning or end</cite>
		{
			ListNode&lt;T&gt; * currentPtr = startPtr;
			ListNode&lt;T&gt; * newPtr = <var>new</var> ListNode&lt;T&gt;(dataIn); <cite>//creates new node</cite>
			<var>while</var>(currentPtr != endPtr) <cite>//runs until the end of the list is reached</cite>
			{
				<var>if</var>((newPtr-&gt;data &lt; currentPtr-&gt;nextPtr-&gt;data) &amp;&amp; (newPtr-&gt;data &gt;= currentPtr-&gt;data)) <cite>//if the data of the new node is less the data in the next node and greater than the data in the current node, insert after current node </cite>
				{
					ListNode&lt;T&gt; * next = currentPtr-&gt;nextPtr; 
					currentPtr-&gt;nextPtr = newPtr; <cite>//current nodes next pointer now points to the new node</cite>
					newPtr-&gt;nextPtr = next; <cite>//the new nodes next pointer now points the node previously after the current node</cite>
					<var>break</var>;
				}
				currentPtr = currentPtr-&gt;nextPtr; <cite>//moves to the next node in the list</cite>
			}
		}
	}
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> List&lt;T&gt;::print()
{
	<var>if</var>(isEmpty())
	{
		cout &lt;&lt; <kbd>"The list is empty"</kbd> &lt;&lt; endl;
	
	}<var>else</var>
	{
		ListNode&lt;T&gt; * currentPtr = startPtr;

		cout &lt;&lt; <kbd>"The contents of the list is: "</kbd>;
		<var>while</var>(currentPtr != NULL) <cite>//prints until the end of the list is reached</cite>
		{
			cout &lt;&lt; currentPtr-&gt;data &lt;&lt; <kbd>' '</kbd>;
			currentPtr = currentPtr-&gt;nextPtr; <cite>//moves to next node in list</cite>
		}
		cout &lt;&lt; endl;
	}
}

<var>template</var> &lt;<var>typename</var> T&gt;
ListNode&lt;T&gt;* List&lt;T&gt;::search(T key) <cite>//search functions that searches for node that contains data equal to the key</cite>
{
	ListNode&lt;T&gt;* nodePtr;
	<var>bool</var> found = <var>false</var>;

	nodePtr = startPtr;

	<var>while</var>((!found) &amp;&amp; (nodePtr != NULL)) <cite>//runs through list until data is found within a node or end of list is reached</cite>
	{
		<var>if</var>(nodePtr-&gt;data == key) <cite>//if the node's data equals the key then the node has been found</cite>
			found = <var>true</var>;
		<var>else</var>
			nodePtr = nodePtr-&gt;nextPtr; <cite>//moves to next node in list</cite>
	}
	<var>return</var> nodePtr; <cite>//returns pointer to the node that contains data equal to key (NULL if not found)</cite>
}
<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
TreeNode.h<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef TREE_NODE_H</dfn>
<dfn>#define TREE_NODE_H</dfn>

<var>template</var> &lt;<var>typename</var> T&gt; 
<var>class</var> Tree;

<var>template</var> &lt;<var>typename</var> T&gt;
<var>class</var> TreeNode
{
	<var>friend</var> <var>class</var> Tree&lt;T&gt;;

<var>public</var>:
	TreeNode(T); 
	T getData(); <cite>//returns data stored in node</cite>

<var>private</var>:
	T data;
	TreeNode* leftPtr; <cite>//pointer to left child node of node</cite>
	TreeNode* rightPtr; <cite>//pointer to right child node of node</cite>
};

<var>template</var> &lt;<var>typename</var> T&gt;
TreeNode&lt;T&gt;::TreeNode(T dataIn)
{
	data = dataIn;
	leftPtr = 0; <cite>//pointer to left and right child nodes are initilized to NULL</cite>
	rightPtr = 0;
}

<var>template</var> &lt;<var>typename</var> T&gt;
T TreeNode&lt;T&gt;::getData()
{
	<var>return</var> data;
}

<dfn>#endif</dfn>
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Tree.h<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef TREE_H</dfn>
<dfn>#define TREE_H</dfn>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<dfn>#include "TreeNode.h"</dfn>

<var>template</var> &lt;<var>typename</var> T&gt;
<var>class</var> Tree
{
<var>public</var>:
	Tree();
	<var>void</var> insertNewNode(T); <cite>//inserts new node in the tree</cite>
	<var>void</var> preOrderPrint(); <cite>//prints out tree in the order in which it was entered</cite>
	<var>void</var> inOrderPrint(); <cite>//prints out tree in accending order</cite>
	<var>void</var> postOrderPrint(); <cite>//prints out the tree after the order</cite>
	TreeNode&lt;T&gt;* search(T); <cite>//search for node thats data equals the search key and returns the pointer to that node</cite>

<var>private</var>:
	TreeNode&lt;T&gt; *rootPtr;
	<var>bool</var> isEmpty();

	<cite>//utility functions to make the insert, print, and search functions more understandable</cite>
	<var>void</var> insertNewNodeUtility(TreeNode&lt;T&gt;**,T);
	<var>void</var> preOrderPrintUtility(TreeNode&lt;T&gt;*);
	<var>void</var> inOrderPrintUtility(TreeNode&lt;T&gt;*);
	<var>void</var> postOrderPrintUtility(TreeNode&lt;T&gt;*);
	TreeNode&lt;T&gt;* searchUtility(TreeNode&lt;T&gt;*,T);
};

<var>template</var> &lt;<var>typename</var> T&gt;
Tree&lt;T&gt;::Tree()
{
	rootPtr = 0;
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> Tree&lt;T&gt;::insertNewNode(T dataIn)
{
	insertNewNodeUtility(&amp;rootPtr, dataIn); <cite>//calls insert new node function passing refernce of the root node and the data to be inserted in the new node</cite>
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> Tree&lt;T&gt;::insertNewNodeUtility(TreeNode&lt;T&gt;** temp, T dataIn)
{
	<var>if</var>(*temp == 0) <cite>//if node is null create a new node with input data</cite>
		*temp = <var>new</var> TreeNode&lt;T&gt;(dataIn);
	<var>else</var>
	{
		<var>if</var>(dataIn &lt; (*temp)-&gt;data) <cite>//if input data is less than data in current node</cite>
			insertNewNodeUtility(&amp;((*temp)-&gt;leftPtr),dataIn); <cite>//recursive function call with current node's left child as input leaf</cite>
		<var>else</var> 
		{
			<var>if</var>(dataIn &gt; (*temp)-&gt;data) <cite>//if input data is greater than data in current node</cite>
				insertNewNodeUtility(&amp;((*temp)-&gt;rightPtr),dataIn); <cite>//recursive function call with current node's right child as input leaf</cite>
			<var>else</var> <cite>//if input data is equal to data in current node</cite>
				cout &lt;&lt; dataIn &lt;&lt; <kbd>" is a duplicate value "</kbd> &lt;&lt; endl; <cite>//duplicate values ignored</cite>
		}
	}
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> Tree&lt;T&gt;::preOrderPrint()
{
	preOrderPrintUtility(rootPtr); 
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> Tree&lt;T&gt;::preOrderPrintUtility(TreeNode&lt;T&gt;* temp)
{
	<var>if</var>(temp != 0)
	{
		cout &lt;&lt; temp-&gt;data &lt;&lt; <kbd>' '</kbd>; <cite>//process node</cite>
		preOrderPrintUtility(temp-&gt;leftPtr); <cite>//recursive traversal of left subtree</cite>
		preOrderPrintUtility(temp-&gt;rightPtr); <cite>//recursive traversal of right subtree</cite>
	}
}


<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> Tree&lt;T&gt;::inOrderPrint()
{
	inOrderPrintUtility(rootPtr);
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> Tree&lt;T&gt;::inOrderPrintUtility(TreeNode&lt;T&gt;* temp)
{
	<var>if</var>(temp != 0)
	{
		inOrderPrintUtility(temp-&gt;leftPtr); <cite>//recursive traversal of left subtree</cite>
		cout &lt;&lt; temp-&gt;data &lt;&lt; <kbd>' '</kbd>; <cite>//process node</cite>
		inOrderPrintUtility(temp-&gt;rightPtr); <cite>//recursive traversal of right subtree</cite>
	}
}


<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> Tree&lt;T&gt;::postOrderPrint()
{
	postOrderPrintUtility(rootPtr);
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> Tree&lt;T&gt;::postOrderPrintUtility(TreeNode&lt;T&gt;* temp)
{
	<var>if</var>(temp != 0)
	{
		postOrderPrintUtility(temp-&gt;leftPtr); <cite>//recursive traversal of left subtree</cite>
		postOrderPrintUtility(temp-&gt;rightPtr); <cite>//recursive traversal of right subtree</cite>
		cout &lt;&lt; temp-&gt;data &lt;&lt; <kbd>' '</kbd>; <cite>//process node</cite>
	}
}

<var>template</var> &lt;<var>typename</var> T&gt;
TreeNode&lt;T&gt;* Tree&lt;T&gt;::search(T key)
{
	<var>return</var> searchUtility(rootPtr, key);
}

<var>template</var> &lt;<var>typename</var> T&gt;
TreeNode&lt;T&gt;* Tree&lt;T&gt;::searchUtility(TreeNode&lt;T&gt;* leaf, T key)
{
	<var>if</var>(leaf != NULL)
	{
		<var>if</var>(key == leaf-&gt;data)
			<var>return</var> leaf;
		<var>if</var>(key &lt; leaf-&gt;data)
			<var>return</var> searchUtility(leaf-&gt;leftPtr, key);
		<var>else</var>
			<var>return</var> searchUtility(leaf-&gt;rightPtr, key);
	}
	<var>else</var>
		<var>return</var> NULL;
}
<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
main.cpp<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;ctime&gt;</dfn>

<dfn>#include "List.h"</dfn>
<dfn>#include "ListNode.h"</dfn>
<dfn>#include "Tree.h"</dfn>
<dfn>#include "TreeNode.h"</dfn>

<var>using</var> <var>namespace</var> std;

<var>int</var> main()
{
	<var>int</var> choice = 0;

	<cite>//create function array of 10 random numbers between 0 and 100</cite>
	<var>const</var> <var>int</var> size = 10;
	<var>int</var> arr[size];
	srand(time(0)); <cite>//time is used as the random seed</cite>
	<var>for</var>(<var>int</var> i = 0; i &lt;= size-1;  i++)
	{
		arr&lt;i&gt; = rand() % 101; <cite>//assigns random number in array</cite>
	}

	List&lt;<var>int</var>&gt; intList; <cite>//creates order linked list</cite>
	<var>for</var>(<var>int</var> i = 0; i &lt;= size-1;  i++)
	{
		intList.insertNewNode(arr&lt;i&gt;); <cite>//inserts value from array to the linked list in the proper positions</cite>
	}

	Tree&lt;<var>int</var>&gt; intTree; <cite>//create binary tree</cite>
	<var>for</var>(<var>int</var> i = 0; i &lt;= size-1;  i++)
	{
		intTree.insertNewNode(arr&lt;i&gt;); <cite>//inserts value from array to the binry tree in the same order entered</cite>
	}

	<var>while</var> (choice != 7)
	{
		<cite>//displays initial array of values</cite>
		cout &lt;&lt; <kbd>"Initial Array of Values"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"-----------------------"</kbd> &lt;&lt; endl;
		<var>for</var>(<var>int</var> i = 0; i &lt;= size-1;  i++)
		{
			cout &lt;&lt; arr&lt;i&gt; &lt;&lt; <kbd>' '</kbd>;
		}
		cout &lt;&lt; endl &lt;&lt; endl;

		<cite>//menu of options to perform </cite>
		cout &lt;&lt; <kbd>"Linked Lists and Trees"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"-----------------------"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"1. Print Linked List"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"2. Search For Entry In Linked List"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"3. Print Pre-Ordered Traverseal of Tree"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"4. Print In-Order Traversal of Tree"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"5. Print Post-Order Traversal of Tree"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"6. Search For Entry In Tree"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"7. EXIT"</kbd> &lt;&lt; endl;
		cout &lt;&lt; <kbd>"Enter Choice: "</kbd>;
		cin &gt;&gt; choice;
		system(<kbd>"cls"</kbd>);

		<var>int</var> key; <cite>//search key used for both the search of linked list and binary tree</cite>
		
		ListNode&lt;<var>int</var>&gt;* posList; <cite>//node pointer used to store a pointer to node returned from the linked list search function</cite>

		TreeNode&lt;<var>int</var>&gt;* posTree; <cite>//node pointer used to store a pointer to node returned from the binary tree search function</cite>

		<var>switch</var>(choice)
		{
		<var>case</var> 1:
			cout &lt;&lt; <kbd>"Output of a Sorted Linked List"</kbd> &lt;&lt; endl;
			cout &lt;&lt; <kbd>"------------------------------"</kbd> &lt;&lt; endl;
			intList.print(); <cite>//prints contents of linked list</cite>
			system(<kbd>"pause"</kbd>);
			system(<kbd>"cls"</kbd>);
			<var>break</var>;
		<var>case</var> 2:
			cout &lt;&lt; <kbd>"Searching In a Linked List"</kbd> &lt;&lt; endl;
			cout &lt;&lt; <kbd>"--------------------------"</kbd> &lt;&lt; endl;
			<cite>//prompt for search key</cite>
			cout &lt;&lt; <kbd>"Enter a a search key: "</kbd>;
			cin &gt;&gt; key;
			posList = intList.search(key); <cite>//stores pointer to list node object</cite>
			cout &lt;&lt; <kbd>"The value of pointer is "</kbd> &lt;&lt; posList &lt;&lt; endl;
			<var>if</var>(posList != NULL) <cite>//if not null then the value was found</cite>
				cout &lt;&lt; <kbd>"The value stored at this posistion is "</kbd> &lt;&lt; posList-&gt;getData() &lt;&lt; endl;
			<var>else</var>
				cout &lt;&lt; <kbd>"The pointer to this position is NULL so there can be no value stored"</kbd> &lt;&lt; endl;
			system(<kbd>"pause"</kbd>);
			system(<kbd>"cls"</kbd>);
			<var>break</var>;
		<var>case</var> 3:
			cout &lt;&lt; <kbd>"Pre-Ordered Traverseal of Tree"</kbd> &lt;&lt; endl;
			cout &lt;&lt; <kbd>"------------------------------"</kbd> &lt;&lt; endl;
			intTree.preOrderPrint(); <cite>//print pre ordered traversal of binary tree</cite>
			cout &lt;&lt; endl;
			system(<kbd>"pause"</kbd>);
			system(<kbd>"cls"</kbd>);
			<var>break</var>;
		<var>case</var> 4:
			cout &lt;&lt; <kbd>"In-Ordered Traverseal of Tree"</kbd> &lt;&lt; endl;
			cout &lt;&lt; <kbd>"------------------------------"</kbd> &lt;&lt; endl;
			intTree.inOrderPrint(); <cite>//print in ordered traversal of binary tree</cite>
			cout &lt;&lt; endl;
			system(<kbd>"pause"</kbd>);
			system(<kbd>"cls"</kbd>);
			<var>break</var>;
		<var>case</var> 5:
			cout &lt;&lt; <kbd>"Post-Ordered Traverseal of Tree"</kbd> &lt;&lt; endl;
			cout &lt;&lt; <kbd>"------------------------------"</kbd> &lt;&lt; endl;
			intTree.postOrderPrint(); <cite>//print post ordered traversal of binary tree</cite>
			cout &lt;&lt; endl;
			system(<kbd>"pause"</kbd>);
			system(<kbd>"cls"</kbd>);
			<var>break</var>;
		<var>case</var> 6:
			cout &lt;&lt; <kbd>"Searching In a Tree"</kbd> &lt;&lt; endl;
			cout &lt;&lt; <kbd>"-------------------"</kbd> &lt;&lt; endl;
			<cite>//prompt for search key</cite>
			cout &lt;&lt; <kbd>"Enter a a search key: "</kbd>;
			cin &gt;&gt; key;
			posTree = intTree.search(key); <cite>//stores pointer to tree node object</cite>
			cout &lt;&lt; <kbd>"The value of pointer is "</kbd> &lt;&lt; posTree &lt;&lt; endl;
			<var>if</var>(posTree != NULL) <cite>//if not null then the value was found</cite>
				cout &lt;&lt; <kbd>"The value stored at this posistion is "</kbd> &lt;&lt; posTree-&gt;getData() &lt;&lt; endl;
			<var>else</var>
				cout &lt;&lt; <kbd>"The pointer to this position is NULL so there can be no value stored"</kbd> &lt;&lt; endl;
			system(<kbd>"pause"</kbd>);
			system(<kbd>"cls"</kbd>);
			<var>break</var>;
		<var>case</var> 7:
			cout &lt;&lt; <kbd>"Thanks for using my test program for Linked Lists and Trees"</kbd> &lt;&lt; endl;
			system(<kbd>"pause"</kbd>);
			system(<kbd>"cls"</kbd>);

		}
	}
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The reason I posted this is that I had an assignment where I had to design a binary search tree and a linked list and couldn't find anything online as to how to design it yourself. Everywhere I looked they used the STL linked list which is not the purpose of the assignment. I wanted to post this so anybody else in my situation has something to refer to and get the basic idea.</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','E3wTURfi');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~110.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='y74wvCM9')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiae3wturfi'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiae3wturfi'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
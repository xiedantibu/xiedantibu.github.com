<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/486ac542/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Animated checkers game using SFML - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Animated checkers game using SFML</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/fun2code/default.htm" rel="author">fun2code</a></b></div>
<div id="I_date">Dec 11, 2012 (last update: Dec 15, 2012)</div>
<h1>Animated checkers game using SFML</h1>
<div id="I_score">Score: 4.3/5 (40 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
Here is a project which started for me as an effort to develop a drag and drop object for possible use as a GUI element, or in a game.<br>
<br>
A checkers game with checkers which snap-to a board space center on release seemed like a good framework for developing the drag and drop object.<br>
SFML version 1.6 is used here.<br>
<br>
A checker will only snap-to a space if a move there is legal, otherwise it snaps back to where it was.<br>
<br>
Animation effects include:<br>
<br>
1) An animated greeting. (WELCOME appears, then after a couple of seconds it expands and fades out).<br>
2) A fully animated dealing of checkers to the board.<br>
3) Captures, including the split of a captured king into two checkers where captured checkers go, along the board edges.<br>
4) A captured checker is used when a checker is "kinged".<br>
5) Animated winner announcement at end of game.<br>
<br>
Screenshots at game start, and midgame:<br>
<IMG SRC="screenshot_a_sm.jpg" alt="">
<IMG SRC="screenshot_b_sm.jpg" alt="">
<br>
A link to all source code, images and an executable (so you can try it out right away) is given at the end of this article.<br>
<br>
Here is a partial description of the source code.<br>
<br>
Drag and drop objects.<br>
Abstract base class: dragDrop<br>
This class is abstract because the shape (round, rectangular) is to be indeterminate in the base class.<br>
Pure virtual methods:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>virtual</var> <var>bool</var> hit(<var>void</var>) = 0;<cite>// depends on shape ( rect, circle, ? )</cite>
<var>virtual</var> <var>bool</var> hitAnchor(<var>int</var> idx) = 0;<cite>// test if at a given anchor location</cite>
<var>virtual</var> <var>void</var> snap(<var>void</var>) = 0;<cite>// carries out snap-to motion in frame logic. Shape dependent. </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Some of the data members hint at how the object works.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>const</var> <var>static</var> <var>int</var>&amp; r_mseX;<cite>// track globally updated mouse coordinates</cite>
<var>const</var> <var>static</var> <var>int</var>&amp; r_mseY;
<var>static</var> <var>float</var> snap_speed;<cite>// all common speed. </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Actually, snap_speed is not in use yet! Snap motions currently occur "instantly" (entire distance in one frame). Try enabling this feature!<br>
<br>
A dragDrop object "knows" about its possible anchor points via a data member used to point to an array of anchor points:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>std::pair&lt;<var>int</var>, <var>int</var>&gt;* p_anchorPos;<cite>// array of allowed destination points in drag op.</cite>
<var>int</var> Nanchors;<cite>// # of pairs in array pointed to by p_anchorPos</cite>
<var>int</var> homeIdx;<cite>// index to home location among anchor array elements </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The array pointed to is declared statically in main.cpp and represents all of the 32 places where a checker can be on the board.<br>
<br>
We then have these 3 methods, which are non virtual (ie defined in the dragDrop class):<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>bool</var> grab(<var>void</var>);<cite>// call on LBUTT down - calls hit()</cite>
<var>void</var> drag(<var>void</var>);<cite>// call in frame logic</cite>
<var>void</var> release( <var>int</var>* p_IdxList, <var>int</var> listSz );<cite>// for use when given a sub-list of anchors from a larger array of anchors </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The arguments passed to the release() function provide a list of "prohibited" anchors. If the dragDrop is released over one of these it will return to the homeIdx anchor.<br>
<br>
Derived class (base=dragDrop): dragDropRect<br>
It looks like I developed only a class for rectangular dragDrop objects, even though the very purpose of setting up an abstract base was to allow freedom here! Clearly, a circular dragDrop object would be better for <br>
<br>
this application. The reader is therefore invited to create and utilize a dragDropCircle object.<br>
In dragDropRect we have just int szX, szY; and definitions for the 3 pv functions in dragDrop.<br>
<br>
A bit about the animated motion:<br>
Abstract base class: Leg<br>
This class provides access to functions for use in updating position. The object moved owns the parameter t <br>
<br>
for the motion.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>float</var> period;
<var>virtual</var> <var>float</var> x( <var>float</var> t ) = 0;
<var>virtual</var> <var>float</var> y( <var>float</var> t ) = 0;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Again. the intent with setting up an abstract base is to allow freedom of the path shape.<br>
In this project I added only one derived class. A linLeg supports motion in a straight line between 2 given points at a constant speed. This is the only type of motion used in the game.<br>
Class (base=Leg): linLeg<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>float</var> posix, posiy;
<var>float</var> velix, veliy;	
<var>virtual</var> <var>float</var> x( <var>float</var> t ) { <var>return</var>( posix + velix*t ); }
<var>virtual</var> <var>float</var> y( <var>float</var> t ) { <var>return</var>( posiy + veliy*t ); }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
There is only one dragDropRect object in use in the game (chObj). This is the checker being moved.<br>
<br>
Class: Path<br>
This class is for managing the use of multiple Legs. The class owns the array of Legs which objects may travel on.<br>
Four are in use in the game:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code>Path wh_dealPath( 12, 50, 3, 400.0f, -40.0f );<cite>// 12 linLegs. One for each checker on deal.</cite>
Path bk_dealPath( 12, 50, 3, 400.0f, 620.0f );
Path aniPath( 1, 0, 0, 100.0f, 100.0f );<cite>// for general single checker motion</cite>
Path kingMePath( 1, 0, 0, 100.0f, 100.0f );<cite>// for "king me" animations </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In main.cpp you will find these functions which provide the logic in the program.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code><var>void</var> gameLogic(<var>void</var>);<cite>// called in main(). Logic branches from here.</cite>
<var>void</var> gameCapture_SplitAniLogic(<var>void</var>);<cite>// specific for capture and checker split (captured king into 2 normal checkers in the capture pool).</cite>
<var>void</var> gameKingMeAniLogic(<var>void</var>);
<var>void</var> gameDraw(sf::RenderWindow&amp; rApp);<cite>// all drawing calls here</cite>
<var>void</var> gameHitDown(<var>void</var>);<cite>// event handling for the game</cite>
<var>void</var> gameHitUp(<var>void</var>);

<var>bool</var> menuHitDown(<var>void</var>);<cite>// returns false if file I/O error</cite>
<var>void</var> menuHitUp(<var>void</var>);<cite>// event handling for the buttons. </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
You will also find button classes, as I tend to do all gui myself.<br>
<br>
I hope the above description gives you enough to base an understanding of the code upon.<br>
There are plenty of areas where the program could be extended and/or improved so there is room to tinker.<br>
<br>
Download:<br>
I have improved over the last version of this article. The .zip file linked to below includes all source code, all images used, and an executable file which is now statically linked to the SFML libraries used.<br>
The exe should run without any external library files present.<br>
<p>Attachments:
	[<a href="checkers_stat.zip">checkers_stat.zip</a>]
</p>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','486AC542');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~135.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='D80DSL3A')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia486ac542'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia486ac542'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
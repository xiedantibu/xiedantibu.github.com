<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/nucrko23/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>The difference between pointers and arra - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">The difference between pointers and arra</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/siavoshkc/default.htm" rel="author">siavoshkc</a></b></div>
<div id="I_date">Jan 14, 2008</div>
<h1>The difference between pointers and arrays</h1>
<div id="I_score">Score: 3.3/5 (17 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
The difference between pointers and arrays<br>
<br>
I have seen in many places that an array is introduced as a pointer. This is technically not correct. Arrays are not pointer. So what is it? It is like any other variable in C++.<br>
Take a look at this code:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>int</var> arr[3]={3,4,5};
cout&lt;&lt;arr;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
You may say: "Look there, arr is an address, who says it's not a pointer?"<br>
And I say: this code prints out an address. So var is an address?<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>int</var> var;
cout&lt;&lt;&amp;var;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Let me explain:  <br>
All the variables can be manipulated in the memory by their addresses. CPU uses these addresses to fetch them, change them and save them. So, all variables have an address (not only those that you pointed to them). We can find out the address of a variable by (&) operator, in form of:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>int</var>* ptr=&amp;intvar;
<cite>// Now the address of intvar is in ptr </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
An array is just a sequence of variables. But there is a rule, that C++ looks arrays as if they were pointers. What does it means? It means that if you write arr, compiler takes it as &arr[0] (except in three conditions that I'll tell you soon), that is the address of the first element of the array. It has a type "pointer to T" where T is the type of array elements (that is int in our example). If you add 1 to it it will point to the second element of the array.<br>
 <br>
So it takes &arr as what? <br>
It is one of the exceptions where the rule does not apply. It takes it as a pointer to array. It will again point to the first element of the array, but if you add one to this pointer, it will point to the address of the place right after the last element of the array (just like you skipped the array). It is a pointer to the whole the array. The value of &arr and arr is the same (address of the first element). But their type is different. Here &arr has type "pointer to the array of T" (compare it to the type of arr).<br>
<br>
Look at this<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>int</var> arr[3]={3,4,5};
cout&lt;&lt;<kbd>"First element of the array: "</kbd>&lt;&lt;arr[0] &lt;&lt;endl;
cout&lt;&lt;<kbd>"Address of the first element: "</kbd>&lt;&lt;&amp;arr[0] &lt;&lt;endl;
cout&lt;&lt;<kbd>"Address of the array: "</kbd>&lt;&lt;arr &lt;&lt;endl;
cout&lt;&lt;<kbd>"So what is this? "</kbd>&lt;&lt;&amp;arr &lt;&lt;endl;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
First cout: Prints out the "value" of arr[0].<br>
Second cout: Prints out the "address" of arr[0].<br>
Third cout: Again prints out the "address" of arr[0].<br>
Forth cout: Prints out the address of the array, that is again the address of arr[0].<br>
<br>
And this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>int</var> arr[3]={3,4,5};
cout&lt;&lt;<kbd>"First element of the array: "</kbd>&lt;&lt;arr[0]+1 &lt;&lt;endl;
cout&lt;&lt;<kbd>"Address of the first element: "</kbd>&lt;&lt;&amp;arr[0]+1 &lt;&lt;endl;
cout&lt;&lt;<kbd>"Address of the array: "</kbd>&lt;&lt;arr +1&lt;&lt;endl;
cout&lt;&lt;<kbd>"So what is this? "</kbd>&lt;&lt;&amp;arr +1&lt;&lt;endl;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
First cout: Prints out the "value" of arr[0] plus one.<br>
Second cout: Prints out the "address" of arr[1].<br>
Third cout: Again prints out the "address" of arr[1] .<br>
Forth cout: Prints out the first address of  memory after the array.<br>
<br>
<br>
Comparison<br>
Similarities, each with an example:<br>
1) (*) can be used for both.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>int</var> arr[3]={1,3,4};         <cite>//Declares an array with 3 elements</cite>
<var>int</var> * ptr=arr;              <cite>//Initialize pointer ptr with the address of  array arr </cite>
cout&lt;&lt;*(arr+2)&lt;&lt;endl;
cout&lt;&lt;*{ptr+2)&lt;&lt;endl;

<cite>/* output */</cite>
4
4</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
2) Subscription can be used for both<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>int</var> arr[3]={1,3,4};         <cite>//Declares an array with 3 elements</cite>
<var>int</var> * ptr=arr; 		 <cite>//Initialize pointer ptr with the address of  array arr</cite>
cout&lt;&lt;arr[2])&lt;&lt;endl;
cout&lt;&lt;ptr[2])&lt;&lt;endl;

<cite>/* output */</cite>
4
4</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
3) A pointer can be used as an array. <br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><var>int</var> *ptr=<var>new</var> <var>int</var>[3]; 
ptr[0]=12;
ptr[2]=3;
cout&lt;&lt;ptr[2];

<cite>/* output */</cite>
3</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
4) An array can have a type of pointer. That means the elements of it can be pointers.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><var>int</var> ar[2]={8,2};
<var>int</var> var1=66;
<var>int</var> var2=111;
<var>int</var>* ptarray[5];
ptarray[0]=ar;
ptarray[1]=&amp;ar[1];  <cite>//Address of second element of array ar</cite>
ptarray[2]=&amp;var1;
ptarray[3]=&amp;var2;
ptarray[4]=&amp;ar[0];
<cite>// To keep code small I use a loop</cite>
<var>for</var>(<var>int</var> i=0;i&lt;5;i++)
	cout&lt;&lt;*(ptarray&lt;i&gt;)&lt;&lt;endl;

<cite>/* output */</cite>
8
2
66
111
8</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
5) All arrays will be passed to functions as a pointer, which means you can't actually send an array to a function. So function(char[]) is equal to function(char*).<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><dfn>#include&lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;
<var>void</var> test(<var>char</var> v[]);

<var>int</var> main(){ 
	<var>char</var> a[53];
         <cite>//a="If a is an array, this line should generate an error";   	</cite>
	test(pta);
	<var>return</var> 0;
}

<var>void</var> test(<var>char</var> v[]){
	v=<kbd>"If v is an array, this line should generate an error"</kbd>;
	cout&lt;&lt;v&lt;&lt;endl;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Differences:<br>
<br>
1) A pointer is a place in memory that keeps address of another place inside, while an array is a single, preallocated chunk of contiguous elements (all of the same type), fixed in size and location.<br>
<br>
3) Array like pointers can't be initialized at definition like arrays.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>char</var> car[3]={<kbd>'a'</kbd>,<kbd>'b'</kbd>,66}; 
<var>char</var>* cpt=<var>new</var> <var>char</var>[3]; <cite>//No way to be initialized here. </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
4) When we allocate memory for a pointer to use it as a dynamic array. The memory can be resized or freed later. But this is not the case for arrays.<br>
<br>
For example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>char</var>* pta=<var>new</var> <var>char</var>[12];
<cite>//Using pta</cite>
<var>delete</var>[] pta;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
 <br>
<br>
3) They produce different assembly code. Look and compare:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td>
<td class="source"><pre><code><var>int</var> main()
{ 
	<var>char</var> arr[3];
	<var>char</var>* ptr=<var>new</var> <var>char</var>[3];

	arr[0]=<kbd>'C'</kbd>;   <cite>//Assembly is for this.  </cite>
	ptr[0]=<kbd>'p'</kbd>;   <cite>//And for this.</cite>

	<var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Will have an assembly like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code>arr[0]=<kbd>'C'</kbd>;
            mov         byte ptr [ebp-4],43h  <cite>//The code for putting one character in an array</cite>

ptr[0]=<kbd>'p'</kbd>;
            mov         ecx,dword ptr [ebp-8]  <cite>//The two line code for putting one character</cite>
            mov         byte ptr [ecx],70h     <cite>//in a place where a pointer points to  </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Hope to be useful...<br>
<br>
Refferences:<br>
<a href="../../../67.40.109.61/torek/c/index.html">http://67.40.109.61/torek/c/index.html</a> <br>
<a href="../../../c-faq.com/questions.html">http://c-faq.com/questions.html</a>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','NUCRko23');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../ovr0/contact.doreferrerwww.cplusplus.com_252farticles_25~19.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='EU75fSEw')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgianucrko23.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgianucrko23'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
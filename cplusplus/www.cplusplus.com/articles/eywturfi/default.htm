<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/eywturfi/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Random number generator - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Random number generator</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/mohamed_fouad/default.htm" rel="author">Mohamed Fouad</a></b></div>
<div id="I_date">Jan 17, 2012 (last update: Jan 17, 2012)</div>
<h1>Random number generator</h1>
<div id="I_score">Score: 4.1/5 (988 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<H3>Random Number Generation:</H3>
<br>
Let's dive into a hopefully entertaining topic which is random number generation provided by the C standard library.<br>
First of all why would we need to generate random numbers in our programs?<br>
I believe that these numbers are really helpful in simulation and games.<br>
<br>
C provides random number generation function rand() that is found in &lt;stdlib.h&gt; header.<br>
<br>
consider the following C statement:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>i = rand();</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The rand function generates an integer between 0 and RAND_MAX<br>
(a constant defined in the &lt;stdlib.h&gt; header).<br>
Standard C states that the value of RAND_MAX must be at least 32767, which is the maximum value for a two-byte (i.e., 16-bit) integer.<br>
<br>
The value of the RAND_MAX differs from one compiler to another you can check the exact value of the RAND_MAX for your compiler simply by the following code.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdlib.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<cite>/* function main begins program execution */</cite>
<var>int</var> main() {

	printf(<kbd>"%d"</kbd>, RAND_MAX);
	<var>return</var> 0; <cite>/* indicates successful termination */</cite>
} <cite>/* end main */</cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
On my GNU C compiler the RAND_MAX was:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
2147483647
</samp></pre></td></tr></table></div>
<br>
And on my Visual C++ compiler the RAND_MAX was:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
32767
</samp></pre></td></tr></table></div>
<br>
There is an equal probability (chance) that each number from 0 to RAND_MAX gets chosen each time rand function is called.<br>
The range of values produced directly by rand is often different from what is needed in a specific application.<br>
For example:<br>
<UL>
<LI>A game that has coins tossed by the computer needs to have 2 values lets say either a 0 or 1.</LI>
<LI>A game that has a dice with 6 faces and the computer has to throw the dice for the player to get a number from 1 to 6</LI>
<UL>
<br>
To demonstrate rand, let’s develop a program to simulate 20 rolls of a six-sided die and print the value of each roll. The function prototype for function rand is in &lt;stdlib.h&gt;.<br>
We use the remainder operator (%) with rand as follows:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>rand() %6</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
to produce integers from 0 to 5 and this is called <STRONG>scaling</STRONG> the number 6 is called the <STRONG>the scaling factor</STRONG>.<br>
We then <STRONG>shift</STRONG> the range of numbers produced by adding 1 to our previous result.<br>
<br>
Here is the complete program:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdlib.h&gt;</dfn>
<cite>/* function main begins program execution */</cite>
<var>int</var> main(<var>void</var>) {
	<var>int</var> i; <cite>/* counter */</cite>
	<cite>/* loop 20 times */</cite>
	<var>for</var> (i = 1; i &lt;= 20; i++) {
		<cite>/* pick random number from 1 to 6 and output it */</cite>
		printf(<kbd>"%d "</kbd>, 1 + (rand() % 6));
		<cite>/* if counter is divisible by 5, begin new line of output */</cite>
		<var>if</var> (i % 5 == 0) {
			printf(<kbd>"\n"</kbd>);
		} <cite>/* end if */</cite>
	} <cite>/* end for */</cite>
	<var>return</var> 0; <cite>/* indicates successful termination */</cite>
} <cite>/* end main */</cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The output of these numbers differ from one compiler to another remember it is supposed to be <STRONG>random</STRONG> but here is the output I got:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
2 5 4 2 6
2 5 1 4 2
3 2 3 2 6
5 1 1 5 5

</samp></pre></td></tr></table></div>
<br>
To show that these numbers occur approximately with equal likelihood, let’s simulate 6000 rolls of a die with the program above so we should say that each number from 1 to 6 should appear approximatly 1000 times.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdlib.h&gt;</dfn>
<cite>/* function main begins program execution */</cite>
<var>int</var> main(<var>void</var>) {
	<var>int</var> frequency1 = 0; <cite>/* rolled 1 counter */</cite>
	<var>int</var> frequency2 = 0; <cite>/* rolled 2 counter */</cite>
	<var>int</var> frequency3 = 0; <cite>/* rolled 3 counter */</cite>
	<var>int</var> frequency4 = 0; <cite>/* rolled 4 counter */</cite>
	<var>int</var> frequency5 = 0; <cite>/* rolled 5 counter */</cite>
	<var>int</var> frequency6 = 0; <cite>/* rolled 6 counter */</cite>
	<var>int</var> roll; <cite>/* roll counter, value 1 to 6000 */</cite>
	<var>int</var> face; <cite>/* represents one roll of the die, value 1 to 6 */</cite>
	<cite>/* loop 6000 times and summarize results */</cite>
	<var>for</var> (roll = 1; roll &lt;= 6000; roll++) {
		face = 1 + rand() % 6; <cite>/* random number from 1 to 6 */</cite>
		<cite>/* determine face value and increment appropriate counter */</cite>
		<var>switch</var> (face) {
		<var>case</var> 1: <cite>/* rolled 1 */</cite>
			++frequency1;
			<var>break</var>;
		<var>case</var> 2: <cite>/* rolled 2 */</cite>
			++frequency2;
			<var>break</var>;
		<var>case</var> 3: <cite>/* rolled 3 */</cite>
			++frequency3;
			<var>break</var>;
		<var>case</var> 4: <cite>/* rolled 4 */</cite>
			++frequency4;
			<var>break</var>;
		<var>case</var> 5: <cite>/* rolled 5 */</cite>
			++frequency5;
			<var>break</var>;
		<var>case</var> 6: <cite>/* rolled 6 */</cite>
			++frequency6;
			<var>break</var>; <cite>/* optional */</cite>
		} <cite>/* end switch */</cite>
	} <cite>/* end for */</cite>
	<cite>/* display results in tabular format */</cite>
	printf(<kbd>"%s%13s\n"</kbd>, <kbd>"Face"</kbd>, <kbd>"Frequency"</kbd>);
	printf(<kbd>"1%13d\n"</kbd>, frequency1);
	printf(<kbd>"2%13d\n"</kbd>, frequency2);
	printf(<kbd>"3%13d\n"</kbd>, frequency3);
	printf(<kbd>"4%13d\n"</kbd>, frequency4);
	printf(<kbd>"5%13d\n"</kbd>, frequency5);
	printf(<kbd>"6%13d\n"</kbd>, frequency6);
	<var>return</var> 0; <cite>/* indicates successful termination */</cite>
} <cite>/* end main */</cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
 <br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Face    Frequency
1          980
2          993
3         1030
4         1009
5         1002
6          986

</samp></pre></td></tr></table></div>
<br>
<br>
Of course I could have made that code much smaller and more elegant using an array containing the 6 heads for the dice but I am trying to make the codes as simple as possible for beginner C programmers as well.<br>
<br>
So we see that each face was chosen nearly 1000 times.<br>
<br>
<STRONG>Notice that there is a problem with the above programs is that if you run any of the above programs again you will find that it produces the same numbers </STRONG> and I am going to explain this in the next section.<br>
<br>
<br>
Function rand actually generates pseudorandom numbers. Calling rand repeatedly<br>
produces a sequence of numbers that appears to be random. <br>
However, the sequence repeats itself each time the program is executed this can help you debug your program that uses rand function.<br>
Once a program has been thoroughly debugged, it can be conditioned to produce a different sequence of random numbers for each execution. <br>
This is called randomizing and is and that can be done using the standard library function <STRONG>srand</STRONG>. <br>
Function srand takes an unsigned integer as a parameter and seeds function rand to produce a different sequence of random numbers for each execution of the program.<br>
<br>
I do explain how to use srand function in the next example code:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdlib.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>

<cite>/* function main begins program execution */</cite>
<var>int</var> main(<var>void</var>) {
	<var>int</var> i; <cite>/* counter */</cite>
	<var>unsigned</var> seed; <cite>/* number used to seed random number generator */</cite>

	printf(<kbd>"Enter seed: "</kbd>);
	scanf(<kbd>"%u"</kbd>, &amp;seed); <cite>/* note %u for unsigned */</cite>

	srand(seed); <cite>/* seed random number generator */</cite>
	<cite>/* loop 10 times */</cite>
	<var>for</var> (i = 1; i &lt;= 10; i++) {

		<cite>/* pick a random number from 1 to 6 and output it */</cite>
		printf(<kbd>"%10d"</kbd>, 1 + (rand() % 6));

		<cite>/* if counter is divisible by 5, begin a new line of output */</cite>
		<var>if</var> (i % 5 == 0) {
			printf(<kbd>"\n"</kbd>);
		} <cite>/* end if */</cite>
	} <cite>/* end for */</cite>

	<var>return</var> 0; <cite>/* indicates successful termination */</cite>
} <cite>/* end main */</cite>
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Here are 3 different runs of the program:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Enter seed:3
         1         3         1         2         6
         4         3         2         2         1
</samp></pre></td></tr></table></div>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Enter seed:200
         2         1         5         6         1
         2         2         5         3         5
</samp></pre></td></tr></table></div>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Enter seed:3
         1         3         1         2         6
         4         3         2         2         1
</samp></pre></td></tr></table></div>
<br>
<STRONG>Note that when I re-entered the number 3 again in the last run it produced the same numbers as the first run because the seed values are equal.</STRONG>
<br>
Now if we want to randomize using a seed but not have to enter the seed each time we execute the program we can write something like this:<br>
<br>
<span class="auto"><code class="source">srand( time( NULL ) );</code></span>
<br>
This causes the computer to read its clock to obtain the value for the seed automatically.<br>
Function time returns the number of seconds that have passed since midnight on January 1, 1970. This value is converted to an unsigned integer and used as the seed to the random number generator. <br>
Function time takes NULL as an argument and it is found in the header time.h<br>
<br>
Now it is time for the final step in our dice rolling program is to randomize the numbers without having to enter the seed.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdlib.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;time.h&gt;</dfn>

<cite>/* function main begins program execution */</cite>
<var>int</var> main(<var>void</var>) {
	<var>int</var> i; <cite>/* counter */</cite>

	srand(time(NULL)); <cite>/* seed random number generator */</cite>
	<cite>/* loop 10 times */</cite>
	<var>for</var> (i = 1; i &lt;= 10; i++) {

		<cite>/* pick a random number from 1 to 6 and output it */</cite>
		printf(<kbd>"%10d"</kbd>, 1 + (rand() % 6));

		<cite>/* if counter is divisible by 5, begin a new line of output */</cite>
		<var>if</var> (i % 5 == 0) {
			printf(<kbd>"\n"</kbd>);
		} <cite>/* end if */</cite>
	} <cite>/* end for */</cite>

	<var>return</var> 0; <cite>/* indicates successful termination */</cite>
} <cite>/* end main */</cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Each time you execute this program you will find a different sequence here is a two executions:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
         4         4         3         6         6
         2         6         4         3         3
</samp></pre></td></tr></table></div>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
        2         6         3         4         3
        3         5         4         5         6
</samp></pre></td></tr></table></div>
<br>
<STRONG>If you need any help in C/C++ you can contact me via:</STRONG>
<br>
<STRONG>Twitter:</STRONG> _mFouad<br>
<STRONG>By mail:</STRONG> mfouad91@gmail.com</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','EywTURfi');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~80.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='oSv4jE8b')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaeywturfi.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaeywturfi'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
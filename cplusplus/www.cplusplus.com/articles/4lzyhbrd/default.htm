<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/4lzyhbrd/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Bison Tracking - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Bison Tracking</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/albatross/default.htm" rel="author">Albatross</a></b></div>
<div id="I_date">May 8, 2010 (last update: May 10, 2010)</div>
<h1>Bison Tracking</h1>
<div id="I_score">Score: 3.8/5 (7 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<div class="center"><u><b><i>aka. How to create a parser in C++ without using Flex or Bison PART 1.</i></b></u></div>
<br>
Revision: 2nd<br>
<br>
Why the Fortran would anyone want to do this? (Pardon my language). It's because C++ parsers that you make yourself:<br>
<br>
<b>-Produce more human friendly code</b>
For starters, the files that Flex and Bison output can be very hard to understand, even if they do have some decent comments. This can make them hard to integrate into other programs. However, since you wrote most of this and hopefully read this article, you have an idea of what's going on.<br>
<br>
They also have a tendency of being large.<br>
<br>
<b>-Can have more tokens of lookahead when generating an LALR parser</b>
Bison supports only one token of lookahead when not generating a GLR parser. That means that if you have a grammar like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code>%{
	<dfn>#include &lt;stdio.h&gt;</dfn>
%}

%token AND PLOW HORSE MULE OX CART

%%
PHRASE : work_animal AND PLOW
	|	cart_animal AND CART
	;
 
cart_animal : HORSE
	|	MULE
	;
 
work_animal : HORSE	
	|	OX	
	;
%%</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
...Bison will not be able to create a parser out of it.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>girlfriend:~ albatross$ bison /Users/albatross/Desktop/impossible.y
/Users/albatross/Desktop/impossible.y: conflicts: 1 reduce/reduce
/Users/albatross/Desktop/impossible.y:16.15-19: warning: rule never reduced because of conflicts: work_animal: HORSE
girlfriend:~ albatross$
</samp></pre></td></tr></table></div>
<br>
If you eliminate all instances of AND, Bison will happily chew it up with no problems. That's one token of lookahead. Sometimes, you will need more than that.<br>
<br>
<b>-Are far more customizable</b>
Let your imagination run wild on this one.<br>
<br>
<br>
This article will teach you how to create a simple arithmetic parser, which you may then use as a framework for other parsers. So sit back, get a cup of something to drink and keep you awake through my inconsequential ramblings of redundancy, and enjoy those ramblings... OR ELSE!<br>
<br>
Prerequisites:<br>
Must be VERY familiar with the C++ standard library (especially deques and strings), and understand C++/ENGLISH (in other words, be a semi-experienced C++ programmer).<br>
<br>
Oh, and you must know what Flex and Bison are, what they generate, and how to use them.<br>
<br>
<b>WANRING</b>: "Evil" features of C++ may be used in this article. If you do not feel comfortable with using said techniques, you may now kiss the bride and then forever hold your peace. (out)<br>
<br>
<i><b>-General idea</b></i>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code> <var>using</var> <var>namespace</var> std;

<cite>//Given this struct:</cite>
<var>struct</var> uraldamage
{
   deque&lt;<var>float</var>&gt; deque1;
   deque&lt;<var>int</var>&gt; deque2;
   deque&lt;<var>bool</var>&gt; isoper;
   <var>int</var> charcount;
   <var>int</var> prioritycount;
   <var>int</var> maxpriority;
};

<cite>//Your program should be structured like this:</cite>
<var>int</var> preprocess(string &amp; stringtheory);
<var>int</var> lexer(string &amp; kitten, uraldamage &amp; groindamage);
<var>int</var> parser(uraldamage &amp; donotusethisasavariablename);
<var>int</var> main()
{
   cout&lt;&lt;<kbd>"Gimme an arithmetic problem!\n"</kbd>;
   uraldamage data;
   string storeage;
   getline(cin, storeage, <kbd>'='</kbd>);
   preprocess(storeage);
   lexer(storeage, data);
   parser(data);
   cout &lt;&lt; data.deque1.front();
   <var>return</var> 1337;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Reading from files will be discussed in the next part.<br>
<br>
NOTE: We're using deques instead of maps for a reason. Can you guess what it is?<br>
<br>
<i><b>-Your Preprocessor</b></i>
This is just a simple lexer and occasionally parser that will make your code a bit easier to understand for your main lexer. It's always a good idea to have one; it makes your code more readable.<br>
<br>
In this case, we want to get rid of all the white spaces and commas; our grammar doesn't need 'em. Just use cctype's <span class="auto"><code class="source">iswhitespace(a_char);</code></span> along with a counter <span class="auto"><code class="source">a_char==<kbd>','</kbd>;</code></span> to determine which characters to erase(counter,1). Return zero.<br>
<br>
<i><b>-Your Lexer</b></i>
<br>
A parser without a lexer is like a banana split with a pickle instead of a banana (eww).<br>
<br>
Here, we are converting our string into tokens: little bits of data that have a value associated with them that our parser can manage better.<br>
<br>
Note: when I say read into a deque, I mean use push_back().<br>
G#: when I say delete from a deque, I mean use erase().<br>
First counter/integer refers to groindamage.charcount.<br>
Second counter/integer refers to groindamage.prioritycount.<br>
Third counter/integer refers to groindamage.maxpriority.<br>
<br>
First, check if the first character in the string is a minus sign. If it is, then add a zero just before it, then read 0 and the ASCII value of '-' into deque1, 4 and 4 into deque2, and false and true into isoper. Then delete the minus sign in the string, and continue. You will also need to ensure that the next token gets a value of 3 instead of 0 (see later). <br>
<br>
If you didn't find the minus, skip that bit.<br>
<br>
Use find_first_of("+-*/%^()") to determine the location of the first operator. Store it in the first integer. Then, use atof() to read everything from the first character to but excluding that first operator into deque1. Read 0 into deque2, and false into isoper. <br>
<br>
Then read the next character's ASCII value into deque 1, 0 into deque2, and true into isoper. <br>
<br>
Then erase everything in your string up to and including your operator. Repeat until your string is empty, then return zero.<br>
<br>
<i><b>-Your Parser</b></i>
<br>
Now for the fun bits. Anyone who has done any arithmetic will know that multiplication holds priority over addition and subtraction. They will also know that raising something to a power holds priority over multiplication, and that statements in parenthesis are always evaluated first. Those of us who are also looking carefully will notice that we also need to ensure that multiplication by minus one must occur before any of these operations, and that in our current system it will not happen first but rather LAST. Now we know why we had deque2: to determine the order of operations.<br>
<br>
You will need to run over the contents of deque1, and clear out any parenthesis. Read token by token, setting the value of the corresponding element of deque2 to the value of prioritycounter + its original value (which should have been intialized to zero... is it too late to tell you that?).<br>
<br>
If at any point, prioritycounter &gt; maxpriority, then maxpriority = prioritycounter.<br>
<br>
If you see an addition or subtraction sign, then set the corresponding deque2 value to (original value + 0 + prioritycounter).<br>
<br>
If you see a multiplication or division or modulo sign, then set the corresponding deque2 value to (original value + 1 + prioritycounter).<br>
<br>
If you see a power sign, then set the corresponding deque2 value to (original value + 2 + prioritycounter).<br>
<br>
If you see an opening parenthesis, increment prioritycounter by three, and delete the token.<br>
<br>
If you see a closing parenthesis, decrement prioritycounter by three, and delete the token.<br>
<br>
Once that's done, the parser is going to run through the program (maxpriority + 1) times, starting from the tokens that have the highest deque2 value. It will evaluate an expression in deque1 that has values in isoper of <span class="auto"><code class="source"><var>false</var> <var>true</var> <var>false</var></code></span>, and evaluate it to get a float back out. It will then eliminate those three elements using erase, and write in their place to deque1 the resulting float, in deque 2 the original priority minus one, and to isoper false.<br>
<br>
When the end of the deque is reached, scan and evaluate the next lower priority level.<br>
<br>
When you get to priority 0, then you can just proceed linearly, evaluating three tokens, pop_front()ing them, and push_fronting the resulting value and restarting the operation. When your deques all reduce to a size of one, then return zero.<br>
<br>
<i><b>-Afterward</b></i>
<br>
The first time you compile this, you might get loads of fatal errors. Take your time and work through them; this was no easy task. The good news is that the worst is over now that you created your first parser: You have a framework for creating new parsers from that. <br>
<br>
If this article is popular enough, I will create a second article on parsing a more human language, and while I'm at it solve the tokens of lookahead problem.<br>
<br>
This article is subject to change without notice.<br>
<br>
-Albatross<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','4LzyhbRD');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~108.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='N17f92yv')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia4lzyhbrd'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia4lzyhbrd'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
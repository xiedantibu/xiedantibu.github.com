<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/ituq5di1/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>MemCache++: An example of modern C++ des - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">MemCache++: An example of modern C++ des</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/issaml/default.htm" rel="author">issaml</a></b></div>
<div id="I_date">Jan 3, 2014 (last update: Jan 6, 2014)</div>
<h1>MemCache++: An example of modern C++ design</h1>
<div id="I_score">Score: 4.3/5 (18 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<p><a href="../../../mikhailberis.github.com/memcachepp/default.htm" title="MemCache++">MemCache++</a> is a light-weight, type-safe, simple to use and full-featured Memcache client.<br>
It was developed by Dean Michael Berris who is a C++ fanatic, loves working on network libraries <a href="../../../www.cpp-netlib.github.com/default.htm">(cpp-netlib.github.com)</a>, and currently works at Google Australia. He also is part of the Google delegation to the ISO C++ Committee. You can read more of his published works at <a href="deanberris.github.com">deanberris.github.com</a> and his C++ blog at <a href="../../../www.cplusplus-soup.com/default.htm">www.cplusplus-soup.com</a>.<br>
</p>
Studying the well designed libraries is recommended to master C++ concepts, and the goal of this article is to discover some memcache++ design choices that makes it easy to understand and use.<br>
<br>
<p>Let's discover the memcache++ design by analyzing it with <a href="../../../www.cppdepend.com/default.htm">CppDepend</a>. </p>
<br>
<h3>Namespace Modularity</h3>  <br>
Namespaces represents a good solution to modularize the application, unfortunately this artifact is not enough used in the C++ projects, just a look at a random open source C++ projects show us this fact.And more than that when We search for C++ namespace definition  the common one is like that:  <br>
<br>
<Pre >
A namespace defines a new scope. They provide a way to avoid name collisions.
</pre>
<br>
Many times the collision is shown as the first motivation, and not the modularity unlike for C# and Java where namespaces are more quoted to modularize the application.<br>
However Some modern C++ libraries like boost use the namespaces to structure well the library and encourage developers to use them.<br>
<br>
What about the namespace modularity of memcache++?<br>
<br>
Here's the dependency graph between memcache++ namespaces:<br>
<br>
<p><IMG src="namespaces1.png" alt="" title="namespaces" width="600" height="269">
<br>
The namesapces are used for two main reasons:<br>
<ul>
<li> Modualrize the library.</li>
<li> Hide details like "memcache::detail" namespace, this approach could be very interesting if we want  to inform the library user that he dont need to use directly types inside this namesapce. For C#  the "internal" keyword did the job, but in C++ there's no way to hide public types to the library user.</li>
<br>
memcache++ exploit gracefully the namespace concept,however a dependency cycle exist between memcache and memcache::detail.We can remove this dependency cycle by searching types used by memcache::detail from memcache.<br>
<br>
For that we can execute the following CQlinq request:<br>
<Pre >
from t in Types where t.IsUsedBy("memcache.detail") 
&amp;&amp; t.ParentNamespace.Name=="memcache"
select new { t,t.TypesUsingMe }</pre>
<br>
Here's the result after executing the request:<br>
<br>
<IMG src="dependency11.png" alt="" title="dependency" width="600" height="468">
<br>
To remove the dependency cycle we can move pool_directive and server_pool_test to memcache.<br>
<br>
<h3>Generic or OOP?</h3>  <br>
In the C++ world two schools are very popular : Object Oriented Programming and Generic programming, each approach has their advocates, this <a href="../../../www.artima.com/cppsource/type_erasure.html">article</a> explain the tension between them.<br>
<br>
What the approach used by memcache++?<br>
<br>
To answer this question Let's search first for Generic types:<br>
<br>
<Pre >
from t in Types where t.IsGeneric &amp;&amp; !t.IsThirdParty select t 
</pre>
<br>
<IMG src="generic1.png" alt="" title="generic" width="377" height="335">
<br>
<br>
What about the not generic ones:<br>
<br>
<Pre >
from t in Types where !t.IsGeneric &amp;&amp; !t.IsGlobal &amp;&amp; !t.IsNested 
&amp;&amp; !t.IsEnumeration  &amp;&amp; t.ParentProject.Name=="memcache"
select t
</pre>
<br>
<br>
<IMG src="notgeneric1.png" alt="" title="notgeneric" width="312" height="328">
<br>
Almost all not generic types concern exception classes, and to have a better idea of their use proportion, the treemap view is very useful.<br>
<br>
<IMG src="notgenerictreemap1.png" alt="" title="notgenerictreemap" width="600" height="293">
<br>
The blue rectangles represents the result of the CQLinq query, and as we can see only a minimal part of the libray are related to the not generic types.<br>
<br>
Finally we can search for generic methods:<br>
<br>
<Pre >
from m in Methods where m.IsGeneric &amp;&amp; !m.IsThirdParty select m
</pre>
<br>
<IMG src="genericmethods1.png" alt="" title="genericmethods" width="354" height="312">
<br>
As we can observe memcache++ use mostly generics, but it's not sufficient to confirm that it follow the C++ generic approach.To check that a good indicator is the use of inheritence and dynamic polymorphism, indeed OOP use them mostly , however for the generic approach using inheritence is very limited and the dynamic polymorphism is avoided.<br>
<br>
Let's search for types having base classes.<br>
<br>
<Pre >
from t in Types where t.BaseClasses.Count()&gt;0 &amp;&amp; !t.IsThirdParty 
&amp;&amp; t.ParentProject.Name=="memcache"
select t
</pre>
<br>
<br>
<IMG src="inheritence1.png" alt="" title="inheritence" width="364" height="399">
<br>
It's normal that exceptions classes use inheritence but what about the other classes? did they use inheritence for  dynamic polymorphism purpose? to answer this question let's search for all virtual methods.<br>
<br>
<br>
<Pre >
from  m in Methods where m.IsVirtual select m
</pre>
<br>
<br>
<IMG src="virtual1.png" alt="" title="virtual" width="350" height="130">
<br>
Only exception class  has a virtual method, and for the other few  classes using inheritence the main motivation is to reuse the code of the base class.<br>
<br>
If the dynamic polymorphism is not used, what's the solution adopted if we need another behavior for a specific classes?<br>
<br>
The common solution for the generic approach is to use Policies.Here's a short definition from wikipedia<br>
<br>
"The central idiom in policy-based design is a class template(called the host class),taking several type parameters as input, which are instantiated with types selected by the user (called policy classes), each implementing a particular implicit interface (called a policy)."<br>
<br>
memcache++ has many policies inside memcache.policies namespace.<br>
<br>
<IMG src="policies21.png" alt="" title="policies" width="330" height="145">
<br>
Let's discover an example from memcache++ to understand better the policy based design.<br>
memcache++ use the type basic_handle to implement all commands like add, set, get and delete from the cache.This class is defined like that:<br>
<br>
<br>
<Pre >
    template &lt;
        class threading_policy = policies::default_threading, 
        class data_interchange_policy = policies::binary_interchange,
        class hash_policy = policies::default_hash
    &gt;
    struct basic_handle 
</pre>
<br>
The memcache++  is thread safe and for the multithreaded context have to manage synchronisation, by default the threading_policy is "default_threading" where no special treatement is required, however for multithreading the policy used is "boost_threading".<br>
<br>
Let's take a look to connect method implementation.<br>
<Pre >
    void connect(boost::uint64_t timeout = MEMCACHE_TIMEOUT) { 
       typename threading_policy::lock scoped_lock(*this);
       for_each(servers.begin(), servers.end(), connect_impl(service_, timeout));
    };
</pre>
<br>
<br>
If threading_policy is "default_threading" , the first line has no effect because the lock constructor did nothing, however if it's the boost_threading one, lock use boost to synchronize between threads.<br>
<br>
Using policies give us more flexibility to implement different behaviors, and it's not very difficult to understand and use.<br>
<br>
<br>
<h3>Generic Functors</h3>
<br>
memcache++ implement many commands to interact with the cache like add,get,set and delete.The command pattern is a good candidate for such case.<br>
memcache++ implement this pattern by using generic functors, here's a CQLinq queries to have all functors:<br>
<br>
<Pre >
from t in Types where t.Methods.Where(a=&gt;a.IsOperator 
&amp;&amp; a.Name.Contains("()")).Count()&gt;0
select t
</pre>
<br>
<br>
<IMG src="functors1.png" alt="" title="functors" width="347" height="386">
<br>
Functor encapsulate a function call, with its state, and it can be used to defer call to a later times, and act as callback.Generic functors gives more flexibility to normal functors.<br>
<br>
<br>
<h3>Interface exposed</h3>
How the library expose it's capabilities is very important, it impact its flexibility and its easy of use.<br>
<br>
To discover that let's search for the communication between the test project and the memcache++ library.<br>
<br>
<br>
<Pre >
from m in Methods where m.IsUsedBy ("test")
select m 
</pre>
<br>
<br>
<IMG src="interface1.png" alt="" title="interface" width="360" height="395">
<br>
The test project use mainly generic methods to invoke memcache++ functionalities. What the benefits using template methods , why not use classes or functions?<br>
<br>
For POO approach  the library interface is composed of classes and functions, and for well designed ones Abstract classes are used as contracts to enforce low coupling, this solution is very interesting but have  some drawbacks:<br>
<br>
- The interface become more complicated and can change many times: to explain that let's take as example the add  method exposed by memcache++, if we dont use generic approach many methods must be added, each one for a specific type int,double,string,... <br>
However  the generic add method is declared like that add&lt;T&gt; where T is the type, and in this case  we need only one method, and even we want to add another type no change requiered in the interface.<br>
<br>
- The interface is less flexible: if for example we expose a method like this <br>
 calculte(IAlgo* algo).<br>
 <br>
The user must give a class inhereting from IAlgo , however if we use generic and define it like that calculate&lt;T&gt; , the user have only to provide a class with methods needed and not necessarilly inherit from IAlgo, and if IAlgo change to IAlgo2 because some methods are added  , the user of this library will not be impacted.<br>
<br>
Ideally the interface exposed by a library must not have any breaking changes, and the user have not to be impacted when changes are introduced in the library. generic approach is the most suitable for such constraints because it's very tolerent when changes are needed.  <br>
<br>
<br>
<h3>External API used</h3>
Here are the external types used by memcache++<br>
<br>
<IMG src="externals11.png" alt="" title="externals" width="380" height="319">
<br>
memcache++ use mostly boost and STL to acheive its needs,here are some boost features used:<br>
- multithreading.<br>
- algorithm.<br>
- spirit.<br>
- asio.<br>
- unit testing.<br>
And of course the well known shared_ptr for RIIA idiom.<br>
<br>
And from STL  the containers are mostly used.<br>
<br>
<h3>So finally what The advantages of using the generic approach?</h3>
<br>
- The first indicator of the efficency of memcache++ design choices is the Line number of code(LOC) where is only arround 600 lines of code, this result is due to two main reasons:<br>
<br>
         - using  generic approach remove boilerplate code.<br>
         - using the richness of boost and stl.<br>
<br>
- The second force is it's flexibiliy , and any changes will impact only a minimal portion of code.<br>
<br>
Drawbacks of using this kind of approach:<br>
<br>
Many developers found that the generic approach is very complicated , and understanding the code became very difficult.<br>
<br>
What's to do? use or not the generic approach?<br>
<br>
If it's very difficult to design an application with this appraoch ,but it's more easy to use librairies using  it, like using STL or boost.<br>
So even if we want to avoid the risk of designing the application with the modern approach, it will be a good idea to use libraries like STL or boost.<p>Attachments:
	[<a href="dependency11.png">dependency1[1].png</a>]
	[<a href="externals11.png">externals1[1].png</a>]
	[<a href="functors1.png">functors[1].png</a>]
	[<a href="genericmethods1.png">genericmethods[1].png</a>]
	[<a href="generic1.png">generic[1].png</a>]
	[<a href="inheritence1.png">inheritence[1].png</a>]
	[<a href="interface1.png">interface[1].png</a>]
	[<a href="namespaces1.png">namespaces[1].png</a>]
	[<a href="notgenerictreemap1.png">notgenerictreemap[1].png</a>]
	[<a href="notgeneric1.png">notgeneric[1].png</a>]
	[<a href="policies21.png">policies2[1].png</a>]
	[<a href="virtual1.png">virtual[1].png</a>]
</p>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','iTUq5Di1');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~71.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='j35jE3v7')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaituq5di1'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaituq5di1'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/3ucrko23/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>C++ LAPACK - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">C++ LAPACK</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/turbozedd/default.htm" rel="author">turbozedd</a></b></div>
<div id="I_date">Sep 17, 2009 (last update: Sep 21, 2009)</div>
<h1>C++ LAPACK</h1>
<div id="I_score">Score: 4.0/5 (11 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
The following is a framework for using LAPACK with C++.<br>
<br>
For more information checkout the LAPACK forums:<br>
<a href="../../../icl.cs.utk.edu/lapack-forum/default.htm">http://icl.cs.utk.edu/lapack-forum/</a>
<br>
And the netlib repository<br>
<a href="../../../www.netlib.org/clapack/default.htm">http://www.netlib.org/clapack/</a>
<br>
There are compile/install details at the above sites for CLAPACK and BLAS.<br>
<br>
Compile commands for test program (executable 'fmat'):<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code>CLAPACKPATH = path to clapack
g++  Fmatrix_test.cpp -I$(CLAPACKPATH)/SRC -I$(CLAPACKPATH) -c
g++  Fmatrix_test.o -o fmat $(CLAPACKPATH)/lapack_LINUX.a $(CLAPACKPATH)/blas_LINUX.a $(CLAPACKPATH)/F2CLIBS/libf2c.a -lm
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Matrix class: this is just a container-- all c++<br>
We use a template to store the different data types allowed by LAPACK.<br>
<br>
The matrix "data" (the <i>mat</i> member) is a one dimensional array, it must be this way so that it is usable to FORTRAN.<br>
This means we have to keep track of our location in the matrix. <span class="auto"><code class="source">A&lt;i&gt;[j]</code></span> is given by <span class="auto"><code class="source">A[ j*m+i ]</code></span> where m is the number of rows.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef _FMATRIX_H</dfn>
<dfn>#define _FMATRIX_H</dfn>

<dfn>#include&lt;iostream&gt;</dfn>

<var>template</var> &lt;<var>class</var> T&gt;
<var>class</var> Fmatrix
{
<var>public</var>:
    <cite>//default</cite>
    Fmatrix(): m(0), n(0), flag(0), mat(<var>new</var> T[0]){ <var>this</var>-&gt;settype(); }
    <cite>//blank</cite>
    Fmatrix(size_t _m): m(_m), n(1), flag(0), mat(<var>new</var> T[_m]){ <var>this</var>-&gt;settype(); }
    Fmatrix(size_t _m, size_t _n): m(_m), n(_n), flag(0), mat(<var>new</var> T[_m*_n])
    { <var>this</var>-&gt;settype(); }
    <cite>//copy</cite>
    Fmatrix(<var>const</var> Fmatrix&lt;T&gt;&amp; B) :
    m(B.numrows()), n(B.numcols()), mat(<var>new</var> T[B.numelms()])
    {
        <var>for</var>(size_t i=0; i&lt;B.numelms(); i++){ <var>this</var>-&gt;mat&lt;i&gt; = B&lt;i&gt;; }
        <var>this</var>-&gt;type=B.gettype();
    }

    ~Fmatrix(){ <var>if</var>(mat) <var>delete</var>[] mat; }

    <var>inline</var> T&amp; <var>operator</var>() (size_t i, size_t j)
    { <var>return</var> <var>this</var>-&gt;mat[j*(<var>this</var>-&gt;m)+i]; }
    <var>inline</var> T  <var>operator</var>() (size_t i, size_t j) <var>const</var>
    { <var>return</var> <var>this</var>-&gt;mat[j*(<var>this</var>-&gt;m)+i]; }

    <var>inline</var> T&amp; <var>operator</var>[] (size_t i)       { <var>return</var> mat&lt;i&gt;; }
    <var>inline</var> T  <var>operator</var>[] (size_t i) <var>const</var> { <var>return</var> mat&lt;i&gt;; }

    Fmatrix <var>operator</var> = (<var>const</var> Fmatrix&lt;T&gt;&amp; B)
    {
        <var>if</var>(&amp;B!=<var>this</var>){
            <var>delete</var>[] mat;
            <var>this</var>-&gt;m=B.numrows();
            <var>this</var>-&gt;n=B.numcols();
            <var>this</var>-&gt;flag=B.error();
            mat=<var>new</var> T[(<var>this</var>-&gt;m)*(<var>this</var>-&gt;n)];
            <var>for</var>(size_t i=0; i&lt;B.numelms(); i++){ <var>this</var>-&gt;mat&lt;i&gt; = B&lt;i&gt;;}
        }
        <var>return</var> *<var>this</var>;
    }
    <cite>//these (+-*/) won't work for complex</cite>
    Fmatrix <var>operator</var> += (<var>const</var> Fmatrix&lt;T&gt;&amp; B)
    {  <var>for</var>(size_t i=0; i&lt; <var>this</var>-&gt;numelms(); i++){ <var>this</var>-&gt;mat&lt;i&gt;+=B&lt;i&gt;; }  }
    Fmatrix <var>operator</var> -= (<var>const</var> Fmatrix&lt;T&gt;&amp; B)
    {  <var>for</var>(size_t i=0; i&lt; <var>this</var>-&gt;numelms(); i++){ <var>this</var>-&gt;mat&lt;i&gt;-=B&lt;i&gt;; }  }
    Fmatrix <var>operator</var> *= (<var>const</var> T alpha)
    {  <var>for</var>(size_t i=0; i&lt; <var>this</var>-&gt;numelms(); i++){ <var>this</var>-&gt;mat&lt;i&gt;*=alpha; }  }
    Fmatrix <var>operator</var> /= (<var>const</var> T beta)
    {  <var>for</var>(size_t i=0; i&lt; <var>this</var>-&gt;numelms(); i++){ <var>this</var>-&gt;mat&lt;i&gt;/=beta; }  }

    <var>inline</var> T* begin(){ <var>return</var> mat; }

    <var>inline</var> <var>const</var> size_t numrows() <var>const</var> { <var>return</var> <var>this</var>-&gt;m; }
    <var>inline</var> <var>const</var> size_t numcols() <var>const</var> { <var>return</var> <var>this</var>-&gt;n; }
    <var>inline</var> <var>const</var> size_t numelms() <var>const</var> { <var>return</var> (<var>this</var>-&gt;m)*(<var>this</var>-&gt;n); }
    <var>inline</var> <var>const</var> <var>bool</var>   error()   <var>const</var> { <var>return</var> <var>this</var>-&gt;flag; }
    <var>inline</var> <var>const</var> <var>char</var>   gettype() <var>const</var> { <var>return</var> <var>this</var>-&gt;type; }
    
    <var>void</var> print(std::ostream &amp;os=std::cout, <var>char</var> delim=<kbd>'\t'</kbd>)
    {
        <var>for</var>(size_t i=0;i&lt;<var>this</var>-&gt;m;i++){<var>for</var>(size_t j=0;j&lt;<var>this</var>-&gt;n;j++){
            os &lt;&lt; (*<var>this</var>)(i,j) &lt;&lt; delim;
        } os &lt;&lt; std::endl; } os &lt;&lt; std::endl;
    }
    
    <var>void</var> read(std::istream &amp;is=std::cin)
    {
        <var>for</var>(size_t i=0;i&lt;<var>this</var>-&gt;m;i++){<var>for</var>(size_t j=0;j&lt;<var>this</var>-&gt;n;j++){
            is &gt;&gt; (*<var>this</var>)(i,j);
        } }
    }

<var>private</var>:
    size_t m,n;
    T *mat;
    <var>char</var> type;
    <var>bool</var> flag;

    <var>inline</var> <var>const</var> <var>char</var> settype()
    {
        <var>char</var> tstr[20], otyp[]=<kbd>"czu"</kbd>;
        strcpy(tstr,<var>typeid</var>(T).name());
        <var>if</var>(tstr[0]==<kbd>'f'</kbd>||tstr[0]==<kbd>'d'</kbd>||tstr[0]==<kbd>'e'</kbd>) type=tstr[0];
        <var>else</var> <var>if</var>( strcmp(tstr,<kbd>"7complex"</kbd>)==0 )        type=otyp[0];
        <var>else</var> <var>if</var>( strcmp(tstr,<kbd>"13doublecomplex"</kbd>)==0 ) type=otyp[1];
        <var>else</var>                                         type=otyp[2];
    }
};

<dfn>#endif </dfn><cite>/* _FMATRIX_H */</cite><dfn></dfn>
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Linear Algebra Module: This hooks up with CLAPACK<br>
Note the extern for the includes, they are written in C.<br>
Most of the functions here call LAPACK functions, I add functionality as I need it (LAPACK is huge).<br>
To add a new function call to LAPACK you will need to look up the function on netlib or elsewhere to figure what you need to pass.<br>
To pass the matrix data use <span class="auto"><code class="source">myMatrix.begin()</code></span>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef _LINALG_H</dfn>
<dfn>#define _LINALG_H</dfn>

<dfn>#include &lt;cstdlib&gt;</dfn>
<dfn>#include &lt;cstdio&gt;</dfn>
<dfn>#include &lt;cmath&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>

<var>extern</var> <kbd>"C"</kbd> {
    <dfn>#include "f2c.h"</dfn>
    <dfn>#include "blaswrap.h"</dfn>
    <dfn>#include "clapack.h"</dfn>
}

<dfn>#include "Fmatrix.h"</dfn>

<cite>//these scalar ops (+-*/) won't work for complex</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>const</var> Fmatrix&lt;T&gt; <var>operator</var> + (<var>const</var> Fmatrix&lt;T&gt;&amp; A, <var>const</var> Fmatrix&lt;T&gt;&amp; B)
{  <var>return</var> Fmatrix&lt;T&gt;(A)+=B;  }
<var>template</var> &lt;<var>class</var> T&gt;
<var>const</var> Fmatrix&lt;T&gt; <var>operator</var> - (<var>const</var> Fmatrix&lt;T&gt;&amp; A, <var>const</var> Fmatrix&lt;T&gt;&amp; B)
{  <var>return</var> Fmatrix&lt;T&gt;(A)+=B;  }
<var>template</var> &lt;<var>class</var> T&gt;
<var>const</var> Fmatrix&lt;T&gt; <var>operator</var> * (<var>const</var> T alpha, <var>const</var> Fmatrix&lt;T&gt;&amp; A)
{  <var>return</var> Fmatrix&lt;T&gt;(A)*=alpha;  }
<var>template</var> &lt;<var>class</var> T&gt;
<var>const</var> Fmatrix&lt;T&gt; <var>operator</var> / (<var>const</var> Fmatrix&lt;T&gt;&amp; A, <var>const</var> T beta)
{  <var>return</var> Fmatrix&lt;T&gt;(A)/=beta;  }
<var>template</var> &lt;<var>class</var> T&gt;
<var>const</var> Fvector&lt;T&gt; <var>operator</var> * ( Fmatrix&lt;T&gt;&amp; A, Fvector&lt;T&gt;&amp; x)
{
    Fvector&lt;T&gt; y(A.numrows());
    gmv(A,x,y);
    <var>return</var> y;
}
<var>template</var> &lt;<var>class</var> T&gt;
<var>const</var> Fmatrix&lt;T&gt; <var>operator</var> * ( Fmatrix&lt;T&gt;&amp; A, Fmatrix&lt;T&gt;&amp; B)
{
    Fmatrix&lt;T&gt; C(A.numrows(),B.numcols());
    gmm(A,B,C);
    <var>return</var> C;
}

<var>template</var> &lt;<var>class</var> T&gt;
<var>int</var> gmv(Fmatrix&lt;T&gt;&amp; A, Fvector&lt;T&gt;&amp; x, Fvector&lt;T&gt;&amp; y, <var>char</var> TRANSA=<kbd>'N'</kbd>,
            T alpha=1, T beta=0, integer INCX=1, integer INCY=1)
{
    integer M, N, LDA;

    M=(TRANSA==<kbd>'N'</kbd>) ? A.numrows():A.numcols();
    N=(TRANSA==<kbd>'N'</kbd>) ? A.numcols():A.numrows();
    LDA=M;

    <cite>//this still needs a switch on data type</cite>
    dgemv_(&amp;TRANSA, &amp;M, &amp;N,
                        (doublereal*)&amp;alpha,
                        (doublereal*)A.begin(), &amp;LDA,
                        (doublereal*)x.begin(), &amp;INCX,
                        (doublereal*)&amp;beta,
                        (doublereal*)y.begin(), &amp;INCY);


}


<var>template</var> &lt;<var>class</var> T&gt;
<var>int</var> gmm(Fmatrix&lt;T&gt;&amp; A, Fmatrix&lt;T&gt;&amp; B, Fmatrix&lt;T&gt;&amp; C,
            <var>char</var> TRANSA=<kbd>'N'</kbd>, <var>char</var> TRANSB=<kbd>'N'</kbd>, T alpha=1, T beta=0)
{
    integer M, N, K, LDA, LDB, LDC;

    M=(TRANSA==<kbd>'N'</kbd>) ? A.numrows():A.numcols();
    N=(TRANSB==<kbd>'N'</kbd>) ? B.numcols():B.numrows();
    K=(TRANSA==<kbd>'N'</kbd>) ? A.numcols():A.numrows();
    LDA=(TRANSA==<kbd>'N'</kbd>) ? M:K;
    LDB=(TRANSB==<kbd>'N'</kbd>) ? K:N;
    LDC=C.numrows();

    <var>switch</var>(A.gettype()){<cite>//cast explicitly otherwise compiler is cranky</cite>
        <var>case</var> <kbd>'f'</kbd>:
            sgemm_(&amp;TRANSA, &amp;TRANSB, &amp;M, &amp;N, &amp;K,
                        (real*)&amp;alpha,
                        (real*)A.begin(), &amp;LDA,
                        (real*)B.begin(), &amp;LDB,
                        (real*)&amp;beta,
                        (real*)C.begin(), &amp;LDC);
        <var>break</var>;
        <var>case</var> <kbd>'d'</kbd>:
            dgemm_(&amp;TRANSA, &amp;TRANSB, &amp;M, &amp;N, &amp;K,
                        (doublereal*)&amp;alpha,
                        (doublereal*)A.begin(), &amp;LDA,
                        (doublereal*)B.begin(), &amp;LDB,
                        (doublereal*)&amp;beta,
                        (doublereal*)C.begin(), &amp;LDC);
        <var>break</var>;
        <var>case</var> <kbd>'c'</kbd>:
            cgemm_(&amp;TRANSA, &amp;TRANSB, &amp;M, &amp;N, &amp;K,
                        (complex*)&amp;alpha,
                        (complex*)A.begin(), &amp;LDA,
                        (complex*)B.begin(), &amp;LDB,
                        (complex*)&amp;beta,
                        (complex*)C.begin(), &amp;LDC);
        <var>break</var>;
        <var>case</var> <kbd>'z'</kbd>:
            zgemm_(&amp;TRANSA, &amp;TRANSB, &amp;M, &amp;N, &amp;K,
                        (doublecomplex*)&amp;alpha,
                        (doublecomplex*)A.begin(), &amp;LDA,
                        (doublecomplex*)B.begin(), &amp;LDB,
                        (doublecomplex*)&amp;beta,
                        (doublecomplex*)C.begin(), &amp;LDC);
        <var>break</var>;
        <var>default</var>:
            std::cout &lt;&lt; <kbd>"\nERROR: Something wrong in GMM switch.\n\n"</kbd>;
    }
    <var>return</var> 0;
}

<var>template</var> &lt;<var>class</var> T&gt;
<var>int</var> pca(Fmatrix&lt;T&gt;&amp; A, Fmatrix&lt;T&gt;&amp; U, Fmatrix&lt;T&gt;&amp; S, Fmatrix&lt;T&gt;&amp; PC)
{
   std::ofstream PCoutx(<kbd>"pcx"</kbd>), PCouty(<kbd>"pcy"</kbd>), PCoutz(<kbd>"pcz"</kbd>), PCoutw(<kbd>"pcw"</kbd>);
        PCoutx.precision(16); PCouty.precision(16);
        PCoutz.precision(16); PCoutw.precision(16);
        Fmatrix&lt;T&gt; Y(A.numcols(),A.numrows());
        T s,*mean;

        mean = <var>new</var> T[A.numrows()];
        <var>for</var>(<var>int</var> i=0; i&lt;A.numrows(); i++) mean&lt;i&gt;=0;

        <cite>//find means</cite>
        <var>for</var>(<var>int</var> i=0; i&lt;A.numrows(); i++){ <var>for</var>(<var>int</var> j=0; j&lt;A.numcols(); j++){
            mean&lt;i&gt;+=A(i,j);
        } }
        <var>for</var>(<var>int</var> i=0; i&lt;A.numrows(); i++) mean&lt;i&gt;/=A.numcols();

        <cite>//subtract means from data</cite>
        <var>for</var>(<var>int</var> i=0; i&lt;A.numrows(); i++){ <var>for</var>(<var>int</var> j=0; j&lt;A.numcols(); j++){
            A(i,j)-=mean&lt;i&gt;;
        } }

        <cite>//form matrix for SVD</cite>
        s=sqrt(A.numcols()-1);
        <var>for</var>(<var>int</var> i=0; i&lt;A.numrows(); i++){ <var>for</var>(<var>int</var> j=0; j&lt;A.numcols(); j++){
            Y(j,i)=A(i,j)/s;
        } }

        <var>return</var> svd(Y,U,S,PC);
}

<var>template</var> &lt;<var>class</var> T&gt;
<var>int</var> svd(Fmatrix&lt;T&gt;&amp; A, Fmatrix&lt;T&gt;&amp; U, Fmatrix&lt;T&gt;&amp; S, Fmatrix&lt;T&gt;&amp; V,
            <var>char</var> JOBU=<kbd>'A'</kbd>, <var>char</var> JOBVT=<kbd>'A'</kbd>)
{
    <var>float</var>  *wkf,*rwkc;
    <var>double</var> *wkd,*rwkz;
    complex *wkc;
    doublecomplex *wkz;
    integer M, N, mn, MN, LDA, LDU, LDVT, LWORK, INFO;

    M=A.numrows(); N=A.numcols(); LDA=M; LDU=M; LDVT=N;
    mn=min(M,N);
    MN=max(M,N);
    LWORK=2*max(3*mn+MN,5*mn);

    <var>switch</var>(A.gettype()){<cite>//cast explicitly otherwise compiler is cranky</cite>
        <var>case</var> <kbd>'f'</kbd>:
            wkf = <var>new</var> real[LWORK];
            sgesvd_(&amp;JOBU, &amp;JOBVT, &amp;M, &amp;N,
                        (real*)A.begin(), &amp;LDA,
                        (real*)S.begin(),
                        (real*)U.begin(), &amp;LDU,
                        (real*)V.begin(), &amp;LDVT,
                        wkf, &amp;LWORK, &amp;INFO);
            <var>delete</var>[] wkf;
        <var>break</var>;
        <var>case</var> <kbd>'d'</kbd>:
            wkd = <var>new</var> doublereal[LWORK];
            dgesvd_(&amp;JOBU, &amp;JOBVT, &amp;M, &amp;N,
                        (doublereal*)A.begin(), &amp;LDA,
                        (doublereal*)S.begin(),
                        (doublereal*)U.begin(), &amp;LDU,
                        (doublereal*)V.begin(), &amp;LDVT,
                        wkd, &amp;LWORK, &amp;INFO);
            <var>delete</var>[] wkd;
        <var>break</var>;
        <var>case</var> <kbd>'c'</kbd>:
            wkc = <var>new</var> complex[LWORK];
            rwkc = <var>new</var> real[5*mn];
            cgesvd_(&amp;JOBU, &amp;JOBVT, &amp;M, &amp;N,
                        (complex*)A.begin(), &amp;LDA,
                        (real*)S.begin(),
                        (complex*)U.begin(), &amp;LDU,
                        (complex*)V.begin(), &amp;LDVT,
                        wkc, &amp;LWORK, rwkc, &amp;INFO);
            <var>delete</var>[] wkc; <var>delete</var>[] rwkc;
        <var>break</var>;
        <var>case</var> <kbd>'z'</kbd>:
            wkz = <var>new</var> doublecomplex[LWORK];
            rwkz = <var>new</var> doublereal[5*mn];
            zgesvd_(&amp;JOBU, &amp;JOBVT, &amp;M, &amp;N,
                        (doublecomplex*)A.begin(), &amp;LDA,
                        (doublereal*)S.begin(),
                        (doublecomplex*)U.begin(), &amp;LDU,
                        (doublecomplex*)V.begin(), &amp;LDVT,
                        wkz, &amp;LWORK, rwkz, &amp;INFO);
            <var>delete</var>[] wkz; <var>delete</var>[] rwkz;
        <var>break</var>;
        <var>default</var>:
            std::cout &lt;&lt; <kbd>"\nERROR: Something wrong in SVD switch.\n\n"</kbd>;
    }

    <var>return</var> INFO;
}

<dfn>#endif </dfn><cite>/* _LINALG_H */</cite><dfn></dfn>
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Fmatrix_test.cpp : showing some functionality<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;cstdlib&gt;</dfn>
<dfn>#include &lt;cstdio&gt;</dfn>
<dfn>#include &lt;cmath&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>

<dfn>#include "Flinalg.h"</dfn>

<var>using</var> <var>namespace</var> std;

<var>int</var> main(<var>int</var> argc, <var>char</var>** argv)
{
    cout.precision(2);
    size_t M,N;

    cout &lt;&lt; <kbd>"input numrows: "</kbd>;
    cin &gt;&gt; M;
    cout &lt;&lt; <kbd>"input numcols: "</kbd>;
    cin &gt;&gt; N;
    Fmatrix&lt;<var>double</var>&gt; A(M,N); <cite>//instantiate MxN matrix</cite>
    Fmatrix&lt;<var>double</var>&gt; v(N),u(M); <cite>//instantiate Mx1 matrix i.e. vector</cite>
    cout &lt;&lt; <kbd>"A is "</kbd> &lt;&lt;  A.numrows() &lt;&lt; <kbd>'x'</kbd> &lt;&lt; A.numcols() &lt;&lt; <kbd>", numelms: "</kbd> &lt;&lt; A.numelms() &lt;&lt; endl;
    cout &lt;&lt; <kbd>"v is "</kbd> &lt;&lt;  v.numrows() &lt;&lt; <kbd>'x'</kbd> &lt;&lt; v.numcols() &lt;&lt; <kbd>", numelms: "</kbd> &lt;&lt; v.numelms() &lt;&lt; endl;
    cout &lt;&lt; <kbd>"u is "</kbd> &lt;&lt;  u.numrows() &lt;&lt; <kbd>'x'</kbd> &lt;&lt; u.numcols() &lt;&lt; <kbd>", numelms: "</kbd> &lt;&lt; u.numelms() &lt;&lt; endl &lt;&lt; endl;

    cout &lt;&lt; <kbd>"Input data for matrix A by rows ("</kbd> &lt;&lt; A.numelms() &lt;&lt; <kbd>" numbers):"</kbd> &lt;&lt; endl;
    A.read();
    cout &lt;&lt; endl &lt;&lt; <kbd>"A ="</kbd> &lt;&lt; endl;
    A.print();
    
    <cite>//Matrix-vector multiply by operator overload</cite>
    cout &lt;&lt; endl &lt;&lt; <kbd>"Setting v to ones vector..."</kbd> &lt;&lt; endl;
    <var>for</var>(<var>int</var> i=0;i&lt;v.numelms();i++)
        v&lt;i&gt;=1;
    cout &lt;&lt; <kbd>"A*v ="</kbd> &lt;&lt; endl;
    u=A*v;
    u.print();
    
    <cite>//generic matrix-matrix multiply</cite>
    Fmatrix&lt;<var>double</var>&gt; C(A.numrows(),A.numrows());
    gmm(A,A,C,<kbd>'N'</kbd>,<kbd>'T'</kbd>);
    cout &lt;&lt; <kbd>"A*A' ="</kbd> &lt;&lt; endl; 
    C.print();
    
    cout &lt;&lt; <kbd>"computing svd..."</kbd> &lt;&lt; endl;
    Fmatrix&lt;<var>double</var>&gt; U(M,M),S(min(M,N)),V(N,N); <cite>//min is defined in clapack.h</cite>
    cout &lt;&lt; <kbd>"INFO: "</kbd> &lt;&lt; svd(A,U,S,V) &lt;&lt; endl; <cite>//do svd, output error code</cite>
    cout &lt;&lt; <kbd>"singular values:"</kbd> &lt;&lt; endl;
    <var>for</var> (size_t i=0; i &lt; min(M,N); i++)
    { cout &lt;&lt; <kbd>"S[ "</kbd> &lt;&lt; i+1 &lt;&lt; <kbd>" ]\t= "</kbd> &lt;&lt; S&lt;i&gt; &lt;&lt; endl; } cout &lt;&lt; endl;
    cout &lt;&lt; <kbd>"singular vectors:"</kbd> &lt;&lt; endl;     <cite>//rows of V so print transpose</cite>
    <var>for</var>(<var>int</var> i=0; i&lt;V.numrows(); i++){ cout &lt;&lt; <kbd>"v"</kbd> &lt;&lt; i+1 &lt;&lt;<kbd>'\t'</kbd>; } cout &lt;&lt; endl;
    <var>for</var>(<var>int</var> i=0; i&lt;V.numrows(); i++){ <var>for</var>(size_t j=0;j&lt;V.numcols();j++){
        cout &lt;&lt; V(j,i) &lt;&lt; <kbd>'\t'</kbd>;
    } cout &lt;&lt; endl; }

    <var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Sample run (input is bold):<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br></code></pre></td>
<td class="source"><pre><code>input numrows: &lt;b&gt;6&lt;/b&gt;
input numcols: &lt;b&gt;5&lt;/b&gt;
A is 6x5, numelms: 30
v is 5x1, numelms: 5
u is 6x1, numelms: 6

Input data <var>for</var> matrix A by rows (30 numbers):
&lt;b&gt;2 5 2 6 4
3 3.4 2 6 7
2 2 2 2 0
0 0 0 1.234 0
3 23 46 93 .001
1 2 3 4 5&lt;/b&gt;

A =
2       5       2       6       4
3       3.4     2       6       7
2       2       2       2       0
0       0       0       1.2     0
3       23      46      93      0.001
1       2       3       4       5


Setting v to ones vector...
A*v =
19
21
8
1.2
1.7e+02
15



A*A<kbd>' =
85      91      30      7.4     7.7e+02 62
91      1.1e+02 29      7.4     7.4e+02 75
30      29      16      2.5     3.3e+02 20
7.4     7.4     2.5     1.5     1.1e+02 4.9
7.7e+02 7.4e+02 3.3e+02 1.1e+02 1.1e+04 5.6e+02
62      75      20      4.9     5.6e+02 55

computing svd...
INFO: 0
singular values:
S[ 1 ]  = 1.1e+02
S[ 2 ]  = 11
S[ 3 ]  = 2.9
S[ 4 ]  = 1.9
S[ 5 ]  = 1.2

singular vectors:
v1      v2      v3      v4      v5
-0.032  -0.33   0.48    -0.35   -0.74
-0.22   -0.34   0.72    0.16    0.54
-0.43   0.088   -0.12   -0.84   0.29
-0.87   0.062   -0.13   0.39    -0.26
-0.0092 -0.88   -0.47   0.0089  0.079

 </kbd></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
It will solve systems of equations. So yes, but the amount of work needed to set up a single-variable single-equation system is equivalent to solving it.<br>
<br>
e.g.:<br>
To ask it to solve <blockquote>4x+2=54-7x+3</blockquote>
You would tell it 11x=55<br>
<br>
Which is a waste of time (formulating your input for lapack).<br>
<br>
But something like:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>12x +14y - 8z = 2
14x - 5y +  z = 4
  x +  y +  z = 4</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Is worhtwhile.<br>
You can also solve (sort of) under-determined systems (systems with more variables than equations).<br>
<br>
You want a computer algebra system (CAS). Maple is pretty good for symbol manipulation (but big $$$). Octave/Matlab will do it too. Octave and Matlab actually use LAPACK</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','3UCRko23');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~98.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='385oizwU')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia3ucrko23'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia3ucrko23'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
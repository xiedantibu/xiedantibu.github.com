<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/yb07m4gy/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Template Instantiation - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Template Instantiation</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/guestgulkan/default.htm" rel="author">guestgulkan</a></b></div>
<div id="I_date">Sep 11, 2009</div>
<h1>Template Instantiation</h1>
<div id="I_score">Score: 4.0/5 (7 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
Template Instantiation<br>
<br>
I was looking around for something to wite a small article about<br>
and this seems to a good one.<br>
The forum gets a fair number of post concerning this problem where the OP has split<br>
the template into a *.h file and a *.cpp file  and gets linker<br>
problems.<br>
The usual answer given to this is to  put all the template stuff into the *.h file<br>
because  it has to be done this way.<br>
the class/functions.<br>
<b>That is not entirely true.</b>
<br>
C++ has  Implicit  template instantiation and Explicit instantiation<br>
<br>
<b>IMPLICIT INSTANTIATION</b>
<br>
In <b>template.h</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef TEMPLATE_H</dfn>
<dfn>#define TEMPLATE_H</dfn>

<dfn>#include &lt;iostream&gt;</dfn>

<var>template</var> &lt;<var>typename</var> T&gt;
<var>class</var> myTemplate
{
  <var>private</var>:
  T data;
 
  <var>public</var>:
  myTemplate();
  myTemplate(T t);
  T getData() <var>const</var>;
  <var>void</var> displayData() <var>const</var>;
  
  <var>static</var> <var>int</var> someValue; 
};
  
<var>template</var>&lt;<var>typename</var> T&gt;
myTemplate&lt;T&gt;::myTemplate()
:data()
{
}

<var>template</var>&lt;<var>typename</var> T&gt;
myTemplate&lt;T&gt;::myTemplate(T t) 
:data(t)
{
}

<var>template</var> &lt;<var>typename</var> T&gt;
T myTemplate&lt;T&gt;::getData() <var>const</var>
{
    <var>return</var> data;
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> myTemplate&lt;T&gt;::displayData() <var>const</var>
{
    std::cout &lt;&lt; data &lt;&lt;std::endl;
}


<var>template</var>&lt;<var>typename</var> T&gt;
<var>int</var> myTemplate&lt;T&gt;::someValue = 100;

<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>In main.cpp</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include "template.h"</dfn>

<var>using</var> <var>namespace</var> std;

<var>int</var> main()
{
    myTemplate&lt;<var>int</var>&gt; myTi(5);  
    myTi.displayData();
    
    myTemplate&lt;<var>float</var>&gt; myTf(3.5f);
    myTf.displayData();
      
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In the example above, the complete template definition is in the header file<br>
which is included by main.cpp - so there are no problems during compiling<br>
and linking.<br>
If we were to forget to do a definition of the <b>displayData()</b> function<br>
then we would have got a LINKER error NOT a COMPILER error.<br>
<br>
//=========================================================================================//<br>
<b>EXPLICIT INSTANTIATION</b>
Let's say we want to split our template class between a header file and a source file.<br>
So we have main.cpp and template.cpp.<br>
We compile both files but get Linker errors because NO actual code from the template.cpp<br>
file would have been instantiated.<br>
To get the compiler to instantiate the required code we can use explict instantiation.<br>
<br>
<b>template.h</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef TEMPLATE_H</dfn>
<dfn>#define TEMPLATE_H</dfn>

<dfn>#include &lt;iostream&gt;</dfn>

<var>template</var> &lt;<var>typename</var> T&gt;
<var>class</var> myTemplate
{
  <var>private</var>:
  T data;
 
  
  <var>public</var>:
  myTemplate();
  myTemplate(T t);
  T getData() <var>const</var>;
  <var>void</var> displayData() <var>const</var>;
  
  <var>static</var> <var>int</var> someValue;
  
};
  
<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<b>template.cpp</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "template.h"</dfn>
<dfn>#include &lt;iostream&gt;</dfn>


<cite>//template functions </cite>
<var>template</var>&lt;<var>typename</var> T&gt;
myTemplate&lt;T&gt;::myTemplate()
:data()
{
}

<var>template</var>&lt;<var>typename</var> T&gt;
myTemplate&lt;T&gt;::myTemplate(T t) 
:data(t)
{
}

<var>template</var> &lt;<var>typename</var> T&gt;
T myTemplate&lt;T&gt;::getData() <var>const</var>
{
    <var>return</var> data;
}

<var>template</var> &lt;<var>typename</var> T&gt;
<var>void</var> myTemplate&lt;T&gt;::displayData() <var>const</var>
{
    std::cout &lt;&lt; data &lt;&lt;std::endl;
}


<var>template</var>&lt;<var>typename</var> T&gt;
<var>int</var> myTemplate&lt;T&gt;::someValue = 100;


<cite>//The explicit instantiation part</cite>
<var>template</var> <var>class</var> myTemplate&lt;<var>int</var>&gt;; 
<var>template</var> <var>class</var> myTemplate&lt;<var>float</var>&gt;;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>main.cpp</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>

<dfn>#include "template.h"</dfn>

<var>using</var> <var>namespace</var> std;


<var>int</var> main()
{

    myTemplate&lt;<var>int</var>&gt; myTi(5);
    
    myTi.displayData();
    
    myTemplate&lt;<var>float</var>&gt; myTf(3.5f);
    myTf.displayData();
  
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The important part is the last couple of lines in <b>template.cpp</b>
We know that we will be needing a <b>myTemplate&lt;int&gt;</b> and a <b>myTemplate&lt;float&gt;</b>
so we explicitly ask the compiler to generate code for all the instantiable parts for these<br>
two class types.<br>
Notice the way the instantiation directive is written.<br>
We can now compile and link our code successfully.<br>
<br>
We can also explicitly instantiate template functions, or individual template class member functions.<br>
<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','yb07M4Gy');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~120.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='E6M4jE8b')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiayb07m4gy'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiayb07m4gy'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
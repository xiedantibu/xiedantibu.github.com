<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/1v07m4gy/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>TIC-TAC-TOE C++ - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">TIC-TAC-TOE C++</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/romulosd/default.htm" rel="author">romulosd</a></b></div>
<div id="I_date">Aug 6, 2013 (last update: Aug 11, 2013)</div>
<h1>TIC-TAC-TOE C++</h1>
<div id="I_score">Score: 3.8/5 (155 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
Hello!<br>
I would like to share my first game in C++ with you guys!<br>
Although i have said in C++, the game does not include advanced concepts of language, such as object-oriented programming.<br>
It is a game for those just starting out in C++ and is studying the basics like me!<br>
As if-else, loops, arrays, multidimensional arrays and functions!<br>
<br>
One of the best ways to learn is to put into practice what you have learned, make a simple game!<br>
<br>
Feel free to modify the game, or try to do yourself, is the way to learn!<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>407<br>408<br>409<br>410<br>411<br>412<br>413<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>430<br>431<br>432<br>433<br>434<br>435<br>436<br>437<br>438<br>439<br>440<br>441<br>442<br>443<br>444<br>445<br>446<br>447<br>448<br>449<br>450<br>451<br>452<br>453<br>454<br>455<br>456<br>457<br>458<br>459<br>460<br>461<br>462<br>463<br>464<br>465<br>466<br>467<br>468<br>469<br>470<br>471<br>472<br>473<br>474<br>475<br>476<br>477<br>478<br>479<br>480<br>481<br>482<br>483<br>484<br>485<br>486<br>487<br>488<br>489<br>490<br>491<br>492<br>493<br>494<br>495<br>496<br>497<br>498<br>499<br>500<br>501<br>502<br>503<br>504<br>505<br>506<br>507<br>508<br>509<br>510<br>511<br>512<br>513<br>514<br>515<br>516<br>517<br>518<br>519<br>520<br>521<br>522<br>523<br>524<br>525<br>526<br>527<br>528<br>529<br>530<br>531<br>532<br>533<br>534<br>535<br>536<br>537<br>538<br>539<br>540<br>541<br>542<br>543<br>544<br>545<br>546<br>547<br>548<br>549<br>550<br>551<br>552<br>553<br>554<br>555<br>556<br>557<br>558<br>559<br>560<br>561<br>562<br>563<br>564<br>565<br>566<br>567<br>568<br>569<br>570<br>571<br>572<br>573<br>574<br>575<br>576<br>577<br>578<br>579<br>580<br>581<br>582<br>583<br>584<br>585<br>586<br>587<br>588<br>589<br>590<br>591<br>592<br>593<br>594<br>595<br>596<br>597<br>598<br>599<br>600<br>601<br>602<br>603<br>604<br>605<br>606<br>607<br>608<br>609<br>610<br>611<br>612<br>613<br>614<br>615<br>616<br>617<br>618<br>619<br>620<br>621<br>622<br>623<br>624<br>625<br>626<br>627<br></code></pre></td>
<td class="source"><pre><code><dfn># include &lt;iostream&gt;</dfn>
<dfn># include &lt;cstdio&gt;</dfn>
<dfn># include &lt;cstdlib&gt;</dfn>
<dfn># include &lt;string&gt;</dfn>
<dfn># include &lt;time.h&gt;</dfn>
<dfn># include &lt;windows.h&gt;</dfn>


<dfn># define l 3</dfn>
<dfn># define c 3</dfn>
<var>using</var> <var>namespace</var> std;

<var>bool</var> validatePosition (<var>char</var> pos, <var>char</var> mt[l][c], <var>bool</var> player1);
<var>bool</var> gameOver (<var>char</var> mt[l][c],<var>short</var> op,<var>short</var> &amp;cont_p1,<var>short</var> &amp;cont_p2,<var>short</var> &amp;cont_cpu);
<var>void</var> showGame  (<var>char</var> mt[l][c],<var>short</var> op);
<var>void</var> cpu(<var>char</var> mt[l][c]);
<var>void</var> cpu_hard(<var>char</var> mt[l][c]);
string changeName1();
string changeName2();

<var>int</var> main()
{
    <var>short</var> i,j,op,cont_p1 = 0 ,cont_p2 = 0,cont_cpu = 0;
    <var>char</var> op2;
    <var>char</var> mt[l][c],pos;
    <var>bool</var> player1 = <var>false</var>,mult = <var>false</var>,is_cpu = <var>false</var>;
    string p1,p2;

    cout &lt;&lt; <kbd>"General Public License v3 \n"</kbd>;
    cout &lt;&lt; <kbd>"Programmer: Romulo Sorato"</kbd> &lt;&lt; endl;
    cout &lt;&lt; <kbd>"Legend: \nPlayer 1: X \nPlayer 2 and CPU: O\n\n"</kbd>;

    <var>do</var>
    {
        <var>do</var>
        {
            cout &lt;&lt;<kbd>"Choose your option:\n1-Multiplayer 2-CPU\n"</kbd>;
            cin&gt;&gt;op;
            <var>if</var>(op == 1)
                mult = <var>true</var>;
            <var>else</var> <var>if</var> (op == 2)
                is_cpu = <var>true</var>;
            <var>if</var>(op!=1 &amp;&amp; op!=2)
                cout&lt;&lt;<kbd>"Choose your option, type only 1 or 2\n"</kbd>;
        }
        <var>while</var>(op != 1 &amp;&amp; op != 2);

        <var>if</var>(is_cpu &amp;&amp; mult)
        {
            cont_p1 = 0;
            cont_p2 = 0;
            cont_cpu = 0;
        }
        <var>if</var>(op == 2)
        {
            mult = <var>false</var>;
            cout&lt;&lt;<kbd>"Choose level:2-Easy 3-Hard\n"</kbd>&lt;&lt;endl;
            cin&gt;&gt;op;
        }
        fflush(stdin);

        <var>if</var>(op == 1)
        {
            is_cpu = <var>false</var>;
            p1 = changeName1();
            p2 = changeName2();
        }
        <var>else</var>
            p1 = changeName1();

        cout &lt;&lt; <kbd>"Enter the number corresponding to the desired location: \n"</kbd> &lt;&lt; endl &lt;&lt; endl;

        <cite>//Starting matrix</cite>
        <var>for</var> (i = 0; i &lt; l; i++)
        {
            <var>for</var> (j = 0; j &lt; c; j ++)
            {
                mt[i][j] = <kbd>'?'</kbd>;
            }
        }
        <cite>// -----------</cite>
        <var>int</var> count = 1;
        <cite>// Showing the positions</cite>
        <var>for</var> (i = 0; i &lt; l*2; i++)
        {
            cout &lt;&lt; <kbd>"                    "</kbd>;
            <var>for</var> (j = 0; j &lt; c*2; j++)
            {
                <var>if</var>(i % 2 == 0)
                {
                    <var>if</var>(j%2 == 0)
                    {
                        cout &lt;&lt; <kbd>"["</kbd>&lt;&lt;count&lt;&lt;<kbd>"]"</kbd> &lt;&lt;<kbd>" "</kbd>;
                        count ++;
                    }
                    <var>else</var>
                    {
                        <var>if</var>(j != c*2-1)
                            cout &lt;&lt;<kbd>"| "</kbd>;
                    }
                }
                <var>else</var>
                {
                    <var>if</var>(j%2 != 0)
                        cout &lt;&lt;<kbd>"-----"</kbd>;
                }
            }
            cout &lt;&lt; endl;
        }
        <cite>//---------</cite>
        cout  &lt;&lt; endl;
        <var>do</var>
        {
            <var>do</var>
            {
                <cite>// Getting position player 1</cite>
                <var>do</var>
                {
                    cout &lt;&lt; <kbd>"Player 1:"</kbd> &lt;&lt; p1 &lt;&lt;<kbd>"\n"</kbd>;
                    cin &gt;&gt; pos;
                }
                <var>while</var> (isdigit (pos) == 0);
                player1 = <var>true</var>;
            }
            <var>while</var> (!validatePosition (pos, mt, player1));
            system (<kbd>"CLS"</kbd>);
            showGame(mt,op);

            <var>if</var> (gameOver(mt,op,cont_p1,cont_p2,cont_cpu))
                <var>break</var>;

            <var>if</var>(op == 2)
            {
                Sleep(1000);
                cpu(mt);
                system (<kbd>"CLS"</kbd>);
                showGame(mt,op);
            }
            <var>if</var>(op == 3)
            {
                Sleep(1000);
                cpu_hard(mt);
                system (<kbd>"CLS"</kbd>);
                showGame(mt,op);
            }
            <var>else</var> <var>if</var>(op == 1)
            {
                <var>do</var>
                {
                    cout &lt;&lt; <kbd>"Player 2:"</kbd> &lt;&lt; p2 &lt;&lt;<kbd>"\n"</kbd>;
                    cin &gt;&gt; pos;
                    player1 = <var>false</var>;
                }
                <var>while</var> (!validatePosition (pos, mt, player1));
                system (<kbd>"CLS"</kbd>);
                showGame(mt,op);
            }

            <var>if</var> (gameOver(mt,op,cont_p1,cont_p2,cont_cpu))
                <var>break</var>;
        }
        <var>while</var> (<var>true</var>);
        cout &lt;&lt; <kbd>"Do you want to continue? (y to continue or any other to quit)\nOr press c to change names"</kbd> &lt;&lt; endl;
        cin &gt;&gt; op2;
        tolower (op2);
        system (<kbd>"CLS"</kbd>);
        <var>if</var>(op2 == <kbd>'c'</kbd>)
        {
            fflush(stdin);
            p1 = changeName1();
            p2 = changeName2();
        }
    }
    <var>while</var> (op2 == <kbd>'y'</kbd> || op2 == <kbd>'c'</kbd>);
    <var>return</var> 0;
}
<var>bool</var> validatePosition (<var>char</var> pos, <var>char</var> mt [l][c], <var>bool</var> player1)
{
    <var>if</var> (pos == <kbd>'1'</kbd>)
    {
        <var>if</var> (mt [0][0] != <kbd>'?'</kbd>)
        {
            cout &lt;&lt; <kbd>"Position already used,type another position."</kbd> &lt;&lt; endl;
        }
        <var>else</var>
        {
            <var>if</var> (player1 == <var>true</var>)
                mt [0][0] = <kbd>'X'</kbd>;
            <var>else</var>
                mt [0][0] = <kbd>'O'</kbd>;
            <var>return</var> <var>true</var>;
        }
    }
    <var>else</var> <var>if</var> (pos == <kbd>'2'</kbd>)
    {
        <var>if</var> (mt [0][1] != <kbd>'?'</kbd>)
        {
            cout &lt;&lt; <kbd>"Position already used, type another position."</kbd> &lt;&lt; endl;
        }
        <var>else</var>
        {
            <var>if</var> (player1 == <var>true</var>)
                mt [0][1] = <kbd>'X'</kbd>;
            <var>else</var>
                mt [0][1] = <kbd>'O'</kbd>;
            <var>return</var> <var>true</var>;
        }
    }
    <var>else</var> <var>if</var> (pos == <kbd>'3'</kbd>)
    {
        <var>if</var> (mt[0][2] != <kbd>'?'</kbd>)
        {
            cout &lt;&lt; <kbd>"Position already used, type another position."</kbd> &lt;&lt; endl;
        }
        <var>else</var>
        {
            <var>if</var> (player1 == <var>true</var>)
                mt [0][2] = <kbd>'X'</kbd>;
            <var>else</var>
                mt [0][2] = <kbd>'O'</kbd>;
            <var>return</var> <var>true</var>;
        }
    }
    <var>else</var> <var>if</var> (pos == <kbd>'4'</kbd>)
    {
        <var>if</var> (mt [1][0] != <kbd>'?'</kbd>)
        {
            cout &lt;&lt; <kbd>"Position already used, type another position."</kbd> &lt;&lt; endl;
        }
        <var>else</var>
        {
            <var>if</var> (player1 == <var>true</var>)
                mt [1][0] = <kbd>'X'</kbd>;
            <var>else</var>
                mt [1][0] = <kbd>'O'</kbd>;
            <var>return</var> <var>true</var>;
        }
    }
    <var>else</var> <var>if</var> (pos == <kbd>'5'</kbd>)
    {
        <var>if</var> (mt [1][1] != <kbd>'?'</kbd>)
        {
            cout &lt;&lt; <kbd>"Position already used, type another position."</kbd> &lt;&lt; endl;
        }
        <var>else</var>
        {
            <var>if</var> (player1 == <var>true</var>)
                mt [1][1] = <kbd>'X'</kbd>;
            <var>else</var>
                mt [1][1] = <kbd>'O'</kbd>;
            <var>return</var> <var>true</var>;
        }
    }
    <var>else</var> <var>if</var> (pos == <kbd>'6'</kbd>)
    {
        <var>if</var> (mt [1][2] != <kbd>'?'</kbd>)
        {
            cout &lt;&lt; <kbd>"Position already used, type another position."</kbd> &lt;&lt; endl;
        }
        <var>else</var>
        {
            <var>if</var> (player1 == <var>true</var>)
                mt [1][2] = <kbd>'X'</kbd>;
            <var>else</var>
                mt [1][2] = <kbd>'O'</kbd>;
            <var>return</var> <var>true</var>;
        }
    }
    <var>else</var> <var>if</var> (pos == <kbd>'7'</kbd>)
    {
        <var>if</var> (mt [2][0] != <kbd>'?'</kbd>)
        {
            cout  &lt;&lt; <kbd>"Position already used, type another position."</kbd> &lt;&lt; endl;
        }
        <var>else</var>
        {
            <var>if</var> (player1 == <var>true</var>)
                mt [2] [0] = <kbd>'X'</kbd>;
            <var>else</var>
                mt [2] [0] = <kbd>'O'</kbd>;
            <var>return</var> <var>true</var>;
        }
    }
    <var>else</var> <var>if</var> (pos == <kbd>'8'</kbd>)
    {
        <var>if</var> (mt [2][1] != <kbd>'?'</kbd>)
        {
            cout &lt;&lt; <kbd>"Position already used, type another position."</kbd> &lt;&lt; endl;
        }
        <var>else</var>
        {
            <var>if</var> (player1 == <var>true</var>)
                mt [2][1] = <kbd>'X'</kbd>;
            <var>else</var>
                mt [2][1] = <kbd>'O'</kbd>;
            <var>return</var> <var>true</var>;
        }
    }
    <var>else</var> <var>if</var> (pos == <kbd>'9'</kbd>)
    {
        <var>if</var> (mt [2][2] != <kbd>'?'</kbd>)
        {
            cout &lt;&lt; <kbd>"Position already used, type another position."</kbd> &lt;&lt; endl;
        }
        <var>else</var>
        {
            <var>if</var> (player1 == <var>true</var>)
                mt [2] [2] = <kbd>'X'</kbd>;
            <var>else</var>
                mt [2][2] = <kbd>'O'</kbd>;
            <var>return</var> <var>true</var>;
        }
    }
    <var>else</var>
        cout &lt;&lt; <kbd>"Invalid number, type number 1-9."</kbd>;
    <var>return</var> <var>false</var>;
}
<var>void</var> showGame(<var>char</var> mt[l][c],<var>short</var> op)
{

    cout &lt;&lt; <kbd>"General Public License v3 \n"</kbd>;
    cout &lt;&lt; <kbd>"Programmer: Romulo Sorato\n"</kbd> &lt;&lt; endl;
    <var>if</var>(op == 1)
    {
        cout &lt;&lt; <kbd>"Legend: \nPlayer 1: X \nPlayer 2: O\n"</kbd> &lt;&lt; endl &lt;&lt; endl;
    }
    <var>else</var>
        cout &lt;&lt; <kbd>"Legend: \nPlayer 1: X \nCPU: O\n"</kbd> &lt;&lt; endl &lt;&lt; endl;

    <var>int</var> count = 1;
    <var>for</var> (<var>int</var> i = 0; i &lt; l; i++)
    {
        cout &lt;&lt; <kbd>"                    "</kbd>;
        <var>for</var>  (<var>int</var> j = 0; j &lt; c; j ++)
        {
            <var>if</var> (mt [i][j] == <kbd>'?'</kbd>)
            {
                cout &lt;&lt; <kbd>"["</kbd>&lt;&lt;count&lt;&lt;<kbd>"]| "</kbd>;
            }
            <var>else</var> <var>if</var> (mt [i][j] == <kbd>'X'</kbd>)
            {
                cout &lt;&lt; <kbd>"[X]| "</kbd>;
            }
            <var>else</var>
                cout &lt;&lt; <kbd>"[O]| "</kbd>;
            count ++;
        }
        cout &lt;&lt;<kbd>"\n\t            --------------\n"</kbd>;
    }
    cout &lt;&lt; endl;
}
<var>bool</var> gameOver (<var>char</var> mt[l][c],<var>short</var> op,<var>short</var> &amp;cont_p1,<var>short</var> &amp;cont_p2,<var>short</var> &amp;cont_cpu)
{
    <cite>// Check if there was a winner or a tie</cite>
    <var>int</var>  ct = 0 ;<cite>// total counter</cite>
    <var>int</var> d = c-1 ;<cite>// auxiliary variable for secondary diagonal</cite>
    <var>int</var> contd = 0 ;<cite>// counter diagonal</cite>
    <var>int</var> contd2 = 0 ;<cite>// counter for diagonal secondary</cite>
    <var>int</var> contc ;<cite>// counter for column</cite>
    <var>int</var> contl ;<cite>// counter for line player 1</cite>
    <var>int</var> contdj2 = 0 ;<cite>// counter diagonal for player 2</cite>
    <var>int</var> contd2j2 = 0 ;<cite>// counter for diagonal secondary player 2  </cite>
    <var>int</var> contcj2;<cite>// counter for the column player 2</cite>
    <var>int</var> contlj2;<cite>// counter for line player 2</cite>

    <var>for</var> (<var>int</var> i = 0; i &lt; l; i ++)
    {
        contc = 0;
        contcj2 = 0;
        contl = 0;
        contlj2 = 0;
        <var>if</var> (mt [i][i] == <kbd>'O'</kbd>)
            contdj2 ++;
        <var>if</var> (mt [i][d] == <kbd>'O'</kbd>)
            contd2j2 ++;
        <var>if</var> (mt [i][i] == <kbd>'X'</kbd>)
            contd ++;
        <var>if</var> (mt [i][d] == <kbd>'X'</kbd>)
            contd2 ++;
        d--;
        <var>for</var> (<var>int</var> j = 0; j &lt; c; j ++)
        {
            <var>if</var> (mt[i][j] != <kbd>'?'</kbd>)
                ct ++;
            <var>if</var> (mt [i][j] == <kbd>'O'</kbd>)
                contlj2 ++;
            <var>if</var> (mt [j][i] == <kbd>'O'</kbd>)
                contcj2 ++;
            <var>if</var> (mt [i][j] == <kbd>'X'</kbd>)
                contl ++;
            <var>if</var> (mt [j][i] == <kbd>'X'</kbd>)
                contc ++;
        }
        <var>if</var> (contl == 3 || contd == 3 || contc == 3 || contd2 == 3)
        {
            cont_p1++;
            cout &lt;&lt; <kbd>"Player 1 wins!"</kbd> &lt;&lt; endl;
            <var>if</var>(op == 1)
            {
                cout &lt;&lt;<kbd>" Ranking:\nPlayer 1:"</kbd>&lt;&lt; cont_p1 &lt;&lt;<kbd>"\nPlayer 2:"</kbd>&lt;&lt; cont_p2 &lt;&lt;<kbd>"\n"</kbd>;
            }
            <var>else</var>
            {
                cout &lt;&lt;<kbd>" Ranking:\nPlayer 1:"</kbd>&lt;&lt; cont_p1 &lt;&lt;<kbd>"\nCPU:"</kbd>&lt;&lt; cont_cpu &lt;&lt;<kbd>"\n"</kbd>;
            }

            <var>return</var> <var>true</var>;
        }
        <var>if</var> (contlj2 == 3 || contdj2 == 3 || contcj2 == 3 || contd2j2 == 3)
        {
            <var>if</var>(op == 1)
            {
                cout &lt;&lt; <kbd>"Player 2 wins!"</kbd> &lt;&lt; endl;
                cont_p2++;
                cout &lt;&lt;<kbd>" Ranking:\nPlayer 1:"</kbd>&lt;&lt; cont_p1 &lt;&lt;<kbd>"\nPlayer 2:"</kbd>&lt;&lt; cont_p2 &lt;&lt;<kbd>"\n"</kbd>;
            }
            <var>else</var>
            {
                cout &lt;&lt; <kbd>"CPU wins!"</kbd> &lt;&lt; endl;
                cont_cpu++;
                cout &lt;&lt;<kbd>" Ranking:\nPlayer 1:"</kbd>&lt;&lt; cont_p1 &lt;&lt;<kbd>"\nCPU:"</kbd>&lt;&lt; cont_cpu &lt;&lt;<kbd>"\n"</kbd>;
            }
            <var>return</var> <var>true</var>;
        }
    }
    <var>if</var> (ct==l*c)
    {
        cout &lt;&lt; <kbd>"We tied!\n"</kbd> &lt;&lt; endl;
        <var>if</var>(op == 1)
        {
            cout &lt;&lt;<kbd>" Ranking:\nPlayer 1:"</kbd>&lt;&lt; cont_p1 &lt;&lt;<kbd>"\nPlayer 2:"</kbd>&lt;&lt; cont_p2 &lt;&lt;<kbd>"\n"</kbd>;
        }
        <var>else</var>
            cout &lt;&lt;<kbd>" Ranking:\nPlayer 1:"</kbd>&lt;&lt; cont_p1 &lt;&lt;<kbd>"\nCPU:"</kbd>&lt;&lt; cont_cpu &lt;&lt;<kbd>"\n"</kbd>;
        <var>return</var> <var>true</var>;
    }
    <var>return</var> <var>false</var>;
}
<var>void</var> cpu(<var>char</var> mt[l][c])
{
    <cite>/* initialize random seed: */</cite>
    srand (time(NULL));

    <var>int</var> x,cont;
    <var>bool</var> found = <var>false</var>;
    <var>while</var>(found == <var>false</var>)
    {
        x = rand()%9+1;
        cont = 1;
        <var>for</var>(<var>int</var> i = 0; i &lt; l; i++ )
        {
            <var>for</var>(<var>int</var> j = 0; j &lt; c; j++ )
            {
                <var>if</var>(cont == x)
                {
                    <var>if</var>(mt[i][j] != <kbd>'X'</kbd> &amp;&amp; mt[i][j] != <kbd>'O'</kbd>)
                    {
                        mt[i][j] = <kbd>'O'</kbd>;
                        found = <var>true</var>;
                    }
                }
                cont++;
            }
        }
    }
}
<var>void</var> cpu_hard(<var>char</var> mt[l][c])
{

    <var>int</var> d = c-1 ;<cite>// auxiliary variable for secondary diagonal</cite>
    <var>int</var> contd = 0 ;<cite>// counter diagonal</cite>
    <var>int</var> contd2 = 0 ;<cite>// counter for secondary diagonal</cite>
    <var>int</var> contc ;<cite>// counter for column</cite>
    <var>int</var> contl ;<cite>// counter for line player 1</cite>

    <var>int</var> contd_Cpu = 0 ;<cite>// counter diagonal for cpu</cite>
    <var>int</var> contd2_Cpu = 0 ;<cite>// counter for secondary diagonal of cpu  </cite>
    <var>int</var> contc2;<cite>// counter for the column cpu</cite>
    <var>int</var> contl2;<cite>// counter for line cpu</cite>
    <var>bool</var> found = <var>false</var>;

    <var>for</var> (<var>int</var> i = 0; i &lt; l; i ++)
    {
        contc = 0;
        contl = 0;
        contc2 = 0;
        contl2 = 0;

        <var>if</var> (mt [i][i] == <kbd>'X'</kbd>)
            contd ++;
        <var>if</var> (mt [i][d] == <kbd>'X'</kbd>)
            contd2 ++;
        <var>if</var> (mt [i][i] == <kbd>'O'</kbd>)
            contd_Cpu ++;
        <var>if</var> (mt [i][d] == <kbd>'O'</kbd>)
            contd2_Cpu ++;
        d--;
        <var>for</var> (<var>int</var> j = 0; j &lt; c; j ++)
        {
            <var>if</var> (mt [i][j] == <kbd>'X'</kbd>)
                contl ++;
            <var>if</var> (mt [j][i] == <kbd>'X'</kbd>)
                contc ++;
            <var>if</var> (mt [i][j] == <kbd>'O'</kbd>)
                contl2 ++;
            <var>if</var> (mt [j][i] == <kbd>'O'</kbd>)
                contc2 ++;
        }
        <var>if</var>(contd2_Cpu == 2 || contc2 == 2 || contd_Cpu == 2 || contl2 == 2)
        {
            <var>if</var> (contl2 == 2)
            {
                <var>for</var> (<var>int</var> z = 0; z &lt; c; z ++)
                {
                    <var>if</var> (mt [i][z] == <kbd>'?'</kbd>)
                    {
                        mt[i][z] = <kbd>'O'</kbd>;
                        found = <var>true</var>;
                    }
                }
            }
            <var>else</var> <var>if</var>(contd_Cpu == 2)
            {
                <var>for</var> (<var>int</var> z = 0; z &lt; c; z ++)
                {
                    <var>if</var> (mt [z][z] == <kbd>'?'</kbd>)
                    {
                        mt[z][z] = <kbd>'O'</kbd>;
                        found = <var>true</var>;
                    }
                }
            }
            <var>else</var> <var>if</var>(contc2 == 2)
            {
                <var>for</var> (<var>int</var> z = 0; z &lt; c; z ++)
                {
                    <var>if</var> (mt [z][i] == <kbd>'?'</kbd>)
                    {
                        mt[z][i] = <kbd>'O'</kbd>;
                        found = <var>true</var>;
                    }
                }
            }
            <var>else</var> <var>if</var>(contd2_Cpu == 2)
            {
                <var>int</var> x = 0;
                <var>for</var> (<var>int</var> z = c-1; z &gt;= 0; z --)
                {
                    <var>if</var> (mt [x][z] == <kbd>'?'</kbd>)
                    {
                        mt[x][z] = <kbd>'O'</kbd>;
                        found = <var>true</var>;
                    }
                    x++;
                }
            }
        }
        <var>else</var>
        {
            <var>if</var> (contl == 2)
            {
                <var>for</var> (<var>int</var> z = 0; z &lt; c; z ++)
                {
                    <var>if</var> (mt [i][z] == <kbd>'?'</kbd>)
                    {
                        mt[i][z] = <kbd>'O'</kbd>;
                        found = <var>true</var>;
                    }
                }
            }
            <var>else</var> <var>if</var>(contd == 2)
            {
                <var>for</var> (<var>int</var> z = 0; z &lt; c; z ++)
                {
                    <var>if</var> (mt [z][z] == <kbd>'?'</kbd>)
                    {
                        mt[z][z] = <kbd>'O'</kbd>;
                        found = <var>true</var>;
                    }
                }
            }
            <var>else</var> <var>if</var>(contc == 2)
            {
                <var>for</var> (<var>int</var> z = 0; z &lt; c; z ++)
                {
                    <var>if</var> (mt [z][i] == <kbd>'?'</kbd>)
                    {
                        mt[z][i] = <kbd>'O'</kbd>;
                        found = <var>true</var>;
                    }
                }
            }
            <var>else</var> <var>if</var>(contd2 == 2)
            {
                <var>int</var> x = 0;
                <var>for</var> (<var>int</var> z = c-1; z &gt;= 0; z --)
                {
                    <var>if</var> (mt [x][z] == <kbd>'?'</kbd>)
                    {
                        mt[x][z] = <kbd>'O'</kbd>;
                        found = <var>true</var>;
                    }
                    x++;
                }
            }
        }
        <var>if</var>(found)
            <var>break</var>;
    }
    <var>if</var>(!found)
        cpu(mt);
}
string changeName1()
{
    string name1;
    cout &lt;&lt; <kbd>"Enter name of player 1"</kbd> &lt;&lt; endl;
    getline(cin, name1);
    <var>return</var> name1;

}
string changeName2()
{
    string name2;
    cout &lt;&lt; <kbd>"Enter name of player 2"</kbd> &lt;&lt; endl;
    getline(cin, name2);
    <var>return</var> name2;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','1v07M4Gy');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~82.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='N30oGNh0')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia1v07m4gy'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia1v07m4gy'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/nwtbqmol/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Hex viewer - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Hex viewer</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/chrisname/default.htm" rel="author">chrisname</a></b></div>
<div id="I_date">Jan 26, 2012 (last update: Jan 4, 2013)</div>
<h1>Hex viewer</h1>
<div id="I_score">Score: 4.1/5 (39 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
Modification history:<br>
<ul>
<li>2012-01-26 - First version (in C).</li>
<li>2013-01-04 - Complete rewrite (in C++).</li>
<li>2013-01-04 - Fixed indentation.</li>
</ul>
<br>
This C++ program displays the contents of a file in hexadecimal in colour. It also displays the offset into the file of each line (on the left) and a conversion of the hex data into ASCII (on the right).<br>
<br>
Note: Some terminal emulators don't support the ANSI escape codes used by the program for coloured output. If that is that is the case with your terminal emulator (e.g. cmd.exe and Console2 on Windows) then compile the code with the macro NO_COLOR defined to disable coloured output.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br></code></pre></td>
<td class="source"><pre><code><cite>// Copyright 2013 Chrisname. All rights reserved.</cite>
<cite>//</cite>
<cite>// Redistribution and use in source and binary forms, with or without</cite>
<cite>// modification, are permitted provided that the following conditions are met:</cite>
<cite>// 1. Redistributions of source code must retain the above copyright notice,</cite>
<cite>//    this list of conditions and the following disclaimer.</cite>
<cite>// 2. Redistributions in binary form must reproduce the above copyright notice,</cite>
<cite>//    this list of conditions and the following disclaimer in the documentation</cite>
<cite>//    and/or other materials provided with the distribution.</cite>
<cite>// </cite>
<cite>// THIS SOFTWARE IS PROVIDED BY CHRISNAME ``AS IS'' AND ANY EXPRESS OR IMPLIED</cite>
<cite>// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF</cite>
<cite>// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO</cite>
<cite>// EVENT SHALL CHRISNAME OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,</cite>
<cite>// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</cite>
<cite>// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,</cite>
<cite>// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF</cite>
<cite>// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</cite>
<cite>// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,</cite>
<cite>// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</cite>
<dfn>#include &lt;array&gt;</dfn>
<dfn>#include &lt;cctype&gt;</dfn>
<dfn>#include &lt;cstdint&gt;</dfn>
<dfn>#include &lt;cstdlib&gt;</dfn>
<dfn>#include &lt;exception&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<dfn>#include &lt;iomanip&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;sstream&gt;</dfn>
<dfn>#include &lt;stdexcept&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>namespace</var> ansi {
    std::string escape(<var>const</var> std::string&amp; seq)
    {
<dfn>#ifdef NO_COLOR</dfn>
        <var>return</var> <kbd>""</kbd>;
<dfn>#else</dfn>
        <var>return</var> <kbd>"\033["</kbd> + seq;
<dfn>#endif</dfn>
    }

    std::string reset()
    {
        <var>return</var> escape(<kbd>"0m"</kbd>);
    }

    <var>namespace</var> colors {
        <var>enum</var> t { black, red, green, yellow, blue, magenta, cyan, white };
    }

    <var>typedef</var> colors::t color_t;

    std::string color(color_t col, <var>bool</var> bright = <var>true</var>, <var>bool</var> is_fg = <var>true</var>)
    {
        std::stringstream sstream;
        <var>if</var> (bright)
            sstream &lt;&lt; <kbd>"1;"</kbd>;
        sstream &lt;&lt; (<var>unsigned</var>(col) + ((is_fg) ? 30 : 40)) &lt;&lt; <kbd>"m"</kbd>;
        <var>return</var> escape(sstream.str());
    }
}

<var>namespace</var> hexview {
    <var>static</var> <var>void</var> print_offset(<var>unsigned</var> <var>long</var> offset)
    {
        <var>static</var> <var>const</var> std::array&lt;std::string, 2&gt; colors = {
            ansi::color(ansi::colors::white),
            ansi::color(ansi::colors::red, <var>false</var>, <var>false</var>)
        };
        std::cout &lt;&lt; colors[0] &lt;&lt; colors[1] &lt;&lt; std::hex &lt;&lt; std::setw(8)
                  &lt;&lt; std::setfill(<kbd>'0'</kbd>) &lt;&lt; offset &lt;&lt; std::dec &lt;&lt; std::setw(0)
                  &lt;&lt; std::setfill(<kbd>' '</kbd>) &lt;&lt; ansi::reset();
    }

    <var>static</var> <var>void</var> print_hex(<var>const</var> std::vector &lt;uint8_t&gt;&amp; bytes)
    {
        <var>static</var> <var>const</var> std::array&lt;std::string, 2&gt; colors = {
            ansi::color(ansi::colors::white),
            ansi::color(ansi::colors::green, <var>false</var>, <var>false</var>)
        };
        size_t i = bytes.size();
        <var>for</var> (<var>const</var> <var>auto</var>&amp; byte : bytes) {
            std::cout &lt;&lt; colors[0] &lt;&lt; colors[1] &lt;&lt; std::hex &lt;&lt; std::setw(2)
                      &lt;&lt; std::setfill(<kbd>'0'</kbd>) &lt;&lt; <var>unsigned</var>(byte) &lt;&lt; ansi::reset();
            <var>if</var> (--i &gt; 0)
                std::cout.put(<kbd>' '</kbd>);
        }
        std::cout &lt;&lt; std::dec &lt;&lt; std::setw(0) &lt;&lt; std::setfill(<kbd>' '</kbd>);
    }

    <var>static</var> <var>void</var> print_ascii(<var>const</var> std::vector &lt;uint8_t&gt;&amp; bytes)
    {
        <var>static</var> <var>const</var> std::array&lt;std::string, 2&gt; colors = {
            ansi::color(ansi::colors::white),
            ansi::color(ansi::colors::blue, <var>false</var>, <var>false</var>)
        };
        std::cout &lt;&lt; colors[0] &lt;&lt; colors[1];
        <var>for</var> (<var>const</var> <var>auto</var>&amp; byte : bytes) {
            <var>if</var> (std::isprint(byte) &amp;&amp; byte != <kbd>'\n'</kbd>)
                std::cout.put(<var>char</var>(byte));
            <var>else</var>
                std::cout &lt;&lt; <kbd>'.'</kbd>;
        }
        std::cout &lt;&lt; ansi::reset();
    }

    <var>static</var> <var>const</var> std::array&lt;std::string, 2&gt; error_colors = {
        ansi::color(ansi::colors::red),
        ansi::color(ansi::colors::black, <var>false</var>, <var>false</var>)
    };

    <var>static</var> <var>unsigned</var> <var>long</var> read_bytes(std::vector&lt;uint8_t&gt;&amp; bytes,
              <var>unsigned</var> <var>long</var> count, std::ifstream&amp; file, <var>const</var> std::string&amp; path)
    {
        <var>unsigned</var> <var>long</var> i;
        uint8_t byte;
        <var>for</var> (i = 0; (i &lt; count); ++i) {
            byte = (uint8_t)file.get();
            <var>if</var> (file.bad()) {
                std::stringstream sstream;
                sstream &lt;&lt; error_colors[0] &lt;&lt; error_colors[1]
                        &lt;&lt; <kbd>"Read error in file \""</kbd> &lt;&lt; path &lt;&lt; <kbd>"\""</kbd>;
                <var>throw</var> std::runtime_error(sstream.str().c_str());
            } <var>else</var> <var>if</var> (file.eof()) {
                <var>break</var>;
            } <var>else</var> {
                bytes[i] = byte;
            }
        }
        <var>return</var> i;
    }

    <var>static</var> <var>int</var> viewhex(std::ifstream&amp; file, <var>const</var> std::string&amp; path)
    {
        <var>static</var> <var>const</var> <var>unsigned</var> <var>long</var> bytes_per_line = 16;
        <var>unsigned</var> <var>long</var> offset = 0;
        <var>while</var> (<var>true</var>) {
            std::vector&lt;uint8_t&gt; bytes(bytes_per_line);
            print_offset(offset);
            std::cout &lt;&lt; <kbd>"  "</kbd>;
            offset += read_bytes(bytes, bytes_per_line, file, path);
            print_hex(bytes);
            std::cout &lt;&lt; <kbd>"  "</kbd>;
            print_ascii(bytes);
            std::cout.put(<kbd>'\n'</kbd>);
            <var>if</var> (file.eof())
                <var>break</var>;
        }
        std::cout &lt;&lt; <kbd>"Above file: "</kbd> &lt;&lt; path &lt;&lt; std::endl;
        <var>return</var> 0;
    }

    <var>static</var> <var>int</var> viewhex(<var>const</var> std::string&amp; path)
    {
        std::ifstream file(path.c_str());
        <var>if</var> (!(file.is_open())) {
            std::stringstream sstream;
            sstream &lt;&lt; error_colors[0] &lt;&lt; error_colors[1]
                    &lt;&lt; <kbd>"Error opening file \""</kbd> &lt;&lt; path &lt;&lt; <kbd>"\""</kbd>;
            <var>throw</var> std::runtime_error(sstream.str().c_str());
        }
        <var>int</var> ret = viewhex(file, path);
        file.close();
        <var>return</var> ret;
    }
}

<var>int</var> main (<var>int</var> argc, <var>char</var>* argv[])
{
    <var>int</var> i;
    <var>if</var> (argc &lt; 2) {
        std::cerr &lt;&lt; ansi::color(ansi::colors::red) &lt;&lt; <kbd>"Usage: "</kbd> &lt;&lt; argv[0]
                  &lt;&lt; <kbd>" [file [file 2 [... [file n]]]]"</kbd> &lt;&lt; ansi::reset()
                  &lt;&lt; std::endl;
        std::exit(EXIT_FAILURE);
    }
    <var>for</var> (i = 1; i &lt; argc; ++i)
        hexview::viewhex(argv[i]);
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','NwTbqMoL');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~146.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='GEw0RXSz')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgianwtbqmol'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgianwtbqmol'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
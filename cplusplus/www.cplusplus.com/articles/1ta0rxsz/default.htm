<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/1ta0rxsz/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Sorting Algorithms - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Sorting Algorithms</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/closed_account_s6k9gnh0/default.htm" rel="author">closed account S6k9GNh0</a></b></div>
<div id="I_date">Jun 7, 2010 (last update: Jun 8, 2010)</div>
<h1>Sorting Algorithms</h1>
<div id="I_score">Score: 3.2/5 (53 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<u><b><div class="center">Introduction</div></b></u>
In common programming, you don't often find yourself coming across a need for direct sorting. The user will usually want the info in whatever order it is given for usual reasons. However, if the user wants something sorted in a certain direction, how would you go about doing it? <br>
<br>
Say you have a 1, 5, 10, 20, and 50 dollar bill in the order of 50 - 10 - 20 - 1 - 5. We has humans can easily sort this money into least to greatest or greatest to least. But we take for granted the actual undertaking of the common practice. <br>
<br>
When we try an implement one via machine code, we hit algebraic equations, recursion functions, numbers we've never seen. We can't simply put it in order like we do with our brain however easy that seems. However, we can simulate how we order our dollar bills. <br>
<br>
For instance, take the dollar bills and try and sort them. By default and by nature, your brain should have told you to go by some pattern. My brain told me the highest numbers were 50 and 1 then placed them in respective locations. Then I look for something of equal or lower value and place it underneath and then keep iterating looking for more of the same value or lower until I come up with a lowest. And then I try and reiterate trying to find the second lowest, and then next highest, and so on until its organized.<br>
<br>
Implementing it in this respect is easy but to be honest, its often not very efficient. Our brains take a simple route because it has the power to calculate it in milliseconds and we often can't tell the difference. If our brain chose a too difficult a pattern to organize the bills, it will choose another path that is more simple or will continue going about the same pattern in a different manner. However, you never change algorithms via digital sort and you are always trying to find the most optimized and fastest ways to code possible. This is why the algorithm article is here. It shows not only different algorithms but the math behind it and where to apply them.<br>
<br>
<br>
<u><b><div class="center">Terms and Concepts</div></b></u>
Some terms and concepts you may need to know will also not be explained by myself as I am not one to really teach the concepts, but more to understand it in my own little world. Instead, I will give you directions on where to look for understanding of the concepts and terms, starting with Big O notation.<br>
<br>
Big O notation is simply a mathematical way to express the time it takes for a function to finish: <a href="../../../rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/default.htm">http://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/</a>
<br>
Another concept you will need to understand is algorithm complexity, which is the a judgement of difficulty of the algorithm given which often measures space and timing of the algorithm. A much better source of information would be here on the wiki: <a href="../../../en.wikipedia.org/wiki/computational_complexity_theory#Machine_models_and_complexity_measures">http://en.wikipedia.org/wiki/Computational_complexity_theory#Machine_models_and_complexity_measures</a>
<br>
I personally and honestly do not understand all there is to it, just enough to understand the measurement of complexity. Another article worth looking at would be this: <a href="../../../www.progressive-coding.com/tutorial.phpid1">http://www.progressive-coding.com/tutorial.php?id=1</a>
<br>
Another concept to understand would be algorithm stability which is the ability of an algorithm to keep the relative locations of an element of the same value in the sorted array. Say for instance, you have 2 five dollar bills and they need to be sorted and one has a check mark on them and the other does not. In a stable algorithm, the one in front of the other will still be in front of the other after sorted. This is considered having a stable algorithm. In most cases its not needed but in the case that you have a second value attached to the array of values you want sorted, it is a must to understand algorithm stability and how it affects you.<br>
<br>
And last but not least is algorithm adaptability. This is the ability of the algorithm to take an already partially-sorted array and be able to continue where it left off and finish sooner than if it it wasn't pre-sorted. This is often a big deal since it can exponentially save you time.<br>
<br>
Once you understand the basics of these terms and concepts, you may be able to follow and compare different algorithms and understand why I choose one algorithm over the other.<br>
<br>
<br>
<u><b><div class="center">Comparison Sort Algorithms</div></b></u>
The most common type of algorithm in use today is called the comparison sort which is a general category of algorithms. All it means is that the algorithm compares one element to another and reacts based on the outcome of that comparison to sort the array.<br>
<br>
A common comparison sort is the bubble sort which is in a subcategory of comparison sorting called exchange sorting, which consists of swapping adjacent items until the sort is finished:<br>
<br>
<a href="../../../codepad.org/yeu6tmzb">http://codepad.org/YeU6tmzB</a>
Slightly optimized version: <a href="../../../codepad.org/ycjpefmn">http://codepad.org/YCJpEFMN</a>
<br>
It's often inefficient and is used for simplistic, educational reasons only.  The complexity of the algorithm on average is O(n^2) which means that it is very bad on larger lists. The complexity on best case performance would be O(n) in the case that the array is already sorted. However, it is easy to implement, stable, and adaptable.<br>
<br>
A step up from this type of sort is the insertion sort which is a type and sort on it's own with many variations. It's a bit more efficient than bubble sort although the complexity is often O(n^2) as is the inefficient bubble sort we talked about. It has many advantages over bubble sort but most of which aren't good enough to be used commonly for larger lists. It's also a bit more complex to implement. Here is an example: <br>
<br>
<a href="../../../codepad.org/uuzqoqc9">http://codepad.org/UUZqOqC9</a>
<br>
bbl, gotta get up rather early.<br>
It wasn't finished but thinks for being blunt Bazzy. At least you gave reasons why, unlike some.<br>
<br>
1) I will describe their complexity and probably Big O notation while I'm at it.... theirs plenty of crap I missed.<br>
2) I didn't comment because I failed to see where to comment. If you would comment it for me, that would be cool.<br>
3) I explained that they are flexible and work with other types which is why I used templates to give an example.<br>
4) I used codepad so I could give full working programs with results and not use my wording limitations.<br>
<br>
bbl, gotta run.</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','1TA0RXSz');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~106.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='S6k9GNh0')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia1ta0rxsz'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia1ta0rxsz'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/1075fsew/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Pointers and References - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Pointers and References</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/angelrapallo/default.htm" rel="author">angelrapallo</a></b></div>
<div id="I_date">Oct 20, 2012 (last update: Oct 21, 2012)</div>
<h1>Pointers and References</h1>
<div id="I_score">Score: 3.1/5 (152 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
A pointer or a Reference (Alias according to some). Does the complier really care? <br>
<br>
Lets do this simple experiment, I think it can help any one trying to understand pointers and references.<br>
<br>
lets declare two flavors of some simple function<br>
but lets use only the int& version for now.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>      <cite>//void some_function(int* i){cout &lt;&lt; "\nvalue is " &lt;&lt; *i &lt;&lt; endl;};</cite>
      <var>void</var> some_function(<var>int</var>&amp; i){cout &lt;&lt; <kbd>"\nvalue is "</kbd> &lt;&lt; i &lt;&lt; endl;};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
the difference is that one takes a reference to an integer and the other<br>
takes a pointer. So far so simple and good, now lets call the function using <br>
pointers.<br>
<br>
initialize things. this is only so that we need to re cast fp<br>
later, I mean it makes no sense other than for the example here.<br>
so now fp is a pointer to some byte. it does not know he points<br>
to a function anymore.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>      <var>char</var>* fp = <var>reinterpret_cast</var>&lt;<var>char</var>*&gt;(&amp;some_function);
      <var>int</var> ii = 5;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
first call to some_function recasting fp<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>      
      <var>reinterpret_cast</var>&lt;<var>void</var>(*)(<var>int</var>&amp;)&gt;(fp)(ii);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
this will output the value in ii which is 5.<br>
<br>
so no problem all simple.<br>
<br>
second call to some_function<br>
Now lets call it with a slight change<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>  
    <var>reinterpret_cast</var>&lt;<var>void</var>(*)(<var>int</var>*)&gt;(fp)(&amp;ii);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
this will out the exact same 5 of course because is calling<br>
the same function. but notice that I cast the pointer using int*<br>
and not int&, and the function declaration we are using is<br>
the int& one. <br>
<br>
In the first call we casted using the correct type and we did not<br>
have to call using &ii. In the second case because we casted using int*<br>
we needed to call using &ii to convert it to a POINTER.<br>
<br>
I think this simple example shows you that the compiler does not care much whe it sees a reference and some one calling it with a different signature like<br>
int*, because it by then changed the int& into int* every where so.<br>
<br>
In other words as far as the compiler is concerned it only sees<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>void</var> some_function(<var>int</var>* i){cout &lt;&lt; <kbd>"\nvalue is "</kbd> &lt;&lt; *i &lt;&lt; endl;};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
even if you wrote as <br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>void</var> some_function(<var>int</var>&amp; i){cout &lt;&lt; <kbd>"\nvalue is "</kbd> &lt;&lt; i &lt;&lt; endl;};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
and the call using the pointer with the reference will be changed into<br>
the call using the pointer.<br>
<br>
you can play around commenting the code and calling the function in the two manners and see how they all work.<br>
<br>
well I hope this helps or at least entertains some one.<br>
<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','1075fSEw');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~53.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='j37oGNh0')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia1075fsew.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia1075fsew'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
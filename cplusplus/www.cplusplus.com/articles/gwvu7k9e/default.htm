<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/gwvu7k9e/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>BMP Loader - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">BMP Loader</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/fredbill_30/default.htm" rel="author">Fredbill 30</a></b></div>
<div id="I_date">Sep 8, 2013 (last update: Sep 8, 2013)</div>
<h1>BMP Loader</h1>
<div id="I_score">Score: 3.5/5 (130 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<U><B>INTRO</B></U>
<br>
If you clicked on this article, you must want to load a .bmp file into your applications.<br>
<br>
Although .bmp files may be large in size, they're still widely used in many applications, and well documented on the internet.<br>
<br>
Now there are many tutorials on the internet for doing this, however they mostly use the C way of doing it. This will be a C++ tutorial, <U><I>NOT</I></U> a C one.<br>
<br>
<B>====================</B>
<br>
<br>
<U><B>THINGS TO KNOW</B></U>
<br>
This tutorial assumes you're using windows, but it doesn't use windows specific functions. You can easily write your structures. Wikipedia has a pretty good representation of the bitmap headers.<br>
<br>
This also uses OpenGL, but it shouldn't be too hard to port to DirectX.<br>
<br>
Also, we have a new type. Uint8's are essentially <span class="auto"><code class="source"><var>unsigned</var> <var>char</var></code></span>s. We also have to include fstream for this.<br>
<br>
<B>====================</B>
<br>
<br>
<U><B>TUTORIAL</B></U>
<br>
Alright now let's start. We'll have a function that returns a GLuint for our texture.<br>
<br>
The function takes 2 parameters.<br>
<span class="auto"><code class="source"><var>int</var> LoadBMP(<var>const</var> <var>char</var>* location, GLuint &amp;texture);</code></span>
<br>
The first is the location of the file. The second is a reference to a texture unsigned int, which is the ID of the texture generated.<br>
<br>
Alright now get to actual code. We first start off with four pointers, and we'll set 'em to nullptr (or NULL if you'd like).<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code>	Uint8* datBuff[2] = {<var>nullptr</var>, <var>nullptr</var>}; <cite>// Header buffers</cite>

	Uint8* pixels = <var>nullptr</var>; <cite>// Pixels</cite>

	BITMAPFILEHEADER* bmpHeader = <var>nullptr</var>; <cite>// Header</cite>
	BITMAPINFOHEADER* bmpInfo   = <var>nullptr</var>; <cite>// Info </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
They're really self explanitory.<br>
<br>
We use fstream, and open up a file, then check if it's open.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code>	<cite>// The file... We open it with it's constructor</cite>
	std::ifstream file(location, std::ios::binary);
	<var>if</var>(!file)
	{
		std::cout &lt;&lt; <kbd>"Failure to open bitmap file.\n"</kbd>;

		<var>return</var> 1;
	}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Now, we allocate memory for the headers, get the values with the data buffers.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code>	<cite>// Allocate byte memory that will hold the two headers</cite>
	datBuff[0] = <var>new</var> Uint8[<var>sizeof</var>(BITMAPFILEHEADER)];
	datBuff[1] = <var>new</var> Uint8[<var>sizeof</var>(BITMAPINFOHEADER)];

	file.read((<var>char</var>*)datBuff[0], <var>sizeof</var>(BITMAPFILEHEADER));
	file.read((<var>char</var>*)datBuff[1], <var>sizeof</var>(BITMAPINFOHEADER));</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Once we have the data loaded, we construct the loaded data into the headers.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>	<cite>// Construct the values from the buffers</cite>
	bmpHeader = (BITMAPFILEHEADER*) datBuff[0];
	bmpInfo   = (BITMAPINFOHEADER*) datBuff[1];</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Since we have that loaded, we check if the file is a BMP file.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code>	<cite>// Check if the file is an actual BMP file</cite>
	<var>if</var>(bmpHeader-&gt;bfType != 0x4D42)
	{
		std::cout &lt;&lt; <kbd>"File \""</kbd> &lt;&lt; location &lt;&lt; <kbd>"\" isn't a bitmap file\n"</kbd>;
		<var>return</var> 2;
	}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Allocate pixel memory, then jump to where the pixel data starts and read.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code>	<cite>// First allocate pixel memory</cite>
	pixels = <var>new</var> Uint8[bmpInfo-&gt;biSizeImage];

	<cite>// Go to where image data starts, then read in image data</cite>
	file.seekg(bmpHeader-&gt;bfOffBits);
	file.read((<var>char</var>*)pixels, bmpInfo-&gt;biSizeImage);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Since bitmaps store pixels as BGR, we convert it to RGB.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code>	<cite>// We're almost done. We have our image loaded, however it's not in the right format.</cite>
	<cite>// .bmp files store image data in the BGR format, and we have to convert it to RGB.</cite>
	<cite>// Since we have the value in bytes, this shouldn't be to hard to accomplish</cite>
	Uint8 tmpRGB = 0; <cite>// Swap buffer</cite>
	<var>for</var> (<var>unsigned</var> <var>long</var> i = 0; i &lt; bmpInfo-&gt;biSizeImage; i += 3)
	{
		tmpRGB        = pixels[i];
		pixels[i]     = pixels[i + 2];
		pixels[i + 2] = tmpRGB;
	}

	<cite>// Set width and height to the values loaded from the file</cite>
	GLuint w = bmpInfo-&gt;biWidth;
	GLuint h = bmpInfo-&gt;biHeight;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Now we simply generate the texture with OpenGL. If you're using DirectX, ignore this, and use whatever you do to create textures.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br></code></pre></td>
<td class="source"><pre><code>	<cite>/*******************GENERATING TEXTURES*******************/</cite>

	glGenTextures(1, texture);             <cite>// Generate a texture</cite>
	glBindTexture(GL_TEXTURE_2D, texture); <cite>// Bind that texture temporarily</cite>

	GLint mode = GL_RGB;                   <cite>// Set the mode</cite>

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	 
	<cite>// Create the texture. We get the offsets from the image, then we use it with the image's</cite>
	<cite>// pixel data to create it.</cite>
	glTexImage2D(GL_TEXTURE_2D, 0, mode, w, h, 0, mode, GL_UNSIGNED_BYTE, pixels);

	<cite>// Unbind the texture</cite>
	glBindTexture(GL_TEXTURE_2D, NULL);

	<cite>// Output a successful message</cite>
	std::cout &lt;&lt; <kbd>"Texture \""</kbd> &lt;&lt; location &lt;&lt; <kbd>"\" successfully loaded.\n"</kbd>;

	<cite>// Delete the two buffers.</cite>
	<var>delete</var>[] datBuff[0];
	<var>delete</var>[] datBuff[1];
	<var>delete</var>[] pixels;

	<var>return</var> 0; <cite>// Return success code </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And that's about it. Please rate this article.<br>
<br>
Have fun with your new BMP Texture loader!<br>
<br>
<B>====================</B></div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','GwvU7k9E');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~69.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='N36fSL3A')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiagwvu7k9e'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiagwvu7k9e'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
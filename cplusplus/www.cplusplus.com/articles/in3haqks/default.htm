<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/in3haqks/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Input correction - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Input correction</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/chrisname/default.htm" rel="author">chrisname</a></b></div>
<div id="I_date">Feb 16, 2012 (last update: Feb 16, 2012)</div>
<h1>Input correction</h1>
<div id="I_score">Score: 3.5/5 (49 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<b>Note</b>: I'm not 100% confident that my algorithm for comparing strings (see the function "similarity()" below) is correct; if anyone has any improvements to make, feel free to PM me.<br>
<br>
I've written a function which can suggest corrections to invalid user input.<br>
<br>
As an example, when using git(1), if you type "git comit" it says, "Did you mean this? / commit". It detects that the parameter ("comit") is invalid and then suggests a correction ("commit"). That's what this function does (or tries to do).<br>
<br>
It does this by comparing two strings and generating a 'score' for how similar they are (by summing the absolute values of the return values of strcmp(3) when applied to the two strings; zero is the most similar, there isn't technically a limit on how dissimilar two strings can be). It uses these scores to build an associative array consisting of the score and the corresponding string. The array is then sorted (using qsort(3)) so that the keys are in the correct order.<br>
<br>
Source code:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br></code></pre></td>
<td class="source"><pre><code><cite>/* Copyright (C) 2012 Chrisname.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</cite>
<dfn>#define MIN(a, b)	(((a) &lt; (b)) ?  (a) : (b))</dfn>
<dfn>#define MAX(a, b)	(((a) &gt; (b)) ?  (a) : (b))</dfn>
<dfn>#define ABS(x)		(((x) &lt; 0)   ? -(x) : (x))</dfn>

<cite>/**
 * A simple associative array.
 */</cite>
<var>struct</var> assoc_array {
	<var>int</var>		key;	<cite>/**&lt; The key value. */</cite>
	<var>const</var> <var>char</var>*	value;	<cite>/**&lt; The string value. */</cite>
};

<cite>/* Comparator for qsort(3) */</cite>
<var>static</var> <var>int</var> qsort_compare_keys(<var>const</var> <var>void</var>* p1, <var>const</var> <var>void</var>* p2)
{
	<var>struct</var> assoc_array* node1 = (<var>struct</var> assoc_array*)p1;
	<var>struct</var> assoc_array* node2 = (<var>struct</var> assoc_array*)p2;
	<cite>/* Return the difference between 'node1-&gt;key' and 'node2-&gt;key'
	 */</cite>
	<var>return</var> node1-&gt;key - node2-&gt;key;
}

<cite>/** Returns the absolute similarity score for 's1' and 's2' */</cite>
<var>static</var> <var>int</var> similarity(<var>const</var> <var>char</var>* s1, <var>const</var> <var>char</var>* s2)
{
	<var>int</var> score = 0;
	<var>unsigned</var> <var>long</var> len1 = strlen(s1), len2 = strlen(s2), len = MAX(len1, len2);
	<var>int</var> i = 0;
	<cite>/* Sum the absolute values of the differences between each character of
	 * s1 and s2 given by strcmp(3)
	 */</cite>
	<var>while</var> (len --&gt; 0) {
		<var>int</var> abs;
		<cite>/* If one string has ended, compare the rest of the other string
		 * with zero. Otherwise, compare the two strings as normal.
		 */</cite>
		<var>if</var> (len1 &gt;= i &amp;&amp; len2 &lt; i) {
			<var>int</var> x = 0 - s1[i];
			score += ABS(x);
		} <var>else</var> <var>if</var> (len2 &gt;= i &amp;&amp; len1 &lt; i) {
			<var>int</var> x = 0 - s2[i];
			score += ABS(x);
		} <var>else</var> {
			abs = ABS(strcmp(s1 + i, s2 + i));
			score += abs;
			<cite>/* Skip past the non-matching char so we don't compare it again
			 */</cite>
			<var>while</var> (s1[i] == s2[i] &amp;&amp; len &gt; 0) {
				++i;
				--len;
			}
			++i;
		}
	}
	<var>return</var> score;
}

<cite>/**
 * \brief	Suggests corrections to user input.
 * \param key	The key string.
 * \param values An array of strings to compare with the key string.
 * \param count	The number of elements in array 'values'.
 * \param n	The number of outputs to print.
 * \param reverse Whether to print output in reverse.
 * \param detail Whether to print detailed information.
 */</cite>
<var>void</var> correct(<var>const</var> <var>char</var>* key, <var>char</var>* values[], <var>int</var> count, <var>long</var> n, <var>int</var> reverse, <var>int</var> detail)
{
	<var>int</var> i;
	<var>struct</var> assoc_array* aa = malloc(<var>sizeof</var>(<var>struct</var> assoc_array) * count);
	<cite>/* Build an associative array out of values
	 */</cite>
	<var>for</var> (i = 0; i &lt; count; ++i) {
		aa[i].key   = similarity(key, values[i]);
		aa[i].value = values[i];
	}
	<cite>/* Sort 'aa' by key
	 */</cite>
	qsort(aa, count, <var>sizeof</var>(<var>struct</var> assoc_array), qsort_compare_keys);
	<cite>/* Print the values in key order
	 */</cite>
	<var>if</var> (n == 0)
		n = count;
	<var>if</var> (reverse) {
		<var>if</var> (n)
			n = MAX(n, count - n);
		<var>while</var> (n --&gt; 0) {
			<var>if</var> (detail)
				printf(<kbd>"aa[%d] = { %d, %s }\n"</kbd>, n, aa[n].key,
								aa[n].value);
			<var>else</var>
				printf(<kbd>"%s\n"</kbd>, aa[n].value);
		}
	} <var>else</var> {
		<var>if</var> (n)
			n = MIN(n, count);
		<var>for</var> (i = 0; i &lt; n; ++i) {
			<var>if</var> (detail)
				printf(<kbd>"aa[%d] = { %d, %s }\n"</kbd>, i, aa[i].key,
								aa[i].value);
			<var>else</var>
				printf(<kbd>"%s\n"</kbd>, aa[i].value);
		}
	}
	free(aa);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Example usage:<br>
Here is the source code of the program I created the function for, which I wrote for use in shell scripts. The code above has been omitted; simply paste it in place of the "PASTE HERE" marker in the code below.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br></code></pre></td>
<td class="source"><pre><code><cite>/*
 * correct - finds which parameter/s is/are most similar to the key parameter.
 *
 * Copyright (C) 2012 Chrisname.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</cite>
<dfn>#include &lt;getopt.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdlib.h&gt;</dfn>
<dfn>#include &lt;string.h&gt;</dfn>

<dfn>#define PROGRAM_NAME	"correct"</dfn>
<dfn>#define VERSION_MAJOR	1</dfn>
<dfn>#define VERSION_MINOR	0</dfn>
<dfn>#define VERSION_PATCH	0</dfn>

<cite>/*
 * PASTE HERE.
 */</cite>

<cite>/** Shows the usage message */</cite>
<var>static</var> <var>void</var> show_usage(<var>const</var> <var>char</var>* argv0)
{
	printf(<kbd>"correct - finds which parameter/s is/are most similar to the key parameter.\n"</kbd>
		<kbd>"Usage: %s [options] &lt;key&gt; &lt;value 1&gt; [value 2 [value ... [value n ]]]\n"</kbd>
		<kbd>"Options:\n"</kbd>
		<kbd>"\t-h,--help\tShow this help message\n"</kbd>
		<kbd>"\t-v,--version\tShow version information\n"</kbd>
		<kbd>"\t-n,--number\tSet the number of parameters to print. 0 = all. Default: 1\n"</kbd>
		<kbd>"\t-r,--reverse\tPrint output in reverse\n"</kbd>
		<kbd>"\t-d,--detail\tPrint more detailed information\n"</kbd>, argv0);
}

<cite>/** Shows the version message */</cite>
<var>static</var> <var>void</var> show_version()
{
	printf(PROGRAM_NAME <kbd>" version %d.%d%d\n"</kbd>, VERSION_MAJOR, VERSION_MINOR,
								VERSION_PATCH);
}

<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
	<var>if</var> (argc &lt; 2) {
		show_usage(argv[0]);
		exit(EXIT_FAILURE);
	}
	<var>int</var> reverse = 0, detail = 0;
	<var>long</var> n = 1;
	<var>for</var> (;;) {
		<var>static</var> <var>const</var> <var>char</var>* optstring = <kbd>"hvn:rd"</kbd>;
		<var>static</var> <var>struct</var> option longopts[] = {
			{ <kbd>"help"</kbd>,	0, NULL, <kbd>'h'</kbd> },
			{ <kbd>"version"</kbd>,	0, NULL, <kbd>'v'</kbd> },
			{ <kbd>"number"</kbd>,	1, NULL, <kbd>'n'</kbd> },
			{ <kbd>"reverse"</kbd>,	0, NULL, <kbd>'r'</kbd> },
			{ <kbd>"detail"</kbd>,	1, NULL, <kbd>'d'</kbd> }
		};
		<var>int</var> c = getopt_long(argc, argv, optstring, longopts, NULL);
		<var>if</var> (c &lt; 0)
			<var>break</var>;
		<var>switch</var> (c) {
			<var>case</var> <kbd>'h'</kbd>:
				show_usage(argv[0]);
				<var>break</var>;
			<var>case</var> <kbd>'v'</kbd>:
				show_version();
				<var>break</var>;
			<var>case</var> <kbd>'n'</kbd>:
				n = strtol(optarg, NULL, 10);
				<var>break</var>;
			<var>case</var> <kbd>'r'</kbd>:
				reverse = 1;
				<var>break</var>;
			<var>case</var> <kbd>'d'</kbd>:
				detail = 1;
				<var>break</var>;
			<var>default</var>:
				<var>break</var>;
		}
	}
	<var>if</var> ((argc - optind) &lt; 2) {
		show_usage(argv[0]);
		exit(EXIT_FAILURE);
	}
	correct(argv[optind], &amp;argv[optind + 1], argc - optind - 1, n, reverse, detail);
	<var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>$ ./correct -n 0 hello hallo hail help hello
hello                    &lt;-- This string is equal to the key string
hallo                    &lt;-- This string has a similarity of 4 to the key string
help                     &lt;-- This string has a similarity of 115 to the key string
hail                     &lt;-- This string has a similarity of 118 to the key string</samp></pre></td></tr></table></div></div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','iN3hAqkS');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~91.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='GEw0RXSz')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiain3haqks.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiain3haqks'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
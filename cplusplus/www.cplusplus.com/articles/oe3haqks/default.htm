<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/oe3haqks/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Dynamically sorting both keys and values - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Dynamically sorting both keys and values</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/shimon/default.htm" rel="author">shimon</a></b></div>
<div id="I_date">Sep 24, 2014 (last update: Oct 30, 2014)</div>
<h1>Dynamically sorting both keys and values</h1>
<div id="I_score">Score: 3.4/5 (30 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
Well, you might have faced this problem in your coding life. Also you might know the answer already. The problem was about the std::map or say std::multimap, both of them are special type of containers who can sort the items by a comparing function pointer(or a built-in one like std::less). They sort it when you are inserting a new item, that's of course so handy, because you don't wanna call a sorting function every time you need to! Actually you will never explicitly call any sorting function on your map or multimap, coz it's already sorted! Now here's my problem-<br>
Say, I have a map like this -<br>
<PRE >
D - 1
D - 2 
B - 3
A - 4
</pre> <br>
Now I need to sort them like this -<br>
<PRE >
A - 4 
B - 3 
D - 2
D - 1
</pre>
Here's the explanation of this sorting- first elements(A,B,D) will be sorted in ascending order A --&gt; B --&gt; D regardless of the second element, secondly if the first elements are equal (i.e 2 Ds here) then they will be sorted as the descending order of their corresponding second element.<br>
Using std::multimap will end-up with only the first sorting part, so I took advantage of templates and inheritances. Here's the code -<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;utility&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>using</var> <var>namespace</var> std;

<var>template</var> &lt;<var>class</var> _A, <var>class</var> _B, <var>class</var> _Compare=less&lt;_A&gt; &gt;
<var>class</var> MMap : <var>public</var> set &lt; pair&lt; _A, _B &gt;, _Compare &gt;
{
        <var>public</var> :
                MMap():set&lt; pair&lt; _A, _B &gt;, _Compare &gt;(){};
                ~MMap(){};
};

<var>template</var>&lt; <var>typename</var> InPair &gt;
<var>struct</var> MMapComp{
        <var>bool</var> <var>operator</var>() (InPair a , InPair b){
                <var>if</var>( a.first == b.first ) <var>return</var> a.second &gt; b.second;
                <var>else</var>
                        <var>return</var> a.first &lt; b.first;
        }
};

<var>int</var> main(<var>int</var> argc, <var>char</var> ** argv)
{
        MMap&lt;<var>char</var>,<var>int</var>,MMapComp&lt; pair&lt;<var>char</var> , <var>int</var> &gt; &gt; &gt; test;

        test.insert(make_pair(<kbd>'D'</kbd>,1));
        test.insert(make_pair(<kbd>'D'</kbd>,2));
        test.insert(make_pair(<kbd>'B'</kbd>,3));
        test.insert(make_pair(<kbd>'A'</kbd>,4));

        <var>for</var>( MMap&lt;<var>char</var>,<var>int</var> &gt;::iterator it = test.begin(); it != test.end(); it++ )
                cout &lt;&lt; (*it).first &lt;&lt; <kbd>"\t"</kbd> &lt;&lt; (*it).second &lt;&lt; endl;
        <var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
And here's the output - <br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
A	4
B	3
D	2
D	1
</samp></pre></td></tr></table></div>
<br>
Ok, I apologize for my undocumented code :) But it's not so hard to read actually. Is it ? </div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','oE3hAqkS');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~42.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='ShXSE3v7')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaoe3haqks.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaoe3haqks'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
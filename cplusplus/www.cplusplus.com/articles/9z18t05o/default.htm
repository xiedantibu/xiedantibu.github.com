<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/9z18t05o/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Printer Stream  - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Printer Stream </li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/guestgulkan/default.htm" rel="author">guestgulkan</a></b></div>
<div id="I_date">Apr 18, 2010 (last update: Apr 18, 2010)</div>
<h1>Printer Stream </h1>
<div id="I_score">Score: 3.7/5 (60 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
A little while ago, someone  made a post like this<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>ostream printer;
printer &lt;&lt; <kbd>"Some text"</kbd> &lt;&lt; endl;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
and wondered why it didn't print.<br>
<br>
So I thought I'd write a printer stream (and get to learn about doing stream manipulators at the same time.)<br>
<br>
Here is the 'proof of concept' code.<br>
Most of the comments have been stripped to fit the pstream.cpp file in one post.<br>
It is for Windows only.<br>
It is a working version - but obviously not finished.<br>
<br>
It is for printing text (and text files) - so don't bother trying to print binary files like word files or pdf files.  :-)<br>
<br>
<br>
Enjoy.<br>
The pstream header file:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef P_STREAM_H</dfn>
<dfn>#define P_STREAM_H</dfn>

<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>



<var>namespace</var> pst
{
   
    <cite>//stream status</cite>
    <var>const</var> <var>int</var>  GOOD = 0x0000;
    <var>const</var> <var>int</var>  FAIL = 0x0001;

    <cite>//margins ninimum values</cite>
    <var>const</var> <var>int</var> MARGINMIN = 3; <cite>//millimetres</cite>



    <var>template</var> &lt;<var>typename</var> T&gt; <var>class</var> pstreamManip;

    <cite>/*!
    \brief class pstream 
    */</cite>
    <var>class</var> pstream
    {

    <var>public</var>:
        pstream();
        pstream(std::string whichPrinter);
        ~pstream();

        <var>operator</var> <var>bool</var>()
        {
            <var>return</var> !streamStatus;
        }

        
        <var>void</var> setTitle(std::string newTitle) { title = newTitle; }
        <var>void</var> setPageNumbers(<var>bool</var> bVal)      { pageNumbers = bVal;}
        <var>void</var> setTabSize(<var>int</var> newTabSize)     { tabSize = newTabSize;}
        
        <cite>/*!
        The following are member functions NOT manipulators
        */</cite>
        <var>void</var> setLeftMargin(<var>int</var> newMargin)   {leftMargin = newMargin &lt;= MARGINMIN? MARGINMIN:newMargin; }
        <var>void</var> setTopMargin(<var>int</var> newMargin)    {topMargin = newMargin &lt;= MARGINMIN? MARGINMIN:newMargin; };
        <var>void</var> setRightMargin(<var>int</var> newMargin)   {rightMargin = newMargin &lt;= MARGINMIN? MARGINMIN:newMargin; };
        <var>void</var> setBottomMargin(<var>int</var> newMargin)   {bottomMargin = newMargin &lt;= MARGINMIN? MARGINMIN:newMargin; };

        
        
        <cite>//Insertion Overloads</cite>
        <cite>//Add a string</cite>
        pstream&amp; <var>operator</var> &lt;&lt; (std::string name);
        <cite>//Add a char buffer</cite>
        pstream&amp; <var>operator</var> &lt;&lt; (<var>char</var>* name);
        <cite>//Add a file</cite>
        pstream&amp; <var>operator</var> &lt;&lt; (std::ifstream &amp; inFile);

        <cite>//other insertion overlaods</cite>
        pstream&amp; <var>operator</var> &lt;&lt; (pstream &amp; (*ptr)(pstream&amp;)); <cite>//manipulator with no parameters</cite>
        <cite>/*!
        \brief Insertion overload for with manipulators with one parameter
        Note this is a template function so we put the definition here - much easier
        */</cite>
        <var>template</var> &lt;<var>typename</var> T&gt;
        pstream&amp; <var>operator</var> &lt;&lt; (pstreamManip&lt;T&gt; manip)
        {
            <var>return</var> manip(*<var>this</var>);
        }

        <cite>/*!
        \brief Useful static functions
        */</cite>
        <var>static</var> std::vector&lt;std::string&gt; getPrinterNames();
        

    <var>private</var>:
        std::string defaultPrinter;
        <var>int</var> streamStatus;
        std::vector&lt;std::string&gt; lines;
        <var>int</var> leftMargin;
        <var>int</var> rightMargin;
        <var>int</var> topMargin;
        <var>int</var> bottomMargin;
        std::string title;
        <var>bool</var> pageNumbers;
        <var>int</var> tabSize;

        
        <cite>//Copy Constructor - private and no body</cite>
        pstream(<var>const</var> pstream&amp; other);

        
        <cite>/*!
        \brief manipulators
        These are mostly friends of pstream.
        They are in the pst namespace
        */</cite>
        
        <cite>/*!
        \brief Manipulators taking no arguments
        */</cite>
        <var>friend</var> pstream&amp; flushp (pstream&amp; p);
        <cite>/*!
        \brief manipulators taking one or more arguments
        These are structure based
        */</cite>
        
        <var>template</var> &lt;<var>typename</var> T&gt;
        <var>friend</var> pstreamManip&lt;T&gt; setLeftMargin (T margin);

        <var>template</var> &lt;<var>typename</var> T&gt;
        <var>friend</var> pstreamManip&lt;T&gt; setRightMargin (T margin);

        <var>template</var> &lt;<var>typename</var> T&gt;
        <var>friend</var> pstreamManip&lt;T&gt; setTopMargin (T margin);

        <var>template</var> &lt;<var>typename</var> T&gt;
        <var>friend</var> pstreamManip&lt;T&gt; setBottomMargin (T margin);

        <cite>/*!
        \brief private  functions for the manipulator(s) with arguments.
        \note These are static.
        */</cite>
        <var>static</var> pstream&amp; _setMarginL(pstream &amp; p, <var>int</var> n);
        <var>static</var> pstream&amp; _setMarginR(pstream &amp; p, <var>int</var> n);
        <var>static</var> pstream&amp; _setMarginT(pstream &amp; p, <var>int</var> n);
        <var>static</var> pstream&amp; _setMarginB(pstream &amp; p, <var>int</var> n);

    };<cite>//class pstream</cite>


    <cite>/*!
    \brief The manipulator class for manipulator with one parameter
    */</cite>
    <var>template</var> &lt;<var>typename</var> T&gt;
    <var>class</var> pstreamManip 
    {
    <var>public</var>:
        pstreamManip(pstream&amp; (*fp)(pstream&amp;, T val), T arg) : pf(fp), argValue(arg){};
        pstream&amp; <var>operator</var>() (pstream &amp; ps)
        { 
            <var>return</var> (*pf)(ps, argValue);
        }

    <var>private</var>:
        pstream&amp; (*pf)(pstream&amp;, T);
        T argValue;

    }; <cite>//class pstream</cite>

    <cite>/*!
    \brief All manipulators are in the pst namespace
    */</cite>
    pstream&amp; flushp (pstream&amp; p);

    
    <var>template</var> &lt;<var>typename</var> T&gt; 
    pstreamManip&lt;T&gt; setLeftMargin (T margin)
    {
        <var>return</var> pstreamManip&lt;T&gt;(pstream::_setMarginL, margin);
    }

    <var>template</var> &lt;<var>typename</var> T&gt; 
    pstreamManip&lt;T&gt; setRightMargin (T margin)
    {
        <var>return</var> pstreamManip&lt;T&gt;(pstream::_setMarginR, margin);
    }

    <var>template</var> &lt;<var>typename</var> T&gt; 
    pstreamManip&lt;T&gt; setTopMargin (T margin)
    {
        <var>return</var> pstreamManip&lt;T&gt;(pstream::_setMarginT, margin);
    }

    <var>template</var> &lt;<var>typename</var> T&gt; 
    pstreamManip&lt;T&gt; setBottomMargin (T margin)
    {
        <var>return</var> pstreamManip&lt;T&gt;(pstream::_setMarginB, margin);
    }


} <cite>//namespace pst</cite>




<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The pstream  implementation file<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br></code></pre></td>
<td class="source"><pre><code><dfn>#undef  UNICODE</dfn>
<dfn>#undef _UNICODE</dfn>

<dfn>#include "pstream.h"</dfn>

<dfn>#include &lt;windows.h&gt;</dfn>
<dfn>#include &lt;tchar.h&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>

<var>namespace</var> pst
{

    pstream::pstream() :leftMargin(),rightMargin(),topMargin(),bottomMargin(),tabSize(4),pageNumbers(<var>false</var>)
    {
        DWORD buffSize;
        _TCHAR* pPrinterName;
        GetDefaultPrinter(0, &amp;buffSize);
        pPrinterName = <var>new</var> _TCHAR[buffSize]();
        GetDefaultPrinter (pPrinterName,&amp;buffSize);
        defaultPrinter =  pPrinterName;
        <cite>//Set the stream status</cite>
        streamStatus = (defaultPrinter == <kbd>""</kbd>)? FAIL : GOOD;
    }

    
    pstream::pstream (std::string whichPrinter) :leftMargin(), rightMargin(), topMargin (), bottomMargin(), tabSize(4), pageNumbers(<var>false</var>)
   {
       defaultPrinter = whichPrinter;
       streamStatus = (defaultPrinter == <kbd>""</kbd>)? FAIL : GOOD;     
   }

    
    
    pstream::~pstream()
    {

    }


    pstream&amp; pstream::<var>operator</var> &lt;&lt;(std::string name)
    {
        <var>if</var> (! streamStatus)
        {
            <cite>//replace all tabs by the required number of spaces</cite>
            size_t position =0;

            <var>while</var> (position != std::string::npos)
            {
                
                <var>if</var> (   (position = name.find(<kbd>'\t'</kbd>, position)     ) != std::string::npos    )
                {
                    name.replace(position,1,std::string(tabSize,<kbd>' '</kbd>) );
                }

            }

            <cite>//We will split the string up at the new line char</cite>

            position = 0;
            size_t foundPos =0;

            <var>do</var>
            {
                foundPos = name.find(<kbd>'\n'</kbd>, position);
                std::string str = name.substr(position,foundPos-position);
                lines.push_back(str);
                position = foundPos+1;
            }<var>while</var> (position != 0);
        }
        
        <var>return</var> *<var>this</var>; 
    }   
    
    pstream&amp; pstream::<var>operator</var> &lt;&lt;(<var>char</var> * name)
    {
        <var>if</var> (! streamStatus)
            <var>operator</var>&lt;&lt; (std::string(name));

        <var>return</var> *<var>this</var>;
    }


    pstream&amp; pstream::<var>operator</var> &lt;&lt; (std::ifstream &amp; inFile)
    {
        <var>if</var> (!streamStatus)
        {
            <var>if</var> (inFile)
            {
                <var>while</var> (inFile)
                {
                    std::string str;
                    std::getline(inFile,str);

                    *<var>this</var>  &lt;&lt; str ;
                }
            }
        }
        <var>return</var> *<var>this</var>;
    }



    pstream&amp; pstream::<var>operator</var> &lt;&lt;(pstream &amp;(*ptr)(pstream &amp;))
    {

        ptr(*<var>this</var>);

        <var>return</var> *<var>this</var>;

    }


    pstream&amp; flushp (pstream&amp; p)
    {
        
        <var>if</var> (!p.lines.size() ||  p.streamStatus )
        {
            <var>return</var> p;
        }
        HDC pdc;

        pdc = CreateDC(<kbd>"winspool"</kbd>,p.defaultPrinter.c_str(),NULL, NULL);

        <var>int</var> logPixelsX, logPixelsY, vRes, hRes, scaleX;

        logPixelsX = GetDeviceCaps(pdc,LOGPIXELSX);
        logPixelsY = GetDeviceCaps(pdc, LOGPIXELSY);
        vRes = GetDeviceCaps(pdc, VERTRES);
        hRes = GetDeviceCaps(pdc, HORZRES);
        scaleX = GetDeviceCaps(pdc,SCALINGFACTORX);

        TEXTMETRIC tm;
        GetTextMetrics(pdc, &amp;tm);
        <var>long</var> aveCharWidth=tm.tmAveCharWidth;
        <var>long</var> maxCharWidth=tm.tmMaxCharWidth;
        <var>long</var> charHeight =tm.tmHeight;
        <var>long</var> lineHeight = charHeight;<cite>// + tm.tmExternalLeading;</cite>

        <cite>//we need to adjust for the margins (change mm to pixels)</cite>
        <var>int</var> hPixelsMM = logPixelsX/25;
        <var>int</var> vPixelsMM = logPixelsY/25;
        <var>int</var> leftStart = ( (p.leftMargin*hPixelsMM) &gt; hRes/4)? hRes/4: p.leftMargin*hPixelsMM;
        <var>int</var> rightEnd =  ( (p.rightMargin*hPixelsMM) &gt; hRes/4)? hRes - hRes/4: hRes - p.rightMargin*hPixelsMM;
        <var>int</var> topStart = ( (p.topMargin*vPixelsMM) &gt; vRes/4)? vRes/4: p.topMargin*vPixelsMM;
        <var>int</var> bottomEnd = ( (p.bottomMargin *vPixelsMM) &gt; vRes/4)? vRes - vRes/4: vRes - p.bottomMargin*vPixelsMM;

        <cite>//Use 10 point courier font.</cite>
        HFONT hFont = CreateFont(-(logPixelsY/72)*10,0,0,0,0,0,0,0,0,0,0,0,FIXED_PITCH,<kbd>"courier"</kbd>);
        HFONT hOldFont =(HFONT)SelectObject(pdc,hFont);
        

        <cite>//start document</cite>
        DOCINFO docInfo = {0};
        docInfo.cbSize = <var>sizeof</var>(docInfo);

        StartDoc(pdc,&amp;docInfo);

        <cite>//start the pages</cite>
        <var>int</var> curPosY = topStart+lineHeight; 
        <var>int</var> curPosX= leftStart;
        <var>int</var> lastSpacePos; <cite>//used for word breaking checks</cite>

        std::vector&lt;std::string&gt;::iterator iter = p.lines.begin(), iterEnd = p.lines.end();

        StartPage(pdc); <cite>//Start the first page</cite>
        
        <var>for</var> (; iter != iterEnd ; ++iter )
        {
            std::string curStr = *iter;
            std::string tempStr;
            
            <cite>//So for empty lines we will  make the line one space long.</cite>
            <var>if</var>(curStr.length() ==0)
                curStr = <kbd>" "</kbd>;
            lastSpacePos = 0;
            <var>for</var> (<var>int</var> startIndex = 0,count =0; startIndex &lt; curStr.length() ; count ++)
            {

                <var>int</var> charWidth;
                <var>char</var> c = curStr[count];
                GetCharWidth32(pdc, curStr[count],curStr[count],&amp;charWidth);

                <var>if</var> (count &lt; curStr.length())
                {
                    <var>if</var>(c ==<kbd>' '</kbd>)
                        lastSpacePos = count;

                    <cite>//check if the character will take us past the right hannd side margin</cite>
                    <var>if</var>( (curPosX += charWidth) &gt; rightEnd)
                    {
                        <var>if</var>(lastSpacePos ==startIndex)
                        {
                            lastSpacePos = count-2; <cite>//fake a break</cite>
                        }
                        tempStr = curStr.substr(startIndex, lastSpacePos-startIndex);
                        count = lastSpacePos;<cite>//move the char indexer back to the last space position</cite>
                        startIndex = lastSpacePos;
                        <cite>//print the line </cite>

                        TextOut(pdc,leftStart,curPosY,tempStr.c_str(), tempStr.length() );

                    }
                    <var>else</var> <cite>//No we won't go past RHS margin</cite>
                    {
                        <var>continue</var>;              
                    }

                }
                <var>else</var>
                {

                    tempStr = curStr.substr(startIndex, (count)-startIndex);
                    <cite>//print</cite>
                    TextOut(pdc,leftStart,curPosY,tempStr.c_str(), tempStr.length() );

                    startIndex = count;
                }

                <cite>//calculate the next print position - start new page if req'd</cite>
                curPosX = leftStart;
                curPosY += lineHeight;
                <var>if</var> (curPosY &gt; bottomEnd)
                {
                    EndPage(pdc);
                    curPosY = topStart+lineHeight;
                    StartPage(pdc);
                }

            }  

        }
    
        EndDoc(pdc);
        p.lines.clear();
        <cite>//cleanup</cite>
        SelectObject(pdc, hOldFont);
        DeleteObject(hFont);
        DeleteDC(pdc);
        <var>return</var> p;
    }
   
    pstream&amp; pstream:: _setMarginL(pstream &amp; p, <var>int</var> margin)
    {
        p.setLeftMargin(margin);
        <var>return</var> p;
    }  
     
     pstream&amp; pstream:: _setMarginR(pstream &amp; p, <var>int</var> margin)
    {
        p.setRightMargin(margin);
        <var>return</var> p;
    }

    pstream&amp; pstream:: _setMarginT(pstream &amp; p, <var>int</var> margin)
    {
        p.setTopMargin(margin);
        <var>return</var> p;
    }

    pstream&amp; pstream:: _setMarginB(pstream &amp; p, <var>int</var> margin)
    {
        p.setBottomMargin(margin);
        <var>return</var> p;
    }  
        
    std::vector&lt; std::string&gt;  pstream::getPrinterNames()
    {

        LPBYTE buff = 0;
        DWORD buffSize =0;
        DWORD bytesNeeded;
        DWORD numPrinters=0;
        PRINTER_INFO_4 *pInfo;
        std::vector&lt;std::string&gt; names;

        <var>if</var> ( EnumPrinters(PRINTER_ENUM_LOCAL,NULL,4,
                            buff,0,&amp;bytesNeeded,
                            &amp;numPrinters) == FALSE  &amp;&amp; bytesNeeded &gt; 0)
        {
            buff = <var>new</var> byte[bytesNeeded];
            EnumPrinters(PRINTER_ENUM_LOCAL,NULL,4,buff,bytesNeeded,&amp;bytesNeeded,&amp;numPrinters);

        }

        pInfo = (PRINTER_INFO_4*)buff;
        <var>for</var> (<var>int</var> count =0; count &lt; numPrinters; count ++)
        {
            names.push_back( std::string (pInfo-&gt;pPrinterName));
            ++pInfo;          
        }
   
        <var>delete</var> [] buff;

        <var>return</var> names;

    }

}<cite>//namespace pst </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
A main program file for testing<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br></code></pre></td>
<td class="source"><pre><code><cite>// printer_stream.cpp : Defines the entry point for the console application.</cite>


<dfn>#include "pstream.h"</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<dfn>#include &lt;windows.h&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;iomanip&gt;</dfn>
<var>using</var> <var>namespace</var> std;




<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
     
    <cite>//The stream has a static function that will  give  the names of the local printers attached to the system;</cite>
    vector&lt;string&gt; printerNames = pst::pstream::getPrinterNames();
    vector&lt;string&gt;::iterator itr;
    <var>for</var> (itr = printerNames.begin(); itr != printerNames.end(); ++ itr)
    {
        cout &lt;&lt; *itr &lt;&lt; <kbd>'\n'</kbd>;
    }

    
    <cite>//Create a stream - default constructor will use the default ptinter</cite>
    pst::pstream p;

    <cite>//Set the page margins using the printer stream manipulators</cite>
    p &lt;&lt; pst::setLeftMargin(10);
    p &lt;&lt; pst::setTopMargin(20);
    p &lt;&lt; pst::setRightMargin(30);
    p &lt;&lt; pst::setBottomMargin(-50); <cite>//A zero or negative value will clamp to 0;</cite>

    <cite>//The margins can also be set using the printer stream member functions</cite>
    p.setLeftMargin(25);

    
    <cite>//We can put strings into the stream</cite>
    p &lt;&lt; string(<kbd>"This is a very long string with lots of text  way past the eend of"</kbd>
                <kbd>"the riiiight margin to test the word break function."</kbd>);
    p &lt;&lt; string(<kbd>"This second string should start on a new line??"</kbd>);

    p &lt;&lt; string(<kbd>"This short line\n has embeded newline char(s)"</kbd>);

    p&lt;&lt; string(<kbd>"This line contains\t embedded \t\t tab(s)"</kbd>);

    p &lt;&lt; <kbd>"Alonglinewithnospacestoseewhatwillhappenattheendofthelineabcdefghijklmnopqrstuvwxyz"</kbd>;

    <cite>//printing will start when we flush</cite>
    p &lt;&lt; pst::flushp;

   
    <cite>//We can insert files into the stream</cite>
    ifstream f(<kbd>"testingx.cpp"</kbd>); <cite>//use some available  text file</cite>
    p &lt;&lt; f;   
    p &lt;&lt; pst::flushp;

    <var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','9z18T05o');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~98.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='E6M4jE8b')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia9z18t05o.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia9z18t05o'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
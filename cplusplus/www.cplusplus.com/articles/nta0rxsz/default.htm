<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/nta0rxsz/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>The clone pattern - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">The clone pattern</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/jsmith/default.htm" rel="author">jsmith</a></b></div>
<div id="I_date">Jan 27, 2010</div>
<h1>The clone pattern</h1>
<div id="I_score">Score: 4.5/5 (21 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"></div>
<div id="I_content">
In order to copy an object, you have to know at compile time the<br>
object's type, because the type is the "name" of the copy constructor:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>void</var> copy_me( <var>const</var> std::string&amp; s ) {     
    std::string  s_copy( s );
    std::string* p_s_copy = <var>new</var> std::string( s );
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
I know at compile time that s has type "std::string" because it says<br>
so in the parameter list.  But what if type of s was a base class?<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code><var>class</var> Base {};
<var>class</var> Derived : <var>public</var> Base {};

<var>void</var> copy_me( <var>const</var> Base&amp; b ) {
    Base b_copy( b );   <cite>// ????</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
That doesn't quite work, because I can call copy_me() with a derived<br>
class instance, in which case the function would want to instantiate<br>
a Derived object, not a Base object.  But at compile time there is<br>
simply no way for me to know that.  Indeed, I could even call copy_me()<br>
with Base instances in one place, Derived in another, and something<br>
else (derived from Base or Derived) in a third.<br>
<br>
How can this problem be solved?<br>
<br>
The clone pattern was implemented for exactly this reason.  The<br>
clone pattern looks like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// Depending upon your needs, you might not require a base class</cite>
<cite>// clonable concept.  It would only be needed if you need to store</cite>
<cite>// clonable objects polymorphically.</cite>
<var>struct</var> clonable {
    <var>virtual</var> ~clonable() {}
    <var>virtual</var> clonable* clone() <var>const</var> = 0;
};

<var>class</var> Base : <var>public</var> clonable {
  <var>public</var>:
     <var>virtual</var> Base* clone() <var>const</var>
        { <var>return</var> <var>new</var> Base( *<var>this</var> ); }
};

<var>class</var> Derived : <var>public</var> Base {
  <var>public</var>:
     <var>virtual</var> Derived* clone() <var>const</var>
        { <var>return</var> <var>new</var> Derived( *<var>this</var> ); }
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And now, copy_me looks like:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>void</var> copy_me( <var>const</var> Base&amp; b ) {
    Base* clone = b.clone();
    <cite>// delete clone;  </cite>
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And I've successfully invoked Base's copy constructor if the<br>
"real type" of b is Base, and Derived's copy constructor if the<br>
"real type" of b is Derived.<br>
<br>
It is worth mentioning here that this technique exploits the fact that<br>
the compiler does not consider the return type of the function when<br>
determining whether or not a derived class virtual method has overridden<br>
a base class one with the same name.<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','NTA0RXSz');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~54.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='SGhbqMoL')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgianta0rxsz.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgianta0rxsz'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
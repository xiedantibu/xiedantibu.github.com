<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/nauq5di1/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Multi-Dimensional Arrays - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Multi-Dimensional Arrays</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/zaita/default.htm" rel="author">Zaita</a></b></div>
<div id="I_date">Feb 3, 2009</div>
<h1>Multi-Dimensional Arrays</h1>
<div id="I_score">Score: 4.0/5 (43 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
This is another topic we get asked quite a bit.<br>
- How do I do a 2D/3D Array?<br>
<br>
When I also started working with multi-dimensional arrays I found it hard to find the answers I wanted too. So I'll post up some info that will hopefully help other people. I'll go over both of the 2 major methods (Vector vs Pointer).<br>
<br>
<b>Vector based multi-dimensional arrays</b>
Vectors are a STL container that allow you to store pretty much anything in them. When used correctly they can be very powerful containers.<br>
<br>
They provide an added benefit that they will automatically remove the memory they use when they go out of scope. This means that objects stored within a vector do not need to be de-allocated (but pointers to objects do).<br>
<br>
You can also do some interesting things with dynamic multi-dimensional arrays with vectors. For example, if you only allocate the first dimension, then use the .push_back() to add records to the 2nd dimension it's no longer a grid, but an array with a dynamically sized 2nd dimension (much like a street of buildings each with a different amount of floors). This functionality can be achieved using pointers, but is much harder to do.<br>
<br>
A simple 2D Array with vectors:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;vector&gt;</dfn>
<var>using</var> std::vector;

<dfn>#define HEIGHT 5</dfn>
<dfn>#define WIDTH 3</dfn>

<var>int</var> main() {
  vector&lt;vector&lt;<var>double</var>&gt; &gt; array2D;

  <cite>// Set up sizes. (HEIGHT x WIDTH)</cite>
  array2D.resize(HEIGHT);
  <var>for</var> (<var>int</var> i = 0; i &lt; HEIGHT; ++i)
    array2D&lt;i&gt;.resize(WIDTH);

  <cite>// Put some values in</cite>
  array2D[1][2] = 6.0;
  array2D[3][1] = 5.5;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
A 3D Array with vectors.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;vector&gt;</dfn>
<var>using</var> std::vector;

<dfn>#define HEIGHT 5</dfn>
<dfn>#define WIDTH 3</dfn>
<dfn>#define DEPTH 7</dfn>

<var>int</var> main() {
  vector&lt;vector&lt;vector&lt;<var>double</var>&gt; &gt; &gt; array3D;

  <cite>// Set up sizes. (HEIGHT x WIDTH)</cite>
  array3D.resize(HEIGHT);
  <var>for</var> (<var>int</var> i = 0; i &lt; HEIGHT; ++i) {
    array3D&lt;i&gt;.resize(WIDTH);

    <var>for</var> (<var>int</var> j = 0; j &lt; WIDTH; ++j)
      array3D&lt;i&gt;[j].resize(DEPTH);
  }

  <cite>// Put some values in</cite>
  array3D[1][2][5] = 6.0;
  array3D[3][1][4] = 5.5;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>Pointer based multi-dimensional arrays</b>
Pointer based multi-dimensional arrays provide you with a more raw access to the objects. The benefits can be added speed and you can apply custom optimizations to them.<br>
<br>
Note: There are ways you can optimize this by combining the 2 dimensions into a single dimension (HEIGHTxWIDTH). I leave the discussion of this out, as it's a more advanced topic for people already familiar with this topic.<br>
<br>
A simple 2D Array:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><dfn>#define HEIGHT 5</dfn>
<dfn>#define WIDTH 3</dfn>

<var>int</var> main() {
  <var>double</var> **p2DArray;

  <cite>// Allocate memory</cite>
  p2DArray = <var>new</var> <var>double</var>*[HEIGHT];
  <var>for</var> (<var>int</var> i = 0; i &lt; HEIGHT; ++i)
    p2DArray&lt;i&gt; = <var>new</var> <var>double</var>[WIDTH];

  <cite>// Assign values</cite>
  p2DArray[0][0] = 3.6;
  p2DArray[1][2] = 4.0;

  <cite>// De-Allocate memory to prevent memory leak</cite>
  <var>for</var> (<var>int</var> i = 0; i &lt; HEIGHT; ++i)
    <var>delete</var> [] p2DArray&lt;i&gt;;
  <var>delete</var> [] p2DArray;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
A 3D Array:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br></code></pre></td>
<td class="source"><pre><code><dfn>#define HEIGHT 5</dfn>
<dfn>#define WIDTH 3</dfn>
<dfn>#define DEPTH 7</dfn>

<var>int</var> main() {
  <var>double</var> ***p2DArray;

  <cite>// Allocate memory</cite>
  p2DArray = <var>new</var> <var>double</var>**[HEIGHT];
  <var>for</var> (<var>int</var> i = 0; i &lt; HEIGHT; ++i) {
    p2DArray&lt;i&gt; = <var>new</var> <var>double</var>*[WIDTH];

    <var>for</var> (<var>int</var> j = 0; j &lt; WIDTH; ++j)
      p2DArray&lt;i&gt;[j] = <var>new</var> <var>double</var>[DEPTH];
  }

  <cite>// Assign values</cite>
  p2DArray[0][0][0] = 3.6;
  p2DArray[1][2][4] = 4.0;

  <cite>// De-Allocate memory to prevent memory leak</cite>
  <var>for</var> (<var>int</var> i = 0; i &lt; HEIGHT; ++i) {
    <var>for</var> (<var>int</var> j = 0; j &lt; WIDTH; ++j)
      <var>delete</var> [] p2DArray&lt;i&gt;[j];

    <var>delete</var> [] p2DArray&lt;i&gt;;
  }
  <var>delete</var> [] p2DArray;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
One final thing to note. When creating dynamic arrays with your own object types, you cannot overload the constructor. The ISO standard forbids this, and you must initialize the values on the objects later. All objects allocated into arrays must utilize the default constructor.<br>
<br>
The above code snippets should compile on both Windows and Linux with no problems.<br>
<br>
<b>Recommendations</b>
Unless your application has an extreme need to be highly optimized, and you are quite proficient at C++ memory management, you will want to use the vector based approach. This method is a lot easier to manage, especially if you are just learning C++.<br>
You can pass them by pointer.<br>
<br>
e.g<br>
<span class="auto"><code class="source"><var>void</var> doSomethingWith2D(<var>double</var> **Array);</code></span>
or<br>
<span class="auto"><code class="source">voud doSomethingWith2D(vector&lt;vector&lt;<var>double</var>&gt; &gt; &amp;Array);</code></span></div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','NAUq5Di1');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../ovr0/contact.doreferrerwww.cplusplus.com_252farticles_25~14.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='LTkoizwU')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgianauq5di1.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgianauq5di1'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
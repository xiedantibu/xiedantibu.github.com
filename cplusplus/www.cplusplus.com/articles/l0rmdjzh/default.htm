<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/l0rmdjzh/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>An open source C++ lightweight &amp; cross p - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">An open source C++ lightweight &amp; cross p</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/zsummer/default.htm" rel="author">zsummer</a></b></div>
<div id="I_date">Apr 4, 2014 (last update: Apr 4, 2014)</div>
<h1>An open source C++ lightweight & cross platform log library: Log4z</h1>
<div id="I_score">Score: 3.5/5 (32 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<H3>Introduction:</H3>
Log4z is an open source C++ lightweight & cross platform log library.<br>
It provides in a C++ application log and trace debug function for 7*24h service program.<br>
<br>
Support 64/32 of debian, redhat, centos, suse, windows.<br>
<br>
<br>
<H3>Feature:</H3>
MIT open source license,very liberal.<br>
<br>
Cross Platform Linux & Windows, Lightweight only one cpp sourse file one header file.<br>
<br>
Multi-Logger Output, Rolling File, Priority Filter, Thread Safe.<br>
<br>
Screen Display Log with Different Color.<br>
<br>
Support format-style and stream-style write log.<br>
<br>
Support configure from file and hot update, or can direct fast work without any config.<br>
<br>
<br>
<H3>File Name Format:</H3>
LogName_YearMonthDayHourMinute_ProcessID_BlockNumber.log<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
E:\GITHUB\LOG4Z\PROJECT\BIN
│──advanced_test.exe
│──config.cfg
│──fast_test.exe
│──stress_test.exe
│
├─AdvacedLog
│──│───FileConfig_2013100921_003852_000.log
│──│───FileConfig_2013101313_005920_000.log
│
├─log
│──│──advanced_test_2013100921_003852_000.log
│──│──advanced_test_2013101313_005920_000.log
│──│──fast_test_2013100921_003855_000.log
│──│──fast_test_2013101313_006160_000.log
│──│──stress_test_2013101313_007196_000.log
│──│
│──└─2013_10
│─────│────Dynamic_2013100921_003852_000.log
│─────│────Dynamic_2013101313_005920_000.log
│
└─Stress
───│────NetWork_2013101313_007196_000.log
───│────NetWork_2013101313_007196_001.log
───│────NetWork_2013101313_007196_002.log
───│────NetWork_2013101313_007196_003.log
───│────NetWork_2013101313_007196_004.log
</samp></pre></td></tr></table></div>
<H3>[Log Content]</H3>
<IMG SRC="fast_output_linux.png" alt="">
<IMG SRC="fast_output_windows.png" alt="">
<br>
<br>
<H3>How To Use Log4z example 1:</H3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "../log4z.h"</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdarg.h&gt;</dfn>
<var>using</var> <var>namespace</var> zsummer::log4z;

<dfn>#ifdef WIN32</dfn>
<dfn>#include &lt;windows.h&gt;</dfn>
<dfn>#endif</dfn>
<var>int</var> main(<var>int</var> argc, <var>char</var> *argv[])
{

	<cite>//start log4z</cite>
	ILog4zManager::GetInstance()-&gt;Start();

	LOGI(<kbd>"begin test stream log input...."</kbd>);
	LOGD(<kbd>"stream input *** "</kbd> &lt;&lt; <kbd>"LOGD LOGD LOGD LOGD"</kbd> &lt;&lt; <kbd>" *** "</kbd>);

	LOGFMTI(<kbd>"begin test format log input...."</kbd>);
	LOGFMTD(<kbd>"format input *** %s *** %d ***"</kbd>, <kbd>"LOGFMTD"</kbd>, 123456);
	LOGA(<kbd>"main quit ..."</kbd>);
	<var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<H3>How To Use Log4z example 2:</H3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "../log4z.h"</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdarg.h&gt;</dfn>
<var>using</var> <var>namespace</var> zsummer::log4z;

<dfn>#ifdef WIN32</dfn>
<dfn>#include &lt;windows.h&gt;</dfn>
<dfn>#endif</dfn>
<var>int</var> main(<var>int</var> argc, <var>char</var> *argv[])
{

	<cite>//start log4z</cite>
	ILog4zManager::GetInstance()-&gt;Start();

	<cite>//LOGD: LOG WITH level LOG_DEBUG</cite>
	<cite>//LOGI: LOG WITH level LOG_INFO</cite>
	<cite>//...</cite>
<dfn>#ifdef WIN32</dfn>
	LOGI(<kbd>"begin test stream log utf-16 string input...."</kbd>);
	WCHAR wChar[100] = L<kbd>"check unicode log string"</kbd>;
	std::wstring wStr = L<kbd>"check wstring log"</kbd>;
	LOGF(L<kbd>"PATH="</kbd> &lt;&lt; wChar &lt;&lt; <kbd>":"</kbd> &lt;&lt; wStr);
<dfn>#endif</dfn>

	LOGI(<kbd>"begin test stream log input...."</kbd>);
	LOGD(<kbd>"stream input *** "</kbd> &lt;&lt; <kbd>"LOGD LOGD LOGD LOGD"</kbd> &lt;&lt; <kbd>" *** "</kbd>);
	LOGI(<kbd>"stream input *** "</kbd> &lt;&lt; <kbd>"LOGI LOGI LOGI LOGI"</kbd> &lt;&lt; <kbd>" *** "</kbd>);
	LOGW(<kbd>"stream input *** "</kbd> &lt;&lt; <kbd>"LOGW LOGW LOGW LOGW"</kbd> &lt;&lt; <kbd>" *** "</kbd>);
	LOGE(<kbd>"stream input *** "</kbd> &lt;&lt; <kbd>"LOGE LOGE LOGE LOGE"</kbd> &lt;&lt; <kbd>" *** "</kbd>);
	LOGA(<kbd>"stream input *** "</kbd> &lt;&lt; <kbd>"LOGA LOGA LOGA LOGA"</kbd> &lt;&lt; <kbd>" *** "</kbd>);
	LOGF(<kbd>"stream input *** "</kbd> &lt;&lt; <kbd>"LOGF LOGF LOGF LOGF"</kbd> &lt;&lt; <kbd>" *** "</kbd>);


	LOGI(<kbd>"begin test stream log all types input...."</kbd>);
	LOGD(<kbd>"char:"</kbd> &lt;&lt;<kbd>'c'</kbd>
		&lt;&lt; <kbd>", unsigned char:"</kbd> &lt;&lt; (<var>unsigned</var> <var>char</var>) <kbd>'c'</kbd>
		&lt;&lt; <kbd>", short:"</kbd> &lt;&lt; (<var>short</var>) -1
		&lt;&lt; <kbd>", unsigned short:"</kbd> &lt;&lt; (<var>unsigned</var> <var>short</var>) -1
		&lt;&lt; <kbd>", int:"</kbd> &lt;&lt; (<var>int</var>) -1
		&lt;&lt; <kbd>", unsigned int:"</kbd> &lt;&lt; (<var>unsigned</var> <var>int</var>) -1
		&lt;&lt; <kbd>", long:"</kbd> &lt;&lt; (<var>long</var>) -1
		&lt;&lt; <kbd>", unsigned long:"</kbd> &lt;&lt; (<var>unsigned</var> <var>long</var>) -1
		&lt;&lt; <kbd>", long long:"</kbd> &lt;&lt; (<var>long</var> <var>long</var>) -1
		&lt;&lt; <kbd>", unsigned long long:"</kbd> &lt;&lt; (<var>unsigned</var> <var>long</var> <var>long</var>) -1
		&lt;&lt; <kbd>", float:"</kbd> &lt;&lt; (<var>float</var>) -1.234567
		&lt;&lt; <kbd>", double:"</kbd> &lt;&lt; (<var>double</var>) -2.34566
		&lt;&lt; <kbd>", std::string:"</kbd> &lt;&lt; std::string(<kbd>"fffff"</kbd>)
		&lt;&lt; <kbd>", int *:"</kbd> &lt;&lt; ( <var>int</var> *) argv
		&lt;&lt; <kbd>", const int *:"</kbd> &lt;&lt; (<var>const</var> <var>int</var> *) argv
		&lt;&lt; <kbd>", constant:"</kbd> &lt;&lt; 1000 
		&lt;&lt; <kbd>", constant:"</kbd> &lt;&lt; 100.12345678
		&lt;&lt; <kbd>", bool:"</kbd> &lt;&lt; <var>true</var>
		&lt;&lt; <kbd>", show hex data:"</kbd> &lt;&lt; BinaryBlock(<kbd>"1234567890abcdefghigklmnopqrstuvwxyz_zyw_zsummer_log4z"</kbd>, 50));


	std::string str;
	str.resize(3000, <kbd>'s'</kbd>);


	<cite>// cannot support VC6 or VS2003</cite>
	LOGFMTI(<kbd>"begin test format log big string more than buff size input...."</kbd>);
	LOGFMTI(<kbd>"begin test format log input...."</kbd>);
	LOGFMTD(<kbd>"format input *** %s *** %d ***"</kbd>, <kbd>"LOGFMTD"</kbd>, 123456);
	LOGFMTI(<kbd>"format input *** %s *** %d ***"</kbd>, <kbd>"LOGFMTI"</kbd>, 123456);
	LOGFMTW(<kbd>"format input *** %s *** %d ***"</kbd>, <kbd>"LOGFMTW"</kbd>, 123456);
	LOGFMTE(<kbd>"format input *** %s *** %d ***"</kbd>, <kbd>"LOGFMTE"</kbd>, 123456);
	LOGFMTA(<kbd>"format input *** %s *** %d ***"</kbd>, <kbd>"LOGFMTA"</kbd>, 123456);
	LOGFMTF(<kbd>"format input *** %s *** %d ***"</kbd>, <kbd>"LOGFMTF"</kbd>, 123456);
	LOGFMT_DEBUG(LOG4Z_MAIN_LOGGER_ID, <kbd>"%s"</kbd>, str.c_str());
	<cite>// end</cite>

	LOGI(<kbd>"begin test stream log big string more than buff size input...."</kbd>);
	LOGD(str);
	LOGA(<kbd>"main quit ..."</kbd>);
	<var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<H3>How to compile</H3>
<br>
<H3>Directly Using The Way :</H3>
<br>
Add files log4z.cpp log4z.h and compile together in the existing projects.<br>
<br>
<H3>Make Library To Use</H3>
<br>
In Windows:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>Open and compile log4z/vc2005/log4z.vcproj</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In Linux :<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>cd log4z/g++
cmake .
make</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Release Download Link: https://github.com/zsummer/log4z/releases<br>
<p>Attachments:
	[<a href="log4z-2.5.0.zip">log4z-2.5.0.zip</a>]
</p>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','L0RMDjzh');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~34.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='DoS8vCM9')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgial0rmdjzh.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgial0rmdjzh'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
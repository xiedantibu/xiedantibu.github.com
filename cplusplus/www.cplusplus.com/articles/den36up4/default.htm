<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/den36up4/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>How to parse command line parameters. - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">How to parse command line parameters.</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/chrisname/default.htm" rel="author">chrisname</a></b></div>
<div id="I_date">Aug 7, 2009 (last update: Jul 5, 2013)</div>
<h1>How to parse command line parameters.</h1>
<div id="I_score">Score: 3.8/5 (286 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<h3>Introduction</h3>
Command-line parameters are passed to a program at runt-time by the operating system when the program is requested by another program, such as a command interpreter ("shell") like <tt>cmd.exe</tt> on Windows or <tt>bash</tt> on Linux and OS X. The user types a command  and the shell calls the operating system to run the program. Exactly how this is done is beyond the scope of this article (on Windows, look up <tt>CreateProcess</tt>; on UNIX and UNIX-like systems look up <tt>fork(3)</tt> and <tt>exec(3)</tt> in the manual).<br>
<br>
The uses for command-line parameters are various, but the main two are:<br>
<ol>
<li> Modifying program behaviour - command-line parameters can be used to tell a program how you expect it to behave; for example, some programs have a <tt>-q</tt> (quiet) option to tell them not to output as much text. </li>
<li> Having a program run without user interaction - this is especially useful for programs that are called from scripts or other programs. </li>
</ol>
<br>
<h3>The command-line</h3>
Adding the ability to parse command-line parameters to a program is very easy. Every C and C++ program has a <tt>main</tt> function. In a program without the capability to parse its command-line, <tt>main</tt> is usually defined like this:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>int</var> main()</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
To see the command-line we must add two parameters to main which are, by convention, named <tt>argc</tt> (<b>arg</b>ument <b>c</b>ount) and <tt>argv</tt> (<b>arg</b>ument <b>v</b>ector [here, vector refers to an array, not a C++ or Euclidean vector]). <tt>argc</tt> has the type <tt>int</tt> and <tt>argv</tt> usually has the type <tt>char**</tt> or <tt>char* []</tt> (see below). <tt>main</tt> now looks like this:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>int</var> main(<var>int</var> argc, <var>char</var>* argv[]) <cite>// or char** argv </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<tt>argc</tt> tells you how many command-line arguments there were. It is always at least 1, because the first string in <tt>argv</tt> (<tt>argv[0]</tt>) is the command used to invoke the program. <tt>argv</tt> contains the actual command-line arguments as an array of strings, the first of which (as we have already discovered) is the program's name. Try this example:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>

<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
    std::cout &lt;&lt; argv[0] &lt;&lt; std::endl;
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
This program will print the name of the command you used to run it: if you called the executable "a.exe" (Windows) or "a.out" (UNIX) it would likely print "a.exe" or "./a.out" (if you ran it from the shell) respectively.<br>
<br>
Earlier it was mentioned that <tt>argc</tt> contains the number of arguments passed to the program. This is useful as it can tell us when the user hasn't passed the correct number of arguments, and we can then inform the user of how to run our program:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>

<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
    <cite>// Check the number of parameters</cite>
    <var>if</var> (argc &lt; 2) {
        <cite>// Tell the user how to run the program</cite>
        std::cerr &lt;&lt; <kbd>"Usage: "</kbd> &lt;&lt; argv[0] &lt;&lt; <kbd>" NAME"</kbd> &lt;&lt; std::endl;
        <cite>/* "Usage messages" are a conventional way of telling the user
         * how to run a program if they enter the command incorrectly.
         */</cite>
        <var>return</var> 1;
    }
    <cite>// Print the user's name:</cite>
    std::cout &lt;&lt; argv[0] &lt;&lt; <kbd>"says hello, "</kbd> &lt;&lt; argv[1] &lt;&lt; <kbd>"!"</kbd> &lt;&lt; std::endl;
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Example output (no arguments passed):<br>
<blockquote>Usage: a.exe &lt;NAME&gt;</blockquote>
Example output (one argument passed):<br>
<blockquote>a.exe says hello, Chris!</blockquote>
<br>
<h3>Arguments and Parameters</h3>
Arguments and parameters are strings passed to your program to give it information. A program for moving files, for example, may be invoked with two arguments - the source file and the destination: <tt>move /path/to/source /path/to/destination</tt> (note: on Windows these paths would use backslashes instead [and would probably have a drive prefix, like <tt>C:</tt>], however as Windows supports backwards and forwards slashes in paths while UNIX systems only support forward slashes, forward slashes will be used throughout this article).<br>
<br>
In this example, the program would look something like this:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>

<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
    <var>if</var> (argc &lt; 3) { <cite>// We expect 3 arguments: the program name, the source path and the destination path</cite>
        std::cerr &lt;&lt; <kbd>"Usage: "</kbd> &lt;&lt; argv[0] &lt;&lt; <kbd>"SOURCE DESTINATION"</kbd> &lt;&lt; std::endl;
        <var>return</var> 1;
    }
    <var>return</var> move(argv[1], argv[2]);  <cite>// Implementation of the move function is platform dependent</cite>
                    <cite>// and beyond the scope of this article, so it is left out.</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
If we wanted to allow the use of multiple source paths we could use a loop and a std::vector:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
    <var>if</var> (argc &lt; 3) { <cite>// We expect 3 arguments: the program name, the source path and the destination path</cite>
        std::cerr &lt;&lt; <kbd>"Usage: "</kbd> &lt;&lt; argv[0] &lt;&lt; <kbd>"SOURCE DESTINATION"</kbd> &lt;&lt; std::endl;
        <var>return</var> 1;
    }
    std::vector &lt;std::string&gt; sources;
    std::string destination;
    <var>for</var> (<var>int</var> i = 1; i &lt; argc; ++i) { <cite>// Remember argv[0] is the path to the program, we want from argv[1] onwards</cite>
        <var>if</var> (i + 1 &lt; argc)
            sources.push_back(argv[i]); <cite>// Add all but the last argument to the vector.</cite>
        <var>else</var>
            destination = argv[i];
    }
    <var>return</var> move(sources, destination);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Arguments may be passed as values to options. An option usually starts with a single hyphen (-) for a "short option" or a double hyphen (--) for a "long option" on UNIX, or a forward slash on Windows. Hyphens (single and double) will be used in this article. Continuing the example of the <tt>move</tt> program, the program could use a <tt>-d</tt>/<tt>--destination</tt> option to tell it which path is the source and which is the destination, as in  <tt>move -d /path/to/destination /path/to/source</tt> and <tt>move --destination /path/to/destination /path/to/source</tt>. Options are always right-associative, meaning that the argument to an option is always the text directly to the right of it.<br>
<br>
Let's extend the previous example to use the destination option.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
    <var>if</var> (argc &lt; 3) {
        std::cerr &lt;&lt; <kbd>"Usage: "</kbd> &lt;&lt; argv[0] &lt;&lt; <kbd>"--destination DESTINATION SOURCE"</kbd> &lt;&lt; std::endl;
        <var>return</var> 1;
    }
    std::vector &lt;std::string&gt; sources;
    std::string destination;
    <var>for</var> (<var>int</var> i = 1; i &lt; argc; ++i) {
        <var>if</var> (std::string(argv[i]) == <kbd>"--destination"</kbd>) {
            <var>if</var> (i + 1 &lt; argc) { <cite>// Make sure we aren't at the end of argv!</cite>
                destination = argv[i++]; <cite>// Increment 'i' so we don't get the argument as the next argv[i].</cite>
            } <var>else</var> { <cite>// Uh-oh, there was no argument to the destination option.</cite>
                  std::cerr &lt;&lt; <kbd>"--destination option requires one argument."</kbd> &lt;&lt; std::endl;
                <var>return</var> 1;
            }  
        } <var>else</var> {
            sources.push_back(argv[i]);
        }
    }
    <var>return</var> move(sources, destination);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Now the parameters can be in any order as long as the destination path is immediately to the right of "--destination".<br>
<br>
<h3>More on usage messages</h3>
Our usage message is helpful, but if we need to print it from more than one place, we have to copy the code. Obviously the way around this is to use a function.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>static</var> <var>void</var> show_usage(std::string name)
{
    std::cerr &lt;&lt; <kbd>"Usage: "</kbd> &lt;&lt; argv[0] &lt;&lt; <kbd>" &lt;option(s)&gt; SOURCES"</kbd>
              &lt;&lt; <kbd>"Options:\n"</kbd>
              &lt;&lt; <kbd>"\t-h,--help\t\tShow this help message\n"</kbd>
              &lt;&lt; <kbd>"\t-d,--destination DESTINATION\tSpecify the destination path"</kbd>
              &lt;&lt; std::endl;
}

<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[])
{
    <var>if</var> (argc &lt; 3) {
        show_usage(argv[0]);
        <var>return</var> 1;
    }
    std::vector &lt;std::string&gt; sources;
    std::string destination;
    <var>for</var> (<var>int</var> i = 1; i &lt; argc; ++i) {
        std::string arg = argv[i];
        <var>if</var> ((arg == <kbd>"-h"</kbd>) || (arg == <kbd>"--help"</kbd>)) {
            show_usage(argv[0]);
            <var>return</var> 0;
        } <var>else</var> <var>if</var> ((arg == <kbd>"-d"</kbd>) || (arg == <kbd>"--destination"</kbd>)) {
            <var>if</var> (i + 1 &lt; argc) { <cite>// Make sure we aren't at the end of argv!</cite>
                destination = argv[i++]; <cite>// Increment 'i' so we don't get the argument as the next argv[i].</cite>
            } <var>else</var> { <cite>// Uh-oh, there was no argument to the destination option.</cite>
                  std::cerr &lt;&lt; <kbd>"--destination option requires one argument."</kbd> &lt;&lt; std::endl;
                <var>return</var> 1;
            }  
        } <var>else</var> {
            sources.push_back(argv[i]);
        }
    }
    <var>return</var> move(sources, destination);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Now, rather than having to guess, the user can call our program with the <tt>-h</tt> or <tt>--help</tt> options to find out how to run the command.<br>
<br>
<br>
<h3>Getopt</h3>
These methods of finding command-line arguments are simple and not very robust. The best way of finding options is using the <b>getopt</b> family of functions:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;unistd.h&gt;</dfn>

<var>int</var> getopt(<var>int</var> argc, <var>char</var> * <var>const</var> argv[],
       <var>const</var> <var>char</var> *optstring);

<var>extern</var> <var>char</var> *optarg;
<var>extern</var> <var>int</var> optind, opterr, optopt;

<dfn>#include &lt;getopt.h&gt;</dfn>

<var>int</var> getopt_long(<var>int</var> argc, <var>char</var> * <var>const</var> argv[],
                <var>const</var> <var>char</var> *optstring,
                <var>const</var> <var>struct</var> option *longopts, <var>int</var> *longindex);

<var>int</var> getopt_long_only(<var>int</var> argc, <var>char</var> * <var>const</var> argv[],
                     <var>const</var> <var>char</var> *optstring,
                     <var>const</var> <var>struct</var> option *longopts, <var>int</var> *longindex);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
(from the <a href="../../../linux.die.net/man/3/getopt">manual page</a>)<br>
<br>
The <a href="../../../linux.die.net/man/3/getopt">manual page</a> has examples of how to use them.</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','DEN36Up4');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~71.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='GEw0RXSz')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaden36up4.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaden36up4'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
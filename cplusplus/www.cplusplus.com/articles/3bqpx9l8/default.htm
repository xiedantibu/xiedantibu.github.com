<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/3bqpx9l8/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>The Element Project (v1) - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">The Element Project (v1)</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/pheonix/default.htm" rel="author">Pheonix</a></b></div>
<div id="I_date">Aug 6, 2013 (last update: Aug 6, 2013)</div>
<h1>The Element Project (v1)</h1>
<div id="I_score">Score: 3.7/5 (51 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
**note: source code attached to bottom, you don't have to copy-paste the whole thing into a c++ engine<br>
**note: if it does not run first try, try creating a file in the folder called "Balance.txt". it is a storage file to record local match history, wins, and losses between the different characters.<br>
<br>
I am a relatively new programmer and this is the first build of the game I created over the past few weeks. This is still an evolving project that I am working on so nothing is set in stone.<br>
<br>
Gameplay:<br>
-Begin the game by selecting 1 of 10 play styles by typing the name of the respective element and hitting [Enter] for each player. Don't forget to capitalize the first letter as typos will be defaulted to "Swordman".<br>
-This game is turn based. Each player and status will be displayed at the top of the screen, as so:<br>
[player element]<br>
[player health]<br>
[player status effect]<br>
[player energy]<br>
-on your turn, enter the number for the action you wish to take:<br>
1) attack. you will attack for a random value up to your element's maximum.<br>
2) guard. half damage incoming from an enemy attack.<br>
3-5) special abilities. beware energy costs as you will not be able to use an ability that costs more than what you have. you will regain 1 energy every turn unless you have bonuses or penalties. abilities vary in power and effect so be sure to learn your character.<br>
6) surrender. kill yourself.<br>
0) enables ai code for the player for that turn.<br>
-after players select their actions for the turn, the system calculates the course of the battle for that turn.<br>
<br>
stats:<br>
Health) current life, when you reach 0, you lose<br>
Energy) points to spend on abilities<br>
Armor) flat damage reduction to attacks<br>
Agility/Dodge) % chance to dodge a normal attack<br>
speed) turn priority, chance to take first action on a given turn.<br>
<br>
If you want any help, character guides/info, or balance suggestions, send me a private message and I will get try to get back to you.<br>
<br>
Thank You!<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>407<br>408<br>409<br>410<br>411<br>412<br>413<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>430<br>431<br>432<br>433<br>434<br>435<br>436<br>437<br>438<br>439<br>440<br>441<br>442<br>443<br>444<br>445<br>446<br>447<br>448<br>449<br>450<br>451<br>452<br>453<br>454<br>455<br>456<br>457<br>458<br>459<br>460<br>461<br>462<br>463<br>464<br>465<br>466<br>467<br>468<br>469<br>470<br>471<br>472<br>473<br>474<br>475<br>476<br>477<br>478<br>479<br>480<br>481<br>482<br>483<br>484<br>485<br>486<br>487<br>488<br>489<br>490<br>491<br>492<br>493<br>494<br>495<br>496<br>497<br>498<br>499<br>500<br>501<br>502<br>503<br>504<br>505<br>506<br>507<br>508<br>509<br>510<br>511<br>512<br>513<br>514<br>515<br>516<br>517<br>518<br>519<br>520<br>521<br>522<br>523<br>524<br>525<br>526<br>527<br>528<br>529<br>530<br>531<br>532<br>533<br>534<br>535<br>536<br>537<br>538<br>539<br>540<br>541<br>542<br>543<br>544<br>545<br>546<br>547<br>548<br>549<br>550<br>551<br>552<br>553<br>554<br>555<br>556<br>557<br>558<br>559<br>560<br>561<br>562<br>563<br>564<br>565<br>566<br>567<br>568<br>569<br>570<br>571<br>572<br>573<br>574<br>575<br>576<br>577<br>578<br>579<br>580<br>581<br>582<br>583<br>584<br>585<br>586<br>587<br>588<br>589<br>590<br>591<br>592<br>593<br>594<br>595<br>596<br>597<br>598<br>599<br>600<br>601<br>602<br>603<br>604<br>605<br>606<br>607<br>608<br>609<br>610<br>611<br>612<br>613<br>614<br>615<br>616<br>617<br>618<br>619<br>620<br>621<br>622<br>623<br>624<br>625<br>626<br>627<br>628<br>629<br>630<br>631<br>632<br>633<br>634<br>635<br>636<br>637<br>638<br>639<br>640<br>641<br>642<br>643<br>644<br>645<br>646<br>647<br>648<br>649<br>650<br>651<br>652<br>653<br>654<br>655<br>656<br>657<br>658<br>659<br>660<br>661<br>662<br>663<br>664<br>665<br>666<br>667<br>668<br>669<br>670<br>671<br>672<br>673<br>674<br>675<br>676<br>677<br>678<br>679<br>680<br>681<br>682<br>683<br>684<br>685<br>686<br>687<br>688<br>689<br>690<br>691<br>692<br>693<br>694<br>695<br>696<br>697<br>698<br>699<br>700<br>701<br>702<br>703<br>704<br>705<br>706<br>707<br>708<br>709<br>710<br>711<br>712<br>713<br>714<br>715<br>716<br>717<br>718<br>719<br>720<br>721<br>722<br>723<br>724<br>725<br>726<br>727<br>728<br>729<br>730<br>731<br>732<br>733<br>734<br>735<br>736<br>737<br>738<br>739<br>740<br>741<br>742<br>743<br>744<br>745<br>746<br>747<br>748<br>749<br>750<br>751<br>752<br>753<br>754<br>755<br>756<br>757<br>758<br>759<br>760<br>761<br>762<br>763<br>764<br>765<br>766<br>767<br>768<br>769<br>770<br>771<br>772<br>773<br>774<br>775<br>776<br>777<br>778<br>779<br>780<br>781<br>782<br>783<br>784<br>785<br>786<br>787<br>788<br>789<br>790<br>791<br>792<br>793<br>794<br>795<br>796<br>797<br>798<br>799<br>800<br>801<br>802<br>803<br>804<br>805<br>806<br>807<br>808<br>809<br>810<br>811<br>812<br>813<br>814<br>815<br>816<br>817<br>818<br>819<br>820<br>821<br>822<br>823<br>824<br>825<br>826<br>827<br>828<br>829<br>830<br>831<br>832<br>833<br>834<br>835<br>836<br>837<br>838<br>839<br>840<br>841<br>842<br>843<br>844<br>845<br>846<br>847<br>848<br>849<br>850<br>851<br>852<br>853<br>854<br>855<br>856<br>857<br>858<br>859<br>860<br>861<br>862<br>863<br>864<br>865<br>866<br>867<br>868<br>869<br>870<br>871<br>872<br>873<br>874<br>875<br>876<br>877<br>878<br>879<br>880<br>881<br>882<br>883<br>884<br>885<br>886<br>887<br>888<br>889<br>890<br>891<br>892<br>893<br>894<br>895<br>896<br>897<br>898<br>899<br>900<br>901<br>902<br>903<br>904<br>905<br>906<br>907<br>908<br>909<br>910<br>911<br>912<br>913<br>914<br>915<br>916<br>917<br>918<br>919<br>920<br>921<br>922<br>923<br>924<br>925<br>926<br>927<br>928<br>929<br>930<br>931<br>932<br>933<br>934<br>935<br>936<br>937<br>938<br>939<br>940<br>941<br>942<br>943<br>944<br>945<br>946<br>947<br>948<br>949<br>950<br>951<br>952<br>953<br>954<br>955<br>956<br>957<br>958<br>959<br>960<br>961<br>962<br>963<br>964<br>965<br>966<br>967<br>968<br>969<br>970<br>971<br>972<br>973<br>974<br>975<br>976<br>977<br>978<br>979<br>980<br>981<br>982<br>983<br>984<br>985<br>986<br>987<br>988<br>989<br>990<br>991<br>992<br>993<br>994<br>995<br>996<br>997<br>998<br>999<br>1000<br>1001<br>1002<br>1003<br>1004<br>1005<br>1006<br>1007<br>1008<br>1009<br>1010<br>1011<br>1012<br>1013<br>1014<br>1015<br>1016<br>1017<br>1018<br>1019<br>1020<br>1021<br>1022<br>1023<br>1024<br>1025<br>1026<br>1027<br>1028<br>1029<br>1030<br>1031<br>1032<br>1033<br>1034<br>1035<br>1036<br>1037<br>1038<br>1039<br>1040<br>1041<br>1042<br>1043<br>1044<br>1045<br>1046<br>1047<br>1048<br>1049<br>1050<br>1051<br>1052<br>1053<br>1054<br>1055<br>1056<br>1057<br>1058<br>1059<br>1060<br>1061<br>1062<br>1063<br>1064<br>1065<br>1066<br>1067<br>1068<br>1069<br>1070<br>1071<br>1072<br>1073<br>1074<br>1075<br>1076<br>1077<br>1078<br>1079<br>1080<br>1081<br>1082<br>1083<br>1084<br>1085<br>1086<br>1087<br>1088<br>1089<br>1090<br>1091<br>1092<br>1093<br>1094<br>1095<br>1096<br>1097<br>1098<br>1099<br>1100<br>1101<br>1102<br>1103<br>1104<br>1105<br>1106<br>1107<br>1108<br>1109<br>1110<br>1111<br>1112<br>1113<br>1114<br>1115<br>1116<br>1117<br>1118<br>1119<br>1120<br>1121<br>1122<br>1123<br>1124<br>1125<br>1126<br>1127<br>1128<br>1129<br>1130<br>1131<br>1132<br>1133<br>1134<br>1135<br>1136<br>1137<br>1138<br>1139<br>1140<br>1141<br>1142<br>1143<br>1144<br>1145<br>1146<br>1147<br>1148<br>1149<br>1150<br>1151<br>1152<br>1153<br>1154<br>1155<br>1156<br>1157<br>1158<br>1159<br>1160<br>1161<br>1162<br>1163<br>1164<br>1165<br>1166<br>1167<br>1168<br>1169<br>1170<br>1171<br>1172<br>1173<br>1174<br>1175<br>1176<br>1177<br>1178<br>1179<br>1180<br>1181<br>1182<br>1183<br>1184<br>1185<br>1186<br>1187<br>1188<br>1189<br>1190<br>1191<br>1192<br>1193<br>1194<br>1195<br>1196<br>1197<br>1198<br>1199<br>1200<br>1201<br>1202<br>1203<br>1204<br>1205<br>1206<br>1207<br>1208<br>1209<br>1210<br>1211<br>1212<br>1213<br>1214<br>1215<br>1216<br>1217<br>1218<br>1219<br>1220<br>1221<br>1222<br>1223<br>1224<br>1225<br>1226<br>1227<br>1228<br>1229<br>1230<br>1231<br>1232<br>1233<br>1234<br>1235<br>1236<br>1237<br>1238<br>1239<br>1240<br>1241<br>1242<br>1243<br>1244<br>1245<br>1246<br>1247<br>1248<br>1249<br>1250<br>1251<br>1252<br>1253<br>1254<br>1255<br>1256<br>1257<br>1258<br>1259<br>1260<br>1261<br>1262<br>1263<br>1264<br>1265<br>1266<br>1267<br>1268<br>1269<br>1270<br>1271<br>1272<br>1273<br>1274<br>1275<br>1276<br>1277<br>1278<br>1279<br>1280<br>1281<br>1282<br>1283<br>1284<br>1285<br>1286<br>1287<br>1288<br>1289<br>1290<br>1291<br>1292<br>1293<br>1294<br>1295<br>1296<br>1297<br>1298<br>1299<br>1300<br>1301<br>1302<br>1303<br>1304<br>1305<br>1306<br>1307<br>1308<br>1309<br>1310<br>1311<br>1312<br>1313<br>1314<br>1315<br>1316<br>1317<br>1318<br>1319<br>1320<br>1321<br>1322<br>1323<br>1324<br>1325<br>1326<br>1327<br>1328<br>1329<br>1330<br>1331<br>1332<br>1333<br>1334<br>1335<br>1336<br>1337<br>1338<br>1339<br>1340<br>1341<br>1342<br>1343<br>1344<br>1345<br>1346<br>1347<br>1348<br>1349<br>1350<br>1351<br>1352<br>1353<br>1354<br>1355<br>1356<br>1357<br>1358<br>1359<br>1360<br>1361<br>1362<br>1363<br>1364<br>1365<br>1366<br>1367<br>1368<br>1369<br>1370<br>1371<br>1372<br>1373<br>1374<br>1375<br>1376<br>1377<br>1378<br>1379<br>1380<br>1381<br>1382<br>1383<br>1384<br>1385<br>1386<br>1387<br>1388<br>1389<br>1390<br>1391<br>1392<br>1393<br>1394<br>1395<br>1396<br>1397<br>1398<br>1399<br>1400<br>1401<br>1402<br>1403<br>1404<br>1405<br>1406<br>1407<br>1408<br>1409<br>1410<br>1411<br>1412<br>1413<br>1414<br>1415<br>1416<br>1417<br>1418<br>1419<br>1420<br>1421<br>1422<br>1423<br>1424<br>1425<br>1426<br>1427<br>1428<br>1429<br>1430<br>1431<br>1432<br>1433<br>1434<br>1435<br>1436<br>1437<br>1438<br>1439<br>1440<br>1441<br>1442<br>1443<br>1444<br>1445<br>1446<br>1447<br>1448<br>1449<br>1450<br>1451<br>1452<br>1453<br>1454<br>1455<br>1456<br>1457<br>1458<br>1459<br>1460<br>1461<br>1462<br>1463<br>1464<br>1465<br>1466<br>1467<br>1468<br>1469<br>1470<br>1471<br>1472<br>1473<br>1474<br>1475<br>1476<br>1477<br>1478<br>1479<br>1480<br>1481<br>1482<br>1483<br>1484<br>1485<br>1486<br>1487<br>1488<br>1489<br>1490<br>1491<br>1492<br>1493<br>1494<br>1495<br>1496<br>1497<br>1498<br>1499<br>1500<br>1501<br>1502<br>1503<br>1504<br>1505<br>1506<br>1507<br>1508<br>1509<br>1510<br>1511<br>1512<br>1513<br>1514<br>1515<br>1516<br>1517<br>1518<br>1519<br>1520<br>1521<br>1522<br>1523<br>1524<br>1525<br>1526<br>1527<br>1528<br>1529<br>1530<br>1531<br>1532<br>1533<br>1534<br>1535<br>1536<br>1537<br>1538<br>1539<br>1540<br>1541<br>1542<br>1543<br>1544<br>1545<br>1546<br>1547<br>1548<br>1549<br>1550<br>1551<br>1552<br>1553<br>1554<br>1555<br>1556<br>1557<br>1558<br>1559<br>1560<br>1561<br>1562<br>1563<br>1564<br>1565<br>1566<br>1567<br>1568<br>1569<br>1570<br>1571<br>1572<br>1573<br>1574<br>1575<br>1576<br>1577<br>1578<br>1579<br>1580<br>1581<br>1582<br>1583<br>1584<br>1585<br>1586<br>1587<br>1588<br>1589<br>1590<br>1591<br>1592<br>1593<br>1594<br>1595<br>1596<br>1597<br>1598<br>1599<br>1600<br>1601<br>1602<br>1603<br>1604<br>1605<br>1606<br>1607<br>1608<br>1609<br>1610<br>1611<br>1612<br>1613<br>1614<br>1615<br>1616<br>1617<br>1618<br>1619<br>1620<br>1621<br>1622<br>1623<br>1624<br>1625<br>1626<br>1627<br>1628<br>1629<br>1630<br>1631<br>1632<br>1633<br>1634<br>1635<br>1636<br>1637<br>1638<br>1639<br>1640<br>1641<br>1642<br>1643<br>1644<br>1645<br>1646<br>1647<br>1648<br>1649<br>1650<br>1651<br>1652<br>1653<br>1654<br>1655<br>1656<br>1657<br>1658<br>1659<br>1660<br>1661<br>1662<br>1663<br>1664<br>1665<br>1666<br>1667<br>1668<br>1669<br>1670<br>1671<br>1672<br>1673<br>1674<br>1675<br>1676<br>1677<br>1678<br>1679<br>1680<br>1681<br>1682<br>1683<br>1684<br>1685<br>1686<br>1687<br>1688<br>1689<br>1690<br>1691<br>1692<br>1693<br>1694<br>1695<br>1696<br>1697<br>1698<br>1699<br>1700<br>1701<br>1702<br>1703<br>1704<br>1705<br>1706<br>1707<br>1708<br>1709<br>1710<br>1711<br>1712<br>1713<br>1714<br>1715<br>1716<br>1717<br>1718<br>1719<br>1720<br>1721<br>1722<br>1723<br>1724<br>1725<br>1726<br>1727<br>1728<br>1729<br>1730<br>1731<br>1732<br>1733<br>1734<br>1735<br>1736<br>1737<br>1738<br>1739<br>1740<br>1741<br>1742<br>1743<br>1744<br>1745<br>1746<br>1747<br>1748<br>1749<br>1750<br>1751<br>1752<br>1753<br>1754<br>1755<br>1756<br>1757<br>1758<br>1759<br>1760<br>1761<br>1762<br>1763<br>1764<br>1765<br>1766<br>1767<br>1768<br>1769<br>1770<br>1771<br>1772<br>1773<br>1774<br>1775<br>1776<br>1777<br>1778<br>1779<br>1780<br>1781<br>1782<br>1783<br>1784<br>1785<br>1786<br>1787<br>1788<br>1789<br>1790<br>1791<br>1792<br>1793<br>1794<br>1795<br>1796<br>1797<br>1798<br>1799<br>1800<br>1801<br>1802<br>1803<br>1804<br>1805<br>1806<br>1807<br>1808<br>1809<br>1810<br>1811<br>1812<br>1813<br>1814<br>1815<br>1816<br>1817<br>1818<br>1819<br>1820<br>1821<br>1822<br>1823<br>1824<br>1825<br>1826<br>1827<br>1828<br>1829<br>1830<br>1831<br>1832<br>1833<br>1834<br>1835<br>1836<br>1837<br>1838<br>1839<br>1840<br>1841<br>1842<br>1843<br>1844<br>1845<br>1846<br>1847<br>1848<br>1849<br>1850<br>1851<br>1852<br>1853<br>1854<br>1855<br>1856<br>1857<br>1858<br>1859<br>1860<br>1861<br>1862<br>1863<br>1864<br>1865<br>1866<br>1867<br>1868<br>1869<br>1870<br>1871<br>1872<br>1873<br>1874<br>1875<br>1876<br>1877<br>1878<br>1879<br>1880<br>1881<br>1882<br>1883<br>1884<br>1885<br>1886<br>1887<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>void</var> charselect(<var>void</var>);
<var>void</var> setplayer(<var>void</var>);
<var>void</var> fight(<var>void</var>);
<var>void</var> turnMenu(<var>void</var>);
<var>void</var> combat(<var>void</var>);
<var>void</var> checkdead(<var>void</var>);
<var>void</var> victory(<var>void</var>);
<var>void</var> printheader(<var>void</var>);
<var>void</var> windbody(<var>void</var>);
<var>void</var> hinder(<var>void</var>);
<var>void</var> attacking(<var>void</var>);
<var>void</var> cast1(<var>void</var>);
<var>void</var> cast2(<var>void</var>);
<var>void</var> cast3(<var>void</var>);
<var>void</var> passives(<var>void</var>);
<var>void</var> statuscheck(<var>void</var>);
<var>void</var> barrier(<var>void</var>);
<var>void</var> shadowbreak(<var>void</var>);
<var>void</var> absorb(<var>void</var>);
<var>void</var> record(<var>void</var>);
<var>void</var> aigo(<var>void</var>);

string Element[2]; <cite>// player 1 element</cite>
<var>int</var> health[2], armor[2], dodge[2], speed[2], power[2], energy[2]; <cite>// player 1 stats</cite>
string ability[2][3]; <cite>// player 1 placeholders for ablities</cite>
<var>int</var> cost[2][3];
string passive[2];
string status[2];
<var>int</var> statusduration[2];
<var>int</var> turn[2]; <cite>// player 1 turn variable</cite>
<var>int</var> winner; <cite>// for game end screen</cite>
<var>int</var> attack; <cite>// random number for damage</cite>
<var>int</var> a[2]; <cite>// ability set</cite>
<var>int</var> hit; <cite>// random number for dodging</cite>
<var>int</var> c, e; <cite>//current/enemy player</cite>
<var>int</var> thisturn;
<var>int</var> venom[2];
<var>int</var> mimic;
<var>int</var> charge;
<var>int</var> matchwin;
<var>int</var> matchloose;
<var>int</var> k, j;
<var>int</var> matchup[12][12];
<var>int</var> play;

<var>int</var> main() {
	play = 0;
	<var>while</var>(play == 0){
		system(<kbd>"pause"</kbd>);
		system(<kbd>"CLS"</kbd>);
		charselect();
		fight();
		victory();
		record();
		thisturn = 0;
		winner = 0;
	}
	system(<kbd>"pause"</kbd>);
	<var>return</var> 0;
}

<var>void</var> charselect() {

	Element[1].assign(<kbd>"none"</kbd>);
	c = 0;
	<var>do</var> {
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>", choose your element"</kbd> &lt;&lt; endl
			&lt;&lt; endl
			&lt;&lt; <kbd>"           Health      Damage    Spell Damage Utility"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Fire:      Medium      Medium    Medium-High  Medium"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Water:     High        Low       High         High"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Static:    Medium-High low       Medium-High  High"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Holy:      Medium-Low  High      Medium-low   Medium"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Wind:      Low         Low/High  Medium       High"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Earth:     High        Medium    High         Medium-Low"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Blood:     Medium-High High      Low          Medium-Low"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Dark:      Medium      Very High None         High"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Venom:     Medium-High Mid High  Low/High     Low"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"Swordsman: High        High      Low          Low"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"--------------------------------------------------"</kbd> &lt;&lt; endl
			&lt;&lt; <kbd>"                             * 0  for random or ai"</kbd> &lt;&lt; endl
			&lt;&lt; endl
			&lt;&lt; <kbd>"(use capital first letter)"</kbd> &lt;&lt; endl
			&lt;&lt; endl;
		cin &gt;&gt; Element[c];
		<var>if</var> (Element[c] == <kbd>"0"</kbd>){
			a[c] = (rand() % 10) + 1;
			<var>switch</var> (a[c]){
			<var>case</var> 1:
				Element[c] = <kbd>"Fire"</kbd>;
				<var>break</var>;
			<var>case</var> 2:
				Element[c] = <kbd>"Water"</kbd>;
				<var>break</var>;
			<var>case</var> 3:
				Element[c] = <kbd>"Static"</kbd>;
				<var>break</var>;
			<var>case</var> 4:
				Element[c] = <kbd>"Holy"</kbd>;
				<var>break</var>;
			<var>case</var> 5:
				Element[c] = <kbd>"Wind"</kbd>;
				<var>break</var>;
			<var>case</var> 6:
				Element[c] = <kbd>"S"</kbd>;
				<var>break</var>;
			<var>case</var> 7:
				Element[c] = <kbd>"Earth"</kbd>;
				<var>break</var>;
			<var>case</var> 8:
				Element[c] = <kbd>"Blood"</kbd>;
				<var>break</var>;
			<var>case</var> 9:
				Element[c] = <kbd>"Dark"</kbd>;
				<var>break</var>;
			<var>case</var> 10:
				Element[c] = <kbd>"Venom"</kbd>;
				<var>break</var>;
			}
		}
		setplayer();
		system(<kbd>"CLS"</kbd>);
		cout &lt;&lt; Element[c] &lt;&lt; <kbd>" element:"</kbd> &lt;&lt; endl &lt;&lt; endl
			&lt;&lt; <kbd>"Health: "</kbd> &lt;&lt; health[c] &lt;&lt; endl
			&lt;&lt; <kbd>"Armor: "</kbd> &lt;&lt; armor[c] &lt;&lt; endl
			&lt;&lt; <kbd>"Speed: "</kbd> &lt;&lt; speed[c] &lt;&lt; endl
			&lt;&lt; <kbd>"Agility: "</kbd> &lt;&lt; dodge[c] &lt;&lt; endl
			&lt;&lt; <kbd>"Max damage: "</kbd> &lt;&lt; power[c] &lt;&lt; endl
			&lt;&lt; <kbd>"Max Energy: "</kbd> &lt;&lt; energy[c] &lt;&lt; endl
			&lt;&lt; endl &lt;&lt; <kbd>"Ablilities"</kbd> &lt;&lt; endl
			&lt;&lt; ability[c][0] &lt;&lt; <kbd>" ["</kbd> &lt;&lt; cost[c][0] &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl
			&lt;&lt; ability[c][1] &lt;&lt; <kbd>" ["</kbd> &lt;&lt; cost[c][1] &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl
			&lt;&lt; ability[c][2] &lt;&lt; <kbd>" ["</kbd> &lt;&lt; cost[c][2] &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl
			&lt;&lt; endl &lt;&lt; <kbd>"Passive ablility: "</kbd> &lt;&lt; passive[c] &lt;&lt; endl &lt;&lt; endl;
		system(<kbd>"pause"</kbd>);
		system(<kbd>"CLS"</kbd>);

		c++;
	} <var>while</var>(c == 1);
}

<var>void</var> fight() {
	status[0].assign(<kbd>"Healthy"</kbd>);
	status[1].assign(<kbd>"Healthy"</kbd>);

	<var>while</var> (winner == 0){

		c = 0;
		cout &lt;&lt; <kbd>"Player 1 up next"</kbd> &lt;&lt; endl;
		turnMenu();
		c = 1;
		cout &lt;&lt; <kbd>"Player 2 up next"</kbd> &lt;&lt; endl;
		turnMenu();
		combat();
		energy[0]++;
		energy[1]++;

	}
}

<var>void</var> setplayer() {
	<var>if</var> (Element[c] == <kbd>"Fire"</kbd>) {
		ability[c][0].assign(<kbd>"Blast"</kbd>); <cite>// single turn damage 40</cite>
		ability[c][1].assign(<kbd>"Flame Thrower"</kbd>); <cite>// single turn damage, stuns enemy if they are ignited, 45 damage</cite>
		ability[c][2].assign(<kbd>"Rain of Fire"</kbd>); <cite>// high damage ablilty 120</cite>
		passive[c].assign(<kbd>"Ignite"</kbd>); <cite>// ablities light an enemy on fire dealing 10 damage per turn for 2 turns, extra ablilities reset duration</cite>
		a[c] = 1;
		cost[c][0] = 2;
		cost[c][1] = 3;
		cost[c][2] = 6;
		health[c] = 200;
		armor[c] = 3; 
		power[c] = 30;
		speed[c] = 50;
		dodge[c] = 20;
		energy[c] = 4;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"Water"</kbd>) {
		ability[c][0].assign(<kbd>"Wave"</kbd>); <cite>// 33 damage</cite>
		ability[c][1].assign(<kbd>"Barrier"</kbd>); <cite>// halfs incoming damage and removes status effects</cite>
		ability[c][2].assign(<kbd>"Tsunami"</kbd>); <cite>// high damage ability, halfs opponent damage for 2 turns 110</cite>
		passive[c].assign(<kbd>"Changing Tide"</kbd>);<cite>// one third of ability damage is returned as hp</cite>
		a[c] = 2;
		cost[c][0] = 2;
		cost[c][1] = 3;
		cost[c][2] = 6;
		health[c] = 250;
		armor[c] = 4;
		power[c] = 15;
		speed[c] = 40;
		dodge[c] = 20;
		energy[c] = 5;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"Static"</kbd>) {
		ability[c][0].assign(<kbd>"Discharge"</kbd>);<cite>// drains all energy, deals 20 damage per 1 point of energy used</cite>
		ability[c][1].assign(<kbd>"Shock Absorb"</kbd>);<cite>// opposing ability damage heals you for this turn</cite>
		ability[c][2].assign(<kbd>"High Voltage"</kbd>);<cite>// 100 stun opponent for 2 turns</cite>
		passive[c].assign(<kbd>"Shock Guard"</kbd>); <cite>// +1 extra energy from a successful guard (an attack must be blocked). guard blocks for 75% damage rather than 50%</cite>
		a[c] = 3;
		cost[c][0] = 0;
		cost[c][1] = 3;
		cost[c][2] = 7;
		health[c] = 230;
		armor[c] = 2;
		power[c] = 38;
		speed[c] = 55;
		dodge[c] = 25;
		energy[c] = 5;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"Holy"</kbd>) {
		ability[c][0].assign(<kbd>"DivineBlessing"</kbd>);<cite>//heal 25 hp</cite>
		ability[c][1].assign(<kbd>"Hinder"</kbd>);<cite>// reduce enemy damage by 50% for 3 turns</cite>
		ability[c][2].assign(<kbd>"Smite"</kbd>);<cite>// 150 damage</cite>
		passive[c].assign(<kbd>"Cleanse"</kbd>);<cite>// remove opposing status effects at the end of battle phase</cite>
		a[c] = 4;
		cost[c][0] = 3;
		cost[c][1] = 4;
		cost[c][2] = 7;
		health[c] = 170;
		armor[c] = 4;
		power[c] = 38;
		speed[c] = 35;
		dodge[c] = 15;
		energy[c] = 5;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"Wind"</kbd>) {
		ability[c][0].assign(<kbd>"Gust"</kbd>);<cite>// 20 damage, deals 3 damage per turn for a max of 5 turns</cite>
		ability[c][1].assign(<kbd>"Wind Charge"</kbd>);<cite>// increase dodge to 100% for this turn, increase attack damage to 75 for 3 turns (+50)</cite>
		ability[c][2].assign(<kbd>"Tempest"</kbd>);<cite>// increase dodge to 100% for 2 turns (this one included), deal 120 damage</cite>
		passive[c].assign(<kbd>"Wind Body"</kbd>);<cite>// dodge applies to spells</cite>
		a[c] = 5;
		cost[c][0] = 1;
		cost[c][1] = 4;
		cost[c][2] = 6;
		health[c] = 150;
		armor[c] = 3;
		power[c] = 25;
		speed[c] = 80;
		dodge[c] = 35;
		energy[c] = 3;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"Earth"</kbd>) {
		ability[c][0].assign(<kbd>"Boulder"</kbd>); <cite>// 20 damage, stun for 1 turn</cite>
		ability[c][1].assign(<kbd>"Shakedown"</kbd>); <cite>// 30% enemy hp as damage</cite>
		ability[c][2].assign(<kbd>"Quake"</kbd>); <cite>// 120 damage, 15 damage per turn until interrupted (10 turns max)</cite>
		passive[c].assign(<kbd>"Stone Skin"</kbd>);<cite>// armor applies to abilities with 1.5 multiplier</cite>
		a[c] = 7;
		cost[c][0] = 4;
		cost[c][1] = 6;
		cost[c][2] = 8;
		health[c] = 300;
		armor[c] = 6;
		power[c] = 30;
		speed[c] = 30;
		dodge[c] = 15;
		energy[c] = 3;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"Blood"</kbd>) {
		ability[c][0].assign(<kbd>"Bleed"</kbd>); <cite>// 5% enemy hp as damage for 3 turns</cite>
		ability[c][1].assign(<kbd>"Drain"</kbd>); <cite>// steal 20 hp</cite>
		ability[c][2].assign(<kbd>"Ravage"</kbd>); <cite>// 4x auto damage for 3 turns</cite>
		passive[c].assign(<kbd>"Vampirism"</kbd>); <cite>// 20% damage dealt with attack returns as health</cite>
		a[c] = 8;
		cost[c][0] = 2;
		cost[c][1] = 4;
		cost[c][2] = 5;
		health[c] = 250;
		armor[c] = 3;
		power[c] = 35;
		speed[c] = 70;
		dodge[c] = 25;
		energy[c] = 2;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"Dark"</kbd>) {
		ability[c][0].assign(<kbd>"Shadowmeld"</kbd>); <cite>// 100% dodge for 1 turn</cite>
		ability[c][1].assign(<kbd>"Speed of Shadow"</kbd>); <cite>// double attack</cite>
		ability[c][2].assign(<kbd>"Invading Black"</kbd>); <cite>// heal 50 hp, triple attack</cite>
		passive[c].assign(<kbd>"Growing Death"</kbd>); <cite>// attacks grant + 5 power</cite>
		a[c] = 9;
		cost[c][0] = 1;
		cost[c][1] = 3;
		cost[c][2] = 7;
		health[c] = 200;
		armor[c] = 3;
		power[c] = 30;
		speed[c] = 65;
		dodge[c] = 20;
		energy[c] = 3;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"Venom"</kbd>) {
		ability[c][0].assign(<kbd>"Ignition"</kbd>); <cite>// 15 damage to enemy per stack of venom</cite>
		ability[c][1].assign(<kbd>"Hidden"</kbd>); <cite>// avoid damage this turn, + 30 (flat) damage next attack</cite>
		ability[c][2].assign(<kbd>"Piercing shot"</kbd>); <cite>// 10 damage per stack + 50. stun enemy for 1 turn, apply 3 stacks</cite>
		passive[c].assign(<kbd>"Corrosion"</kbd>); <cite>// stacking poison with attacks, 5 per stack</cite>
		a[c] = 10;
		cost[c][0] = 3;
		cost[c][1] = 4;
		cost[c][2] = 5;
		health[c] = 230;
		armor[c] = 2;
		power[c] = 30;
		speed[c] = 55;
		dodge[c] = 25;
		energy[c] = 4;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"ManaBurn"</kbd>) {
		ability[c][0].assign(<kbd>"Phase Shift"</kbd>); <cite>// dodge enemy ability, gain energy = to energy cost of ability dodged</cite>
		ability[c][1].assign(<kbd>"Energy Drain"</kbd>); <cite>// damage enemy based on 2 x their energy every turn until interrupted (or 10 turns), get healed for the same ammount</cite>
		ability[c][2].assign(<kbd>"Recoil"</kbd>); <cite>// reduce enemy mana to 0, 60 damage + 10 * enemy mana</cite>
		passive[c].assign(<kbd>"Mana Blast"</kbd>); <cite>// gain flat damage to auto attack = 1/2 the cost of all abilities cast</cite>
		a[c] = 12;
		cost[c][0] = 2;
		cost[c][1] = 4;
		cost[c][2] = 6;
		health[c] = 230;
		armor[c] = 2;
		power[c] = 25;
		speed[c] = 100;
		dodge[c] = 30;
		energy[c] = 4;
	}
	<var>else</var> <var>if</var> (Element[c] == <kbd>"1029384756"</kbd>) {
		Element[c].assign(<kbd>"Morphling"</kbd>);
		ability[c][0].assign(<kbd>"Morph 1"</kbd>);
		ability[c][1].assign(<kbd>"Morph 2"</kbd>);
		ability[c][2].assign(<kbd>"Morph 3"</kbd>);
		passive[c].assign(<kbd>"Energy Absorbtion"</kbd>); <cite>// enemy abilities give half the cost in energy to the morphling</cite>
		a[c] = 11;
		cost[c][0] = 4;
		cost[c][1] = 6;
		cost[c][2] = 8;
		health[c] = 250;
		armor[c] = 3;
		power[c] = 25;
		speed[c] = 60;
		dodge[c] = 20;
		energy[c] = 0;
	}
	<var>else</var> {
		Element[c].assign(<kbd>"Swordsman"</kbd>);
		ability[c][0].assign(<kbd>"Focus Strike"</kbd>); <cite>// deals 25 damage</cite>
		ability[c][1].assign(<kbd>"Meditate"</kbd>); <cite>// recover 30 hp</cite>
		ability[c][2].assign(<kbd>"Execution"</kbd>); <cite>// 40% of your missing hp as damage</cite>
		passive[c].assign(<kbd>"Valor"</kbd>); <cite>// recover 3 hp per turn</cite>
		a[c] = 6;
		cost[c][0] = 1;
		cost[c][1] = 4;
		cost[c][2] = 5;
		health[c] = 300;
		armor[c] = 5;
		power[c] = 60;
		speed[c] = 60;
		dodge[c] = 30;
		energy[c] = 3;
	}
}

<var>void</var> turnMenu() {
	system(<kbd>"CLS"</kbd>);
	printheader();
	cout &lt;&lt; <kbd>"\t\t["</kbd> &lt;&lt; Element[c] &lt;&lt; <kbd>" element's turn:]"</kbd> &lt;&lt; endl
		&lt;&lt; endl
		&lt;&lt; <kbd>"\t _______________________________________________________"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"\t|                                                       |"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"\t|\t(1) Attack\t\t(2) Guard\t\t|"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"\t|\t\t\t\t\t\t\t|"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"\t|\t(3) "</kbd> &lt;&lt; ability[c][0] &lt;&lt; <kbd>"["</kbd> &lt;&lt; cost[c][0] &lt;&lt; <kbd>"]"</kbd> &lt;&lt; <kbd>"\t\t(4) "</kbd> &lt;&lt; ability[c][1] &lt;&lt; <kbd>"["</kbd> &lt;&lt; cost[c][1] &lt;&lt; <kbd>"]\t\t|"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"\t|\t\t\t\t\t\t\t|"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"\t|\t(5) "</kbd> &lt;&lt; ability[c][2] &lt;&lt; <kbd>"["</kbd> &lt;&lt; cost[c][2] &lt;&lt; <kbd>"]\t\t(6) Surrender\t\t|"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"\t|_______________________________________________________|"</kbd> &lt;&lt; endl
		&lt;&lt; endl
		&lt;&lt; <kbd>"\t\t\tYour Move:\t"</kbd>;
	cin &gt;&gt; turn[c];
	<var>if</var> ((a[c] == 11) &amp;&amp; (turn[c] == 3 || turn[c] == 4 || turn[c] == 5)){
		cout &lt;&lt; <kbd>"Mimic:\t"</kbd>;
		cin &gt;&gt; mimic;
	}
}

<var>void</var> combat() {

	c = 0;
	e = 1;
	<var>if</var> (turn[c] == 0){
		aigo();
	}
	c = 1;
	e = 0;
	<var>if</var> (turn[c] == 0){
		aigo();
	}

	thisturn = rand() % (speed[0] + speed[1]);

	<var>if</var> (thisturn &gt; speed[0]) {
		c = 1;
		e = 0;
	}
	<var>else</var> {
		c = 0;
		e = 1;
	}
	<var>if</var> ((turn[c] == 4 &amp;&amp; a[c] == 2) || (turn[c] == 4 &amp;&amp; mimic == 2 &amp;&amp; a[c] == 11)){
		status[c].assign(<kbd>"Shielded"</kbd>);
		statusduration[c] = 10;
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" puts up a water barrier"</kbd> &lt;&lt; endl;
		attack = 0;
	}
	<var>if</var> (turn[c] == 5 &amp;&amp; a[c] == 8){
		status[c].assign(<kbd>"Healthy"</kbd>);
	}
	<var>if</var> (health[0] &gt; 0 &amp;&amp; health[1] &gt; 0) {
		<var>if</var> (status[c] == <kbd>"Stunned"</kbd>){
			cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" is stunned and cannot act"</kbd> &lt;&lt; endl;
		}
		
		<var>else</var>{
			<var>switch</var> (turn[c]){
			<var>case</var> 1:
				attacking();
				<var>break</var>;

			<var>case</var> 2:
				cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" protects themselves."</kbd> &lt;&lt; endl;
				<var>break</var>;

			<var>case</var> 3:
				cast1();
				<var>break</var>;

			<var>case</var> 4:
				cast2();
				<var>break</var>;

			<var>case</var> 5:
				cast3();
				<var>break</var>;

			<var>case</var> 6:
				health[c] = 0;
				cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" surrenders"</kbd> &lt;&lt; endl;
				<var>break</var>;
			<var>default</var>:
				cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" sits idle"</kbd> &lt;&lt; endl;
				<var>break</var>;
			}
		}
		absorb();
		statuscheck();
	}
	<var>if</var> (c == 0){
		c = 1;
		e = 0;
	}
	<var>else</var> {
		c = 0;
		e = 1;
	}
	<var>if</var> ((turn[c] == 4 &amp;&amp; a[c] == 2) || (turn[c] == 4 &amp;&amp; mimic == 2 &amp;&amp; a[c] == 11)){
		status[c].assign(<kbd>"Shielded"</kbd>);
		statusduration[c] = 10;
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" puts up a water barrier"</kbd> &lt;&lt; endl;
		attack = 0;
	}
	<var>if</var> (turn[c] == 5 &amp;&amp; a[c] == 8){
		status[c].assign(<kbd>"Healthy"</kbd>);
	}
	<var>if</var> (health[0] &gt; 0 &amp;&amp; health[1] &gt; 0) {
		<var>if</var> (status[c] == <kbd>"Stunned"</kbd>){
			cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" is stunned and cannot act"</kbd> &lt;&lt; endl;
		}
		<var>else</var> {
			<var>switch</var> (turn[c]){

			<var>case</var> 1:
				attacking();
				checkdead();
				<var>break</var>;

			<var>case</var> 2:
				cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" protects themselves."</kbd> &lt;&lt; endl;
				<var>break</var>;

			<var>case</var> 3:
				cast1();
				checkdead();
				<var>break</var>;

			<var>case</var> 4:
				cast2();
				checkdead();
				<var>break</var>;

			<var>case</var> 5:
				cast3();
				checkdead();
				<var>break</var>;

			<var>case</var> 6:
				health[c] = 0;
				cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" surrenders"</kbd> &lt;&lt; endl;
				checkdead();
				<var>break</var>;

			}
		}
		absorb();
		statuscheck();
		c = 0;
		e = 1;
		passives();
		checkdead();
		c = 1;
		e = 0;
		passives();
		checkdead();
	}
	cout &lt;&lt; endl &lt;&lt; endl;
	checkdead();
	system(<kbd>"pause"</kbd>);
}

<var>void</var> checkdead() {

	<var>if</var> (health[0] &lt;= 0) {
		cout &lt;&lt; <kbd>"Player 1 has been slain"</kbd> &lt;&lt; endl;
		winner = 2;
		matchwin = a[1];
		matchloose = a[0];
		system(<kbd>"pause"</kbd>);
	}
	<var>if</var> (health[1] &lt;= 0) {
		cout &lt;&lt; <kbd>"Player 2 has been slain"</kbd> &lt;&lt; endl;
		winner = 1;
		matchwin = a[0];
		matchloose = a[1];
		system(<kbd>"pause"</kbd>);
	}

}

<var>void</var> victory() {

	system (<kbd>"CLS"</kbd>);
	cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; winner &lt;&lt; <kbd>" has defeated their opponent and achieved victory!"</kbd> &lt;&lt; endl &lt;&lt; endl;

}

<var>void</var> printheader() {

	cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" is up next"</kbd> &lt;&lt; endl 
		&lt;&lt; endl;
	system(<kbd>"pause"</kbd>);
	system(<kbd>"CLS"</kbd>);
	cout &lt;&lt; Element[0] &lt;&lt; <kbd>" Element: \t\t|\t\t"</kbd> &lt;&lt; Element[1] &lt;&lt; <kbd>" Element"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"[\t"</kbd> &lt;&lt; health[0] &lt;&lt; <kbd>"\t]\t|\t\t[\t"</kbd> &lt;&lt; health[1] &lt;&lt; <kbd>"\t]"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"\t[ "</kbd> &lt;&lt; status[0] &lt;&lt; <kbd>" ]\t|\t\t[ "</kbd> &lt;&lt; status[1] &lt;&lt; <kbd>" ]"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"\t[ "</kbd> &lt;&lt; energy[0] &lt;&lt; <kbd>" ]\t\t|\t\t[ "</kbd> &lt;&lt; energy[1] &lt;&lt; <kbd>" ]"</kbd> &lt;&lt; endl
		&lt;&lt; <kbd>"..................................................................."</kbd> &lt;&lt; endl
		&lt;&lt; endl;
}

<var>void</var> windbody(){
	<var>if</var> (passive[e] == <kbd>"Wind Body"</kbd>){
		hit = 1 + rand() % 100;
		<var>if</var> (hit &lt; dodge[e]){
			attack = 0;
		}
	}
	<var>if</var> (passive[e] == <kbd>"Stone Skin"</kbd>){<cite>// both passives are used in the same situations, so I attached Earth's passive to the code</cite>
		attack = attack - 9;
	}
	<var>if</var> (status[e] == <kbd>"Phased"</kbd>){

		attack = 0;

		<var>switch</var> (turn[c]){
		<var>case</var> 3:
			energy[e] = energy[e] + (2 * cost[c][0]) + 2;
			<var>break</var>;
		<var>case</var> 4:
			energy[e] = energy[e] + (2 * cost[c][1]) + 2;
			<var>break</var>;
		<var>case</var> 5:
			energy[e] = energy[e] + (2 * cost[c][2]) + 2;
			<var>break</var>;
		<var>default</var> :
			<var>break</var>;
		}
	}
}

<var>void</var> hinder(){

	<var>if</var> (status[c] == <kbd>"Hindered"</kbd>){
		attack = attack / 2;
	}

}

<var>void</var> barrier(){

	<var>if</var> (status[e] == <kbd>"Shielded"</kbd>){
		attack = attack / 2;
		<var>if</var> (turn[c] != 2){
			cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; e + 1 &lt;&lt; <kbd>"'s shield absorbs the damage"</kbd> &lt;&lt; endl;
		}
	}

}

<var>void</var> shadowbreak(){

	<var>if</var> (status[e] == <kbd>"Faded"</kbd>){

		attack = 0;
		status[e].assign(<kbd>"Healthy"</kbd>);

	}
	<var>if</var> (status[e] == <kbd>"Boosted"</kbd>){
		attack = 0;
	}

}

<var>void</var> absorb(){

	<var>if</var> (passive[e] == <kbd>"Energy Absorbtion"</kbd>){

		<var>switch</var> (turn[c]){

		<var>case</var> 3:
			energy[e] = energy[e] + ((cost[c][0] + 1) / 2);
			<var>break</var>;
		<var>case</var> 4:
			energy[e] = energy[e] + ((cost[c][1] + 1) / 2);
			<var>break</var>;
		<var>case</var> 5:
			energy[e] = energy[e] + ((cost[c][2] + 1) / 2);
			<var>break</var>;
		<var>default</var>:
			<var>break</var>;
		}

	}

}

<var>void</var> attacking(){
	cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" attacks"</kbd>;
	hit = 1 + rand() % 100;
	<var>if</var> (hit &lt;= dodge[e]) {
		cout &lt;&lt; <kbd>", but misses"</kbd> &lt;&lt; endl;
	}
	<var>else</var> <var>if</var> (hit &gt; dodge[e]) {
		<var>if</var> (passive[c] == <kbd>"Corrosion"</kbd>){
			status[e].assign(<kbd>"Poisoned"</kbd>);
			statusduration[e] = 10;
			venom[e] = venom[e] + 1;
		}
		attack = 1 + rand() % power[c];
		<var>if</var> (attack &gt; armor[e]) {
			attack = attack - armor[e];
			<var>if</var> (turn[e] == 2) {
				attack = attack / 2;
				<var>if</var> (a[e] == 3){
					attack = attack / 2;
					energy[e]++;
					cout &lt;&lt; <kbd>", but Player "</kbd> &lt;&lt; e + 1 &lt;&lt; <kbd>"'s shock guard absorbs the attack."</kbd> &lt;&lt; endl
						&lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" attacks"</kbd>;
				}
			}
			<var>if</var> (status[c] == <kbd>"Rampaging"</kbd>){
				attack = attack * 4;
			}
			<var>if</var> (passive[c] == <kbd>"Growing Death"</kbd>){
				power[c] = power[c] + 5;
			}
			barrier();
			hinder();
			shadowbreak();
			<var>if</var> (status[c] == <kbd>"Boosted"</kbd>){
				attack = attack + 30;
			}
			cout &lt;&lt; <kbd>", dealing "</kbd> &lt;&lt; attack &lt;&lt; <kbd>" damage."</kbd> &lt;&lt; endl;
			health[e] = health[e] - attack;
			<var>if</var> (a[c] == 8){
				health[c] = health[c] + attack / 5;
			}
			<var>if</var> (passive[c] == <kbd>"Growing Death"</kbd>){
				cout &lt;&lt; <kbd>"Darkness has grown to ["</kbd> &lt;&lt; power[c] &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl;
			}
			checkdead();
		}
		<var>else</var> {
			cout &lt;&lt; <kbd>", but only scratches the armor."</kbd> &lt;&lt; endl;
		}
		<var>if</var> (a[c] == 12){
			cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; e + 1 &lt;&lt; <kbd>" is blasted for ["</kbd> &lt;&lt; charge &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl;
			health[e] = health[e] - charge;
		}
	}
}

<var>void</var> cast1(){

	<var>if</var> (cost[c][0] &lt;= energy[c]) {
		energy[c] = energy[c] - cost[c][0];
		<var>if</var> (a[e] == 12 || a[c] == 12){
			charge = charge + cost[c][0];
			cout &lt;&lt; <kbd>"Manaburn's charge grows to ["</kbd> &lt;&lt; charge &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl;
		}
		<var>switch</var> (a[c]) {
		<var>case</var> 1: <cite>// blast</cite>
			attack = 40;
			windbody();
			shadowbreak();
			barrier();
			hinder();
			status[e].assign(<kbd>"Burning"</kbd>);
			statusduration[e] = 2;
			health[e] = health[e] - attack;
			<var>break</var>;
		<var>case</var> 2: <cite>// wave</cite>
			attack = 33;
			windbody();
			hinder();
			shadowbreak();
			barrier();
			health[e] = health[e] - attack;
			health[c] = health[c] + (attack/3);
			<var>break</var>;
		<var>case</var> 3: <cite>// discharge</cite>
			attack = energy[c] * 15;
			windbody();
			shadowbreak();
			hinder();
			barrier();
			health[e] = health[e] - attack;
			energy[c] = 0;
			<var>break</var>;
		<var>case</var> 4: <cite>// divine blessing</cite>
			health[c] = health[c] + 25;
			attack = 25;
			<var>break</var>;
		<var>case</var> 5: <cite>// gust</cite>
			attack = 20;
			windbody();
			hinder();
			shadowbreak();
			barrier();
			status[e].assign(<kbd>"Storm"</kbd>);
			statusduration[e] = 5;
			health[e] = health[e] - attack;
			<var>break</var>;
		<var>case</var> 6: <cite>// focus strike</cite>
			attack = 25;
			windbody();
			shadowbreak();
			hinder();
			barrier();
			health[e] = health[e] - attack;
			<var>break</var>;
		<var>case</var> 7:
			attack = 20;
			windbody();
			shadowbreak();
			hinder();
			barrier();
			health[e] = health[e] - attack;
			status[e].assign(<kbd>"Stunned"</kbd>);
			statusduration[e] = 1;
			<var>break</var>;
		<var>case</var> 8:
			attack = 0;
			status[e].assign(<kbd>"Bleeding"</kbd>);
			statusduration[e] = 3;
			<var>break</var>;
		<var>case</var> 9:
			attack = 0;
			status[c].assign(<kbd>"Faded"</kbd>);
			statusduration[c] = 2;
			power[c] = power[c] + 5;
			cout &lt;&lt; <kbd>"Darkness has grown to ["</kbd> &lt;&lt; power[c] &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl;
			<var>break</var>;
		<var>case</var> 10:
			attack = venom[e] * 15;
			shadowbreak();
			windbody();
			hinder();
			barrier();
			health[e] = health[e] - attack;
			<var>break</var>;
		<var>case</var> 12:
			<var>if</var> (a[c] == 12){
				attack = 0;
				status[c].assign(<kbd>"Phased"</kbd>);
				statusduration[c] = 2;
			}
			<var>break</var>;
		<var>case</var> 11:
			<var>switch</var> (mimic){
			<var>case</var> 1: <cite>// blast</cite>
				attack = 40;
				windbody();
				shadowbreak();
				hinder();
				barrier();
				status[e].assign(<kbd>"Burning"</kbd>);
				statusduration[e] = 2;
				health[e] = health[e] - attack;
				energy[c] = energy[c] + 2;
				<var>break</var>;
			<var>case</var> 2: <cite>// wave</cite>
				attack = 33;
				windbody();
				hinder();
				shadowbreak();
				barrier();
				health[e] = health[e] - attack;
				health[c] = health[c] + (attack/3);
				energy[c] = energy[c] + 2;
				<var>break</var>;
			<var>case</var> 3: <cite>// discharge</cite>
				energy[c] = energy[c] + 4;
				attack = energy[c] * 15;
				windbody();
				shadowbreak();
				hinder();
				barrier();
				health[e] = health[e] - attack;
				energy[c] = 0;
				<var>break</var>;
			<var>case</var> 4: <cite>// divine blessing</cite>
				health[c] = health[c] + 25;
				energy[c] = energy[c] + 1;
				attack = 25;
				<var>break</var>;
			<var>case</var> 5: <cite>// gust</cite>
				attack = 20;
				windbody();
				hinder();
				shadowbreak();
				barrier();
				status[e].assign(<kbd>"Storm"</kbd>);
				statusduration[e] = 5;
				health[e] = health[e] - attack;
				energy[c] = energy[c] + 3;
				<var>break</var>;
			<var>case</var> 6: <cite>// focus strike</cite>
				energy[c] = energy[c] + 3;
				attack = 25;
				windbody();
				shadowbreak();
				hinder();
				barrier();
				health[e] = health[e] - attack;
				<var>break</var>;
			<var>case</var> 7:
				attack = 20;
				windbody();
				shadowbreak();
				hinder();
				barrier();
				health[e] = health[e] - attack;
				status[e].assign(<kbd>"Stunned"</kbd>);
				statusduration[e] = 1;
				<var>break</var>;
			<var>case</var> 8:
				attack = 0;
				status[e].assign(<kbd>"Bleeding"</kbd>);
				statusduration[e] = 3;
				energy[c] = energy[c] + 2;
				<var>break</var>;
			<var>case</var> 9:
				attack = 0;
				status[c].assign(<kbd>"Faded"</kbd>);
				statusduration[c] = 2;
				power[c] = power[c] + 5;
				cout &lt;&lt; <kbd>"Darkness has grown to ["</kbd> &lt;&lt; power[c] &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl;
				energy[c] = energy[c] + 3;
				<var>break</var>;
			<var>case</var> 10:
				attack = venom[e] * 15;
				shadowbreak();
				windbody();
				hinder();
				barrier();
				health[e] = health[e] - attack;
				energy[c] = energy[c] + 1;
				<var>break</var>;
			}
			<var>break</var>;
		}
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>":\t"</kbd> &lt;&lt; ability[c][0] &lt;&lt; <kbd>" ["</kbd> &lt;&lt; attack &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl;
	}
	<var>else</var> {
		cout &lt;&lt; <kbd>"Player 2 attempts to use first ability, but is out of energy"</kbd> &lt;&lt; endl;
	}
}

<var>void</var> cast2(){
	<var>if</var> (cost[c][1] &lt;= energy[c]) {
		energy[c] = energy[c] - cost[c][1];
		<var>if</var> (a[e] == 12 || a[c] == 12){
			charge = charge + cost[c][1];
		}
		<var>switch</var> (a[c]) {
		<var>case</var> 1: <cite>// Flamethrower</cite>
			attack = 45;
			shadowbreak();
			hinder();
			windbody();
			barrier();
			<var>if</var> (status[e] == <kbd>"Burning"</kbd>){
				status[e].assign(<kbd>"Stunned"</kbd>);
				statusduration[e] = 2;
				cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" fuels the fire and stuns Player "</kbd> &lt;&lt; e + 1 &lt;&lt; endl;
			}
			<var>else</var> {
				status[e].assign(<kbd>"Burning"</kbd>);
				statusduration[e] = 2;
			}
			health[e] = health[e] - attack;
			<var>break</var>;
		<var>case</var> 2: <cite>// barrier, see other section, needed to be moved to properly use cleanse effect against stuns</cite>
			<var>break</var>;
		<var>case</var> 3: <cite>// shock absorb</cite>
			<var>if</var> (turn[e] == 3){
				<var>switch</var> (a[e]){
				<var>case</var> 1:
					attack = 20;
					health[c] = health[c] + 40;
					<var>break</var>;
				<var>case</var> 2:
					attack = 33;
					health[c] = health[c] + 66;
					<var>break</var>;
				<var>case</var> 3:
					attack = energy[e] * 15;
					health[c] = health[c] + 2 * attack;
					<var>break</var>;
				<var>case</var> 5:
					attack = 20;
					health[c] = health[c] + 40;
					<var>break</var>;
				<var>case</var> 6:
					attack = 25;
					health[c] = health[c] + 50;
					<var>break</var>;
				<var>case</var> 7:
					attack = 20;
					health[c] = health[c] + 40;
					<var>break</var>;
				<var>case</var> 10:
					attack = venom[c] * 15;
					health[c] = health[c] + (2 * attack);
					<var>break</var>;
				<var>default</var>:
					<var>break</var>;
				}

				cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" absorbs the enemy ability and heals themselves"</kbd> &lt;&lt; endl;
			}
			<var>else</var> <var>if</var> (turn[e] == 4){
				<var>switch</var> (a[e]){
				<var>case</var> 1:
					attack = 45;
					health[c] = health[c] + 90;
					<var>break</var>;
				<var>case</var> 7:
					attack = health[c] / 10 * 3;
					health[c] = health[c] + 2 * attack;
					<var>break</var>;
				<var>case</var> 8:
					attack = 20;
					health[c] = health[c] + 40;
				<var>default</var>:
					<var>break</var>;
				}

				cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" absorbs the enemy ability and heals themselves"</kbd> &lt;&lt; endl;
			}
			<var>else</var> <var>if</var> (turn[e] == 5){
				<var>switch</var> (a[e]){
				<var>case</var> 1:
					attack = 120;
					health[c] = health[c] + 240;
					<var>break</var>;
				<var>case</var> 2:
					attack = 110;
					health[c] = health[c] + 220;
					<var>break</var>;
				<var>case</var> 3:
					attack = 100;
					health[c] = health[c] + 200;
					<var>break</var>;
				<var>case</var> 4:
					attack = 150;
					health[c] = health[c] + 300;
					<var>break</var>;
				<var>case</var> 5:
					attack = 120;
					health[c] = health[c] + 240;
					<var>break</var>;
				<var>case</var> 6:
					attack = (300 - health[e]) / 10 * 4;
					health[c] = health[c] + 2 * ((300 - health[e]) / 10 * 4);
					<var>break</var>;
				<var>case</var> 7:
					attack = 120;
					health[c] = health[c] + 240;
					<var>break</var>;
				<var>case</var> 10:
					attack = venom[c] * 10 + 50;
					health[c] = health[c] + 2 * attack;
					<var>break</var>;
				<var>default</var>:
					<var>break</var>;
				}

				cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" absorbs the enemy ability and heals themselves"</kbd> &lt;&lt; endl;
			}
			<var>else</var> {
				attack = 0;
			}
			<var>break</var>;

		<var>case</var> 4: <cite>// hinder</cite>
			status[e].assign(<kbd>"Hindered"</kbd>);
			statusduration[e] = 3;
			attack = 0;
			<var>break</var>;
		<var>case</var> 5: <cite>// wind charge</cite>
			attack = 0;
			shadowbreak();
			status[c].assign(<kbd>"Charging"</kbd>);
			statusduration[c] = 4;
			dodge[c] = 100;
			<var>break</var>;
		<var>case</var> 6: <cite>// meditate</cite>
			attack = 30;
			health[c] = health[c] + attack;
			<var>break</var>;
		<var>case</var> 7:
			attack = health[e] / 10 * 3;
			shadowbreak();
			windbody();
			hinder();
			barrier();
			health[e] = health[e] - attack;
			<var>break</var>;
		<var>case</var> 8:
			attack = 20;
			shadowbreak();
			windbody();
			hinder();
			barrier();
			health[e] = health[e] - attack;
			health[c] = health[c] + attack;
			<var>break</var>;
		<var>case</var> 9:
			attacking();
			attacking();
			attack = 0;
			<var>break</var>;
		<var>case</var> 10:
			attack = 0;
			status[c].assign(<kbd>"Boosted"</kbd>);
			statusduration[c] = 2;
			<var>break</var>;
		<var>case</var> 12:
			attack = 0;
			status[e].assign(<kbd>"Manaburn"</kbd>);
			statusduration[e] = 10;
			<var>break</var>;
		<var>case</var> 11:
			<var>switch</var> (mimic){
			<var>case</var> 1: <cite>// Flamethrower</cite>
				attack = 45;
				shadowbreak();
				hinder();
				windbody();
				barrier();
				<var>if</var> (status[e] == <kbd>"Burning"</kbd>){
					status[e].assign(<kbd>"Stunned"</kbd>);
					statusduration[e] = 2;
					cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" fuels the fire and stuns Player "</kbd> &lt;&lt; e + 1 &lt;&lt; endl;
				}
				<var>else</var> {
					status[e].assign(<kbd>"Burning"</kbd>);
					statusduration[e] = 2;
				}
				energy[c] = energy[c] + 3;
				health[e] = health[e] - attack;
				<var>break</var>;
			<var>case</var> 2: <cite>// barrier, see other section, needed to be moved to properly use cleanse effect against stuns</cite>
				energy[c] = energy[c] + 3;
				<var>break</var>;
			<var>case</var> 3: <cite>// shock absorb</cite>
				<var>if</var> (turn[e] == 3){
					energy[c] = energy[c] + 3;
					<var>switch</var> (a[e]){
					<var>case</var> 1:
						attack = 20;
						health[c] = health[c] + 40;
						<var>break</var>;
					<var>case</var> 2:
						attack = 33;
						health[c] = health[c] + 66;
						<var>break</var>;
					<var>case</var> 3:
						attack = energy[e] * 15;
						health[c] = health[c] + 2 * attack;
						<var>break</var>;
					<var>case</var> 5:
						attack = 20;
						health[c] = health[c] + 40;
						<var>break</var>;
					<var>case</var> 6:
						attack = 25;
						health[c] = health[c] + 50;
						<var>break</var>;
					<var>case</var> 7:
						attack = 20;
						health[c] = health[c] + 40;
						<var>break</var>;
					<var>case</var> 10:
						attack = venom[c] * 15;
						health[c] = health[c] + (2 * attack);
						<var>break</var>;
					<var>default</var>:
						<var>break</var>;
					}

					cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" absorbs the enemy ability and heals themselves"</kbd> &lt;&lt; endl;
				}
				<var>else</var> <var>if</var> (turn[e] == 4){
					<var>switch</var> (a[e]){
					<var>case</var> 1:
						attack = 45;
						health[c] = health[c] + 90;
						<var>break</var>;
					<var>case</var> 7:
						attack = health[c] / 10 * 3;
						health[c] = health[c] + 2 * attack;
						<var>break</var>;
					<var>case</var> 8:
						attack = 20;
						health[c] = health[c] + 40;
					<var>default</var>:
						<var>break</var>;
					}

					cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" absorbs the enemy ability and heals themselves"</kbd> &lt;&lt; endl;
				}
				<var>else</var> <var>if</var> (turn[e] == 5){
					<var>switch</var> (a[e]){
					<var>case</var> 1:
						attack = 120;
						health[c] = health[c] + 240;
						<var>break</var>;
					<var>case</var> 2:
						attack = 110;
						health[c] = health[c] + 220;
						<var>break</var>;
					<var>case</var> 3:
						attack = 100;
						health[c] = health[c] + 200;
						<var>break</var>;
					<var>case</var> 4:
						attack = 150;
						health[c] = health[c] + 300;
						<var>break</var>;
					<var>case</var> 5:
						attack = 120;
						health[c] = health[c] + 240;
						<var>break</var>;
					<var>case</var> 6:
						attack = (300 - health[e]) / 10 * 4;
						health[c] = health[c] + 2 * ((300 - health[e]) / 10 * 4);
						<var>break</var>;
					<var>case</var> 7:
						attack = 120;
						health[c] = health[c] + 240;
						<var>break</var>;
					<var>case</var> 10:
						attack = venom[c] * 10 + 50;
						health[c] = health[c] + 2 * attack;
						<var>break</var>;
					<var>default</var>:
						<var>break</var>;
					}

					cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" absorbs the enemy ability and heals themselves"</kbd> &lt;&lt; endl;
				}
				<var>else</var> {
					attack = 0;
				}
				<var>break</var>;

			<var>case</var> 4: <cite>// hinder</cite>
				status[e].assign(<kbd>"Hindered"</kbd>);
				statusduration[e] = 3;
				attack = 0;
				energy[c] = energy[c] + 3;
				<var>break</var>;
			<var>case</var> 5: <cite>// wind charge</cite>
				attack = 0;
				shadowbreak();
				status[c].assign(<kbd>"Charging"</kbd>);
				statusduration[c] = 4;
				dodge[c] = 100;
				energy[c] = energy[c] + 2;
				<var>break</var>;
			<var>case</var> 6: <cite>// meditate</cite>
				attack = 30;
				energy[c] = energy[c] + 2;
				health[c] = health[c] + attack;
				<var>break</var>;
			<var>case</var> 7:
				attack = health[e] / 10 * 3;
				shadowbreak();
				windbody();
				hinder();
				barrier();
				health[e] = health[e] - attack;
				<var>break</var>;
			<var>case</var> 8:
				attack = 20;
				shadowbreak();
				windbody();
				hinder();
				barrier();
				health[e] = health[e] - attack;
				health[c] = health[c] + attack;
				energy[c] = energy[c] + 2;
				<var>break</var>;
			<var>case</var> 9:
				attacking();
				attacking();
				attack = 0;
				energy[c] = energy[c] + 2;
				<var>break</var>;
			<var>case</var> 10:
				attack = 0;
				status[c].assign(<kbd>"Boosted"</kbd>);
				statusduration[c] = 2;
				energy[c] = energy[c] + 2;
				<var>break</var>;
			}
			<var>break</var>;
		}
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>":\t"</kbd> &lt;&lt; ability[c][1] &lt;&lt; <kbd>" ["</kbd> &lt;&lt; attack &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl;
	}
	<var>else</var> {
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" attempts to use second ability, but is out of energy"</kbd> &lt;&lt; endl;
	}
}

<var>void</var> cast3(){
	<var>if</var> (cost[c][2] &lt;= energy[c]) {
		energy[c] = energy[c] - cost[c][2];
		<var>if</var> (a[e] == 12 || a[c] == 12){
			charge = charge + cost[c][2];
		}
		<var>switch</var> (a[c]) {
		<var>case</var> 1:<cite>// ("Rain of Fire"); // high damage ablilty 120</cite>
			attack = 120;
			windbody();
			shadowbreak();
			hinder();
			barrier();
			status[e].assign(<kbd>"Burning"</kbd>);
			statusduration[e] = 2;
			health[e] = health[e] - attack;
			<var>break</var>;

		<var>case</var> 2:<cite>//("Tsunami"); // high damage ability, halfs opponent damage for 2 turns 110</cite>
			attack = 110;
			windbody();
			shadowbreak();
			barrier();
			hinder();
			status[e].assign(<kbd>"Hindered"</kbd>);
			statusduration[e] = 2;
			health[e] = health[e] - attack;
			health[c] = health[c] + attack / 3;
			<var>break</var>;

		<var>case</var> 3:<cite>//("High Voltage");// 100 stun opponent for 2 turns</cite>
			attack = 100;
			windbody();
			hinder();
			barrier();
			shadowbreak();
			status[e].assign(<kbd>"Stunned"</kbd>);
			statusduration[e] = 2;
			health[e] = health[e] - attack;
			<var>break</var>;

		<var>case</var> 4:<cite>//("Smite");// 150 damage</cite>
			attack = 150;
			shadowbreak();
			windbody();
			barrier();
			hinder();
			health[e] = health[e] - attack;
			<var>break</var>;

		<var>case</var> 5:<cite>//("Tempest");// increase dodge to 100% for 2 turns (this one included), deal 120 damage</cite>
			attack = 120;
			shadowbreak();
			windbody();
			barrier();
			hinder();
			status[c].assign(<kbd>"Tempest"</kbd>);
			dodge[c] = 100;
			statusduration[c] = 2;
			health[e] = health[e] - attack;
			<var>break</var>;

		<var>case</var> 6:<cite>//("Execution"); // 40% of your missing hp as damage</cite>
			attack = (300 - health[c]) / 10 * 4;
			shadowbreak();
			windbody();
			barrier();
			hinder();
			health[e] = health[e] - attack;
			<var>break</var>;

		<var>case</var> 7:
			attack = 120;
			shadowbreak();
			windbody();
			hinder();
			barrier();
			health[e] = health[e] - attack;
			status[e].assign(<kbd>"Shaken"</kbd>);
			statusduration[e] = 10;
			<var>break</var>;

		<var>case</var> 8:
			attack = 0;
			status[c].assign(<kbd>"Rampaging"</kbd>);
			statusduration[c] = 4;
			<var>break</var>;

		<var>case</var> 9:
			health[c] = health[c] + 50;
			shadowbreak();
			attacking();
			attacking();
			attacking();
			attack = 50;
			<var>break</var>;
		<var>case</var> 10:
			status[e].assign(<kbd>"Poisoned"</kbd>);
			statusduration[e] = 10;
			attack = venom[e] * 10 + 50;
			shadowbreak();
			windbody();
			hinder();
			barrier();
			venom[e] = venom[e] + 3;
			health[e] = health[e] - attack;
			<var>break</var>;
		<var>case</var> 12:
			attack = ((energy[c] + energy[e] + cost[c][2]) * 10);
			energy[e] = -1;
			health[e] = health[e] - attack;
			<var>break</var>;
		<var>case</var> 11:
			<var>switch</var>(mimic){
			<var>case</var> 1:<cite>// ("Rain of Fire"); // high damage ablilty 120</cite>
				attack = 120;
				windbody();
				shadowbreak();
				hinder();
				barrier();
				status[e].assign(<kbd>"Burning"</kbd>);
				statusduration[e] = 2;
				
				health[e] = health[e] - attack;
				energy[c] = energy[c] + 2;
				<var>break</var>;

			<var>case</var> 2:<cite>//("Tsunami"); // high damage ability, halfs opponent damage for 2 turns 110</cite>
				attack = 110;
				windbody();
				shadowbreak();
				barrier();
				hinder();
				status[e].assign(<kbd>"Hindered"</kbd>);
				statusduration[e] = 2;
				health[e] = health[e] - attack;
				health[c] = health[c] + attack / 3;
				energy[c] = energy[c] + 2;
				<var>break</var>;

			<var>case</var> 3:<cite>//("High Voltage");// 100 stun opponent for 2 turns</cite>
				attack = 100;
				windbody();
				hinder();
				barrier();
				shadowbreak();
				status[e].assign(<kbd>"Stunned"</kbd>);
				statusduration[e] = 2;
				health[e] = health[e] - attack;
				energy[c] = energy[c] + 1;
				<var>break</var>;

			<var>case</var> 4:<cite>//("Smite");// 150 damage</cite>
				attack = 150;
				shadowbreak();
				windbody();
				barrier();
				hinder();
				energy[c] = energy[c] + 1;
				health[e] = health[e] - attack;
				<var>break</var>;

			<var>case</var> 5:<cite>//("Tempest");// increase dodge to 100% for 2 turns (this one included), deal 120 damage</cite>
				attack = 120;
				shadowbreak();
				windbody();
				barrier();
				hinder();
				energy[c] = energy[c] + 2;
				status[c].assign(<kbd>"Tempest"</kbd>);
				dodge[c] = 100;
				statusduration[c] = 2;
				health[e] = health[e] - attack;
				<var>break</var>;

			<var>case</var> 6:<cite>//("Execution"); // 40% of your missing hp as damage</cite>
				attack = (300 - health[c]) / 10 * 4;
				shadowbreak();
				windbody();
				barrier();
				hinder();
				energy[c] = energy[c] + 3;
				health[e] = health[e] - attack;
				<var>break</var>;

			<var>case</var> 7:
				attack = 120;
				shadowbreak();
				windbody();
				hinder();
				barrier();
				health[e] = health[e] - attack;
				status[e].assign(<kbd>"Shaken"</kbd>);
				statusduration[e] = 10;
				<var>break</var>;

			<var>case</var> 8:
				status[c].assign(<kbd>"Rampaging"</kbd>);
				statusduration[c] = 4;
				energy[c] = energy[c] + 3;
				<var>break</var>;

			<var>case</var> 9:
				health[c] = health[c] + 50;
				shadowbreak();
				attacking();
				attacking();
				attacking();
				energy[c] = energy[c] + 1;
				attack = 50;
				<var>break</var>;
			<var>case</var> 10:
				attack = venom[e] * 10 + 50;
				shadowbreak();
				windbody();
				hinder();
				barrier();
				energy[c] = energy[c] + 3;
				venom[e] = venom[e] + 3;
				health[e] = health[e] - attack;
				<var>break</var>;
			}
			<var>break</var>;
		}

		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>":\t"</kbd> &lt;&lt; ability[c][2] &lt;&lt; <kbd>" ["</kbd> &lt;&lt; attack &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl;
	}
	<var>else</var> {
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" attempts to use third ability, but is out of energy"</kbd> &lt;&lt; endl;
	}
}

<var>void</var> passives() {

	<var>switch</var> (a[c]){

	<var>case</var> 6: <cite>// swordsman's valor</cite>
		health[c] = health[c] + 3;
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" regains [3] life"</kbd> &lt;&lt; endl;
		<var>break</var>;
	<var>case</var> 4: <cite>// holy's cleanse</cite>
		status[c].assign(<kbd>"Healthy"</kbd>);
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" cleanses themselves of impurities"</kbd> &lt;&lt; endl;
		<var>break</var>;
	<var>case</var> 5: <cite>// wind, check damage modifier from charge and dodge modifier from tempest</cite>
		<var>if</var> (status[c] != <kbd>"Charging"</kbd>){
			power[c] = 25;
		}
		<var>else</var> {
			power[c] = 75;
		}
		<var>if</var> (status[c] != <kbd>"Tempest"</kbd>){
			dodge[c] = 35;
		}
		<var>else</var>{
			dodge[c] = 100;
		}
		<var>break</var>;
	<var>case</var> 11: <cite>// wind, check damage modifier from charge and dodge modifier from tempest</cite>
		<var>if</var> (status[c] != <kbd>"Charging"</kbd>){
			power[c] = 25;
		}
		<var>else</var> {
			power[c] = 75;
		}
		<var>if</var> (status[c] != <kbd>"Tempest"</kbd>){
			dodge[c] = 35;
		}
		<var>else</var>{
			dodge[c] = 100;
		}
		<var>break</var>;
	<var>default</var>:
		<var>break</var>;
	}
	<var>if</var> (status[c] != <kbd>"Poisoned"</kbd>){
		venom[c] = 0;
	}
}

<var>void</var> statuscheck(){
	<cite>// Burning			O</cite>
	<cite>// Hindered			X</cite>
	<cite>// Storm			O</cite>
	<cite>// Stunned			X</cite>
	<cite>// Shielded			X</cite>
	<cite>// Charging			X</cite>
	<cite>// Tempest			X</cite>
	<cite>// Healthy			X</cite>
	<cite>// Shaken			O</cite>
	<cite>// Bleeding			O</cite>
	<cite>// Rampaging		X</cite>
	statusduration[c] = statusduration[c] - 1;

	<var>if</var> (status[c] == <kbd>"Burning"</kbd>){
		health[c] = health[c] - 10;
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" Burns for [10], "</kbd> &lt;&lt; statusduration[c] &lt;&lt; <kbd>" turn(s) remaining"</kbd> &lt;&lt; endl;
	}
	<var>else</var> <var>if</var> (status[c] == <kbd>"Storm"</kbd>){
		health[c] = health[c] - 3;
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" is injured by resonate wind for [3], "</kbd> &lt;&lt; statusduration[c] &lt;&lt; <kbd>" turn(s) remaining"</kbd> &lt;&lt; endl;
	}
	<var>else</var> <var>if</var> (status[c] == <kbd>"Healthy"</kbd>){
	}
	<var>else</var> <var>if</var> (status[c] == <kbd>"Shaken"</kbd>){
		health[c] = health[c] - 15;
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" is shaken for [15]"</kbd> &lt;&lt; endl;
	}
	<var>else</var> <var>if</var> (status[c] == <kbd>"Bleeding"</kbd>){
		attack = health[c] / 20;
		health[c] = health[c] - attack;
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" bleeds for ["</kbd> &lt;&lt; attack &lt;&lt; <kbd>"], "</kbd> &lt;&lt; statusduration[c] &lt;&lt; <kbd>" turn(s) remaining"</kbd> &lt;&lt; endl;
	}
	<var>else</var> <var>if</var> (status[c] == <kbd>"Poisoned"</kbd>){
		attack = venom[c] * 5;
		health[c] = health[c] - attack;
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" is poisoned for ["</kbd> &lt;&lt; attack &lt;&lt; <kbd>"]. There are a total of ["</kbd> &lt;&lt; venom[c] &lt;&lt; <kbd>"] stacks"</kbd> &lt;&lt; endl;
	}
	<var>else</var> <var>if</var> (status[c] == <kbd>"Manaburn"</kbd>){
		health[c] = health[c] - (energy[c] * 2) - (energy[e] * 2);
		health[e] = health[e] + (energy[c] * 2) + (energy[e] * 2);
		attack = (energy[c] * 2) + (energy[e] * 2);
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" is Manaburned for ["</kbd> &lt;&lt; attack &lt;&lt; <kbd>"]"</kbd> &lt;&lt; endl;
	}
	<var>else</var> {
		cout &lt;&lt; <kbd>"Player "</kbd> &lt;&lt; c + 1 &lt;&lt; <kbd>" is ["</kbd> &lt;&lt; status[c] &lt;&lt; <kbd>"], "</kbd> &lt;&lt; statusduration[c] &lt;&lt; <kbd>" turn(s) remaining"</kbd> &lt;&lt; endl;
	}

	<var>if</var> (statusduration[c] &lt;= 0){
		status[c].assign(<kbd>"Healthy"</kbd>);
	}

}

<var>void</var> record(){
	ifstream infile;
	infile.open(<kbd>"Balance.txt"</kbd>);

	j = 0;

	<var>while</var> (j &lt; 12){

		k = 0;

		<var>while</var> (k &lt; 12){
			infile &gt;&gt; matchup[k][j];
			k++;
			
		}
		j++;

	}

	infile.close();

	matchwin = matchwin - 1;
	matchloose = matchloose - 1;

	matchup[matchloose][matchwin]++;

	ofstream outfile;

	outfile.open(<kbd>"Balance.txt"</kbd>);

	j = 0;

	<var>while</var> (j &lt; 12){

		k = 0;

		<var>while</var> (k &lt; 12){
			outfile &lt;&lt; matchup[k][j] &lt;&lt; <kbd>"\t"</kbd>;
			k++;

		}
		outfile &lt;&lt; endl;
		j++;
		cout &lt;&lt; endl;
	}

	outfile.close();
}

<var>void</var> aigo(){
	<var>switch</var> (a[c]){
	<var>case</var> 1: <cite>// fire ai</cite>
		<var>if</var> (energy[c] &gt;= 3 &amp;&amp; status[e] == <kbd>"Burning"</kbd>){
			turn[c] = 4;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][2]){
			turn[c] = 5;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
			turn[c] = (rand() % 4) + 1;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0]){
			turn[c] = (rand() % 3) + 1;
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][0]){
			turn[c] = (rand() % 2) + 1;
		}
		<var>break</var>;
	<var>case</var> 2: <cite>// water ai</cite>
		<var>if</var> (energy[c] &gt;= 3 &amp;&amp; status[c] != <kbd>"Shielded"</kbd>){
			turn[c] = 4;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][2]){
			turn[c] = 5;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
			turn[c] = (rand() % 4) + 1;
			<var>if</var> (turn[c] == 4){
				turn[c] = turn[c] - 1;
			}
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0]){
			turn[c] = (rand() % 3) + 1;
			<var>if</var> (turn[c] == 4){
				turn[c] = turn[c] - 1;
			}
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][0]){
			turn[c] = (rand() % 2) + 1;
		}
		<var>break</var>;
	<var>case</var> 3: <cite>// static ai</cite>
		<var>if</var> (status[e] == <kbd>"Stunned"</kbd>){
			turn[c] = 1;
		}
		<var>else</var> <var>if</var> (energy[e] &gt;= cost[e][2] &amp;&amp; energy[c] &gt;= cost[c][1]){
			turn[c] = 4;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][2]){
			turn[c] = (rand() % 3);
			<var>if</var> (turn[c] == 1){
				turn[c] = 3;
			}
			<var>else</var> <var>if</var> (turn[c] == 0){
				turn[c] = 5;
			}
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
			turn[c] = (rand() % 4) + 1;
			<var>if</var> (turn[c] == 1){
				turn[c]++;
			}
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][1]){
			turn[c] = 2;
		}
		<var>break</var>;
	<var>case</var> 4: <cite>// holy ai</cite>
		<var>if</var> (energy[c] &gt;= cost[c][1] &amp;&amp; status[e] != <kbd>"Hindered"</kbd>){
			turn[c] = 4;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0] &amp;&amp; health[c] &lt;=100){
			turn[c] = 3;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][2]){
			turn[c] = 5;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0]){
			turn[c] = (rand() % 3) + 1;
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][0]){
			turn[c] = (rand() % 2) + 1;
		}
		<var>break</var>;
	<var>case</var> 5: <cite>// wind ai</cite>
		<var>if</var> (status[c] == <kbd>"Charging"</kbd>){
			turn[c] = 1;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0] &amp;&amp; (status[e] != <kbd>"Healthy"</kbd> &amp;&amp; status[e] != <kbd>"Storm"</kbd> &amp;&amp; status[e] != <kbd>"Faded"</kbd>)){
			turn[c] = 3;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][2]){
				turn[c] = 5;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
			<var>do</var> {
				turn[c] = (rand() % 3) + 1;
			} <var>while</var> (turn[c] == 2);
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0]){
			<var>do</var> {
				turn[c] = (rand() % 3) + 1;
			} <var>while</var> (turn[c] == 2);
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][0]){
			turn[c] = (rand() % 2) + 1;
		}
		<var>break</var>;
	<var>case</var> 6: <cite>// swordsman ai</cite>
		<var>if</var> (health[c] &lt;= 100 &amp;&amp; energy[c] &gt;= cost[c][2]){
			turn[c] = 5;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1] &amp;&amp; health[c] &lt;= 100){
			turn[c] = 4;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
			turn[c] = (rand() % 4) + 1;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0]){
			<var>do</var> {
				turn[c] = (rand() % 3) + 1;
			} <var>while</var> (turn[c] == 2);
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][0]){
			turn[c] = (rand() % 2) + 1;
		}
		<var>break</var>;
	<var>case</var> 7: <cite>// earth ai</cite>
		<var>if</var> (health[e] &gt;= 150 &amp;&amp; energy[c] &gt;= cost[c][1]){
			turn[c] = 4;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][2]){
			turn[c] = 5;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
			turn[c] = (rand() % 4) + 1;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0]){
			turn[c] = (rand() % 3) + 1;
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][0]){
			turn[c] = (rand() % 2) + 1;
		}
		<var>break</var>;
	<var>case</var> 8: <cite>// blood ai</cite>
		<var>if</var> (status[e] != <kbd>"Bleeding"</kbd> &amp;&amp; status[e] != <kbd>"Healthy"</kbd>){
			turn[c] = 3;
		}
		<var>else</var> <var>if</var> (status[c] == <kbd>"Rampaging"</kbd>){
			turn[c] = 1;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][2]){
			turn[c] = 5;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
			turn[c] = (rand() % 4) + 1;
			<var>if</var> (turn[c] == 2){
				turn[c] = 1;
			}
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0]){
			turn[c] = (rand() % 3) + 1;
			<var>if</var> (turn[c] == 2){
				turn[c] = 1;
			}
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][0]){
			turn[c] = 1;
		}
		<var>break</var>;
	<var>case</var> 9: <cite>// dark ai</cite>
		<var>if</var> (energy[c] &gt;= cost[c][2]){
			turn[c] = 5;
		}
		<var>else</var> <var>if</var> (health[e] &lt;= power[c]){
			<var>if</var> (energy[c] &gt;= cost[c][2]){
				turn[c] = 5;
			}
			<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
				turn[c] = 4;
			}
			<var>else</var> <var>if</var> (energy[c] &lt;= cost[c][1]){
				turn[c] = 1;
			}
		}
		<var>else</var> <var>if</var> (energy[e] == cost[e][2]){
			turn[c] = 3;
		}
		<var>else</var> <var>if</var> (status[c] != <kbd>"Healthy"</kbd> &amp;&amp; status[c] != <kbd>"Faded"</kbd>){
			turn[c] = 3;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
			turn[c] = (rand() % 4) + 1;
			<var>if</var> (turn[c] == 2){
				turn[c] = 1;
			}
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0]){
			turn[c] = (rand() % 3) + 1;
			<var>if</var> (turn[c] == 2){
				turn[c] = 1;
			}
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][0]){
			turn[c] = 1;
		}
		<var>break</var>;
	<var>case</var> 10: <cite>// venom ai</cite>
		<var>if</var> (status[c] == <kbd>"Boosted"</kbd>){
			turn[c] = 1;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1] &amp;&amp; energy[e] == cost[e][2]){
			turn[c] = 4;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][2]){
			turn[c] = 5;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0] &amp;&amp; venom[e] &gt;= 3){
			turn[c] = 3;
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][1]){
			turn[c] = (rand() % 4) + 1;
			<var>if</var> (turn[c] == 2 || turn[c] == 3){
				turn[c] = 1;
			}
		}
		<var>else</var> <var>if</var> (energy[c] &gt;= cost[c][0]){
			turn[c] = 1;
		}
		<var>else</var> <var>if</var> (energy[c] &lt; cost[c][0]){
			turn[c] = 1;
		}
		<var>break</var>;
	<var>default</var>:
		cout &lt;&lt; <kbd>"There is no ai code for "</kbd> &lt;&lt; Element[c] &lt;&lt; <kbd>" Element"</kbd> &lt;&lt; endl;
		<var>break</var>;
	}
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<p>Attachments:
	[<a href="element.cpp">Element.cpp</a>]
</p>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','3bqpX9L8');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~89.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='4w6fSL3A')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia3bqpx9l8.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia3bqpx9l8'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
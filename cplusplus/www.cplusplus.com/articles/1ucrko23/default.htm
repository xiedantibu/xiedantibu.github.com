<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/1ucrko23/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Rounding Algorithms - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Rounding Algorithms</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/duoas/default.htm" rel="author">Duoas</a></b></div>
<div id="I_date">Aug 18, 2008</div>
<h1>Rounding Algorithms</h1>
<div id="I_score">Score: 4.5/5 (23 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"></div>
<div id="I_content">
There are a zillion different ways to round floating point values to integers. C and C++ provide a couple basic ones in &lt;math.h&gt; or &lt;cmath&gt;.<br>
<br>
There are two general categories of rounding algorithm: those that are symmetric about zero and those that are biased in some way.<br>
<br>
<b>Biased Rounding</b>
A bias is a mathematical notion used in statistics to indicate that samples are not exactly representative of their true values; they are skewed in one way or another.<br>
<br>
For example, the &lt;cmath&gt; floor() function is biased towards negative infinity, because it always chooses the lower integer number --that is, it always chooses the number closer to negative infinity.<br>
<tt>
  floor(  7.5 )  --&gt;   7<br>
  floor( -7.5 )  --&gt;  -8<br>
</tt>
<br>
Suppose your local big city and wanted to know how fast people are driving on a particular freeway. The first step is to gather the exact speeds that individual drivers are going, and the second would be to convert all the individual values into a single value that would represent the normal rate of speed. For simplicity here, we will just use the average value.<br>
<br>
Let us say that the equipment which samples a motorist's speed is far more accurate than the computer's ability to store it. (This is actually not uncommon.) Again, for simplicity, we will say that the computer stores the speed as integers.<br>
<br>
With a sampling of twelve motorists, we get the following speeds (in miles per hour)<br>
<tt>
  49.087   57.901   28.500   46.738   51.270   53.096<br>
  44.795   47.218   46.347   45.989   47.582   50.563<br>
</tt>
A quick calculation shows that the average speed is 47.424 mph.<br>
<br>
If the city were to simply use the floor() function to convert these to integers, it would get<br>
<tt>
  49       57       28       46       51       53<br>
  44       47       46       45       47       50<br>
</tt>
which averages to 46.916 --&gt; 46 mph (remember, integer arithmetic!)<br>
<br>
Either way, the sampling is off by about a whole mile per hour. I don't think that the city would actually care about a single mile per hour, but this does illustrate the <i>bias</i>, or tendancy of the floor() function, to make the numbers closer to negative infinity, thuse skewing the data to an inaccurate number.<br>
<br>
This was just a simple example that came off the top of my head, but in many sciences and statistical surveys, that difference can mean quite a lot. Suppose that the Apollo missed the moon by 1%? Suppose a pharmaceutical company put too much iron in a daily vitamin pill by 1%? Suppose a construction firm miscalculated the stresses a bridge can take by 1%? In all these scenarios the results would prove deadly. One percent is a <i>lot</i>.<br>
<br>
<br>
<b>Symmetric Rounding</b>
A special case of bias is centered about zero. Let us fix the floor() function to tend towards zero.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><var>double</var> floor0( <var>double</var> value )
  {
  <var>if</var> (value &lt; 0.0)
    <var>return</var> ceil( value );
  <var>else</var>
    <var>return</var> floor( value );
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Now, the absolute value of the result will always be the same:<br>
<tt>
  floor0( -7.7 )  --&gt;   -7     floor0( 7.7 )  --&gt;  7<br>
  floor0( -7.5 )  --&gt;   -7     floor0( 7.5 )  --&gt;  7<br>
  floor0( -7.3 )  --&gt;   -7     floor0( 7.3 )  --&gt;  7<br>
</tt>
Enough about that.<br>
<br>
<br>
<b>Unbiased Rounding</b>
So, how do we handle these biases? By adding some rule that accounts for it.<br>
<br>
Let us apply knowledge we all learned in gradeschool: In arithmetic rounding we round up if the next digit is 5 or more, and if it less than 5 we round down. We write ourselves a little function to do just that:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>double</var> round( <var>double</var> value )
  {
  <var>return</var> floor( value + 0.5 );
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The problem is that this is <i>still biased</i>. We have actually reversed the bias of floor() from negative infinity to positive infinity, because we always choose to round up when exactly halfway between two values:<br>
<tt>
  round( 10.3 )  --&gt;  10<br>
  round( 10.5 )  --&gt;  11<br>
  round( 10.7 )  --&gt;  11<br>
</tt>
You can actually see the bias in the above table: the result tends towards 11 and away from 10.<br>
<br>
This brings us to the trick: which way do we round when exactly halfway between two values?<br>
<br>
One very popular method is variously called "bankers rounding", "round to even", "convergent rounding", and even "unbiased rounding", to name a few. It works by skewing the bias itself.<br>
<br>
Given a number exactly halfway between two values, round to the <i>even</i> value (zero is considered even here).<br>
<tt>
  round( 1.7 )  --&gt;  2     round( 2.7 )  --&gt;  3<br>
  round( 1.5 )  --&gt;  2     round( 2.5 )  --&gt;  2<br>
  round( 1.3 )  --&gt;  1     round( 2.3 )  --&gt;  2<br>
</tt>
For random data this is very convenient. Bankers like it because money deposited and withdrawn is random. (There <i>are</i> trends, mind you, but you cannot predict <i>exactly</i> how much will be deposited and withdrawn.) The important point is that the bankers rounding <i>is still biased if the data is biased</i>. It is only unbiased with random data.<br>
<br>
One solution is called "alternate rounding". It works by simply choosing to bias up or down every other time.<br>
<tt>
  round( 1.5 )  --&gt;  2<br>
  round( 1.5 )  --&gt;  1<br>
  round( 1.5 )  --&gt;  2<br>
  round( 1.5 )  --&gt;  1<br>
  etc<br>
</tt>
This is not always useful though.<br>
<br>
The only way to eliminate all bias is to use a <i>random</i> bias... This, of course, is impossible to generate in your typical PC, but it still goes toward solving the problem quite nicely.<br>
<br>
If the sample is exactly halfway between two integers, it chooses one or the other <i>randomly</i>.<br>
<br>
Of course, the Achilles heel of this method is the random number generator you use. The default pseudorandom generator for C and C++ is not that great. The Mersenne Twister is by far the most popular high-quality pseudorandom number generator, but it is non-trivial to implement so I will not include it below.<br>
<br>
Anyway, what follows is a convenient, simple library you are free to use. I'll even permit you to cannabalize it at will (since the algorithms are so obvious...)<br>
<br>
I may update it sometime in the future if I can figure out a way around the default epsilon issue. Feel free to make suggestions for improvements.<br>
<br>
:-)<br>
<b>rounding-algorithms.hpp</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br></code></pre></td>
<td class="source"><pre><code><cite>// rounding-algorithms.hpp</cite>
<cite>//</cite>
<cite>// General Rounding Algorithms</cite>
<cite>// Copyright (c) 2008 Michael Thomas Greer</cite>
<cite>// Boost Software License - Version 1.0 - August 17th, 2003</cite>
<cite>//</cite>
<cite>// Permission is hereby granted, free of charge, to any person or organization</cite>
<cite>// obtaining a copy of the software and accompanying documentation covered by</cite>
<cite>// this license (the "Software") to use, reproduce, display, distribute,</cite>
<cite>// execute, and transmit the Software, and to prepare derivative works of the</cite>
<cite>// Software, and to permit third-parties to whom the Software is furnished to</cite>
<cite>// do so, all subject to the following:</cite>
<cite>//</cite>
<cite>// The copyright notices in the Software and this entire statement, including</cite>
<cite>// the above license grant, this restriction and the following disclaimer,</cite>
<cite>// must be included in all copies of the Software, in whole or in part, and</cite>
<cite>// all derivative works of the Software, unless such copies or derivative</cite>
<cite>// works are solely in the form of machine-executable object code generated by</cite>
<cite>// a source language processor.</cite>
<cite>//</cite>
<cite>// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</cite>
<cite>// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</cite>
<cite>// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT</cite>
<cite>// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE</cite>
<cite>// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,</cite>
<cite>// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER</cite>
<cite>// DEALINGS IN THE SOFTWARE.</cite>
<cite>//</cite>
<cite>//----------------------------------------------------------------------------</cite>
<cite>// Reference</cite>
<cite>// &lt;&lt;a href="http://www.pldesignline.com/howto/showArticle.jhtml;?articleID=175801189&gt;"&gt;http://www.pldesignline.com/howto/showArticle.jhtml;?articleID=175801189&gt;&lt;/a&gt;</cite>
<cite>//</cite>
<cite>//----------------------------------------------------------------------------</cite>
<cite>// In this library, symmetric functions are indicated by a zero at the end</cite>
<cite>// of the function name.</cite>
<cite>//</cite>
<cite>// If you want a different default epsilon make sure to change</cite>
<cite>//</cite>
<cite>//   #define ROUNDING_EPSILON 0.001</cite>
<cite>//</cite>
<cite>// to whatever you want it to be. (I wanted to make it so that you could </cite>
<cite>// define a different default epsilon each time you #included the file, but</cite>
<cite>// I haven't figured out how to get around the template restrictions yet.)</cite>
<cite>//</cite>

<dfn>#ifndef ROUNDING_ALGORITHMS_HPP</dfn>
<dfn>#define ROUNDING_ALGORITHMS_HPP</dfn>

<dfn>#ifndef ROUNDING_EPSILON</dfn>
<dfn>#define ROUNDING_EPSILON 0.0000001</dfn>
<dfn>#endif</dfn>

<dfn>#include &lt;cmath&gt;</dfn>
<dfn>#include &lt;cstdlib&gt;</dfn>
<dfn>#include &lt;ciso646&gt;</dfn>

<var>namespace</var> rounding
  {

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// round down</cite>
  <cite>// Bias: -Infinity</cite>
  <var>using</var> std::floor;

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// round up</cite>
  <cite>// Bias: +Infinity</cite>
  <var>using</var> std::ceil;

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// symmetric round down</cite>
  <cite>// Bias: towards zero</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType floor0( <var>const</var> FloatType&amp; value )
    {
    FloatType result = std::floor( std::fabs( value ) );
    <var>return</var> (value &lt; 0.0) ? -result : result;
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// A common alias for floor0()</cite>
  <cite>// (notwithstanding hardware quirks)</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  <var>inline</var>
  FloatType trunc( <var>const</var> FloatType&amp; value )
    {
    <var>return</var> floor0( value );
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// symmetric round up</cite>
  <cite>// Bias: away from zero</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType ceil0( <var>const</var> FloatType&amp; value )
    {
    FloatType result = std::ceil( std::fabs( value ) );
    <var>return</var> (value &lt; 0.0) ? -result : result;
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// Common rounding: round half up</cite>
  <cite>// Bias: +Infinity</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType roundhalfup( <var>const</var> FloatType&amp; value )
    {
    <var>return</var> std::floor( value +0.5 );
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// Round half down</cite>
  <cite>// Bias: -Infinity</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType roundhalfdown( <var>const</var> FloatType&amp; value )
    {
    <var>return</var> std::ceil( value -0.5 );
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// symmetric round half down</cite>
  <cite>// Bias: towards zero</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType roundhalfdown0( <var>const</var> FloatType&amp; value )
    {
    FloatType result = roundhalfdown( std::fabs( value ) );
    <var>return</var> (value &lt; 0.0) ? -result : result;
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// symmetric round half up</cite>
  <cite>// Bias: away from zero</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType roundhalfup0( <var>const</var> FloatType&amp; value )
    {
    FloatType result = roundhalfup( std::fabs( value ) );
    <var>return</var> (value &lt; 0.0) ? -result : result;
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// round half even (banker's rounding)</cite>
  <cite>// Bias: none</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType roundhalfeven(
    <var>const</var> FloatType&amp; value,
    <var>const</var> FloatType&amp; epsilon = ROUNDING_EPSILON
    ) {
    <var>if</var> (value &lt; 0.0) <var>return</var> -roundhalfeven &lt;FloatType&gt; ( -value, epsilon );

    FloatType ipart;
    std::modf( value, &amp;ipart );

    <cite>// If 'value' is exctly halfway between two integers</cite>
    <var>if</var> ((value -(ipart +0.5)) &lt; epsilon)
      {
      <cite>// If 'ipart' is even then return 'ipart'</cite>
      <var>if</var> (std::fmod( ipart, 2.0 ) &lt; epsilon)
        <var>return</var> ipart;

      <cite>// Else return the nearest even integer</cite>
      <var>return</var> ceil0( ipart +0.5 );
      }

    <cite>// Otherwise use the usual round to closest</cite>
    <cite>// (Either symmetric half-up or half-down will do0</cite>
    <var>return</var> roundhalfup0( value );
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// round alternate</cite>
  <cite>// Bias: none for sequential calls</cite>
  <var>bool</var> _is_up = <var>false</var>;
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType roundalternate( <var>const</var> FloatType&amp; value, <var>int</var>&amp; is_up = _is_up )
    {
    <var>if</var> ((is_up != is_up))
      <var>return</var> roundhalfup( value );
    <var>return</var> roundhalfdown( value );
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// symmetric round alternate</cite>
  <cite>// Bias: none for sequential calls</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType roundalternate0( <var>const</var> FloatType&amp; value, <var>int</var>&amp; is_up = _is_up )
    {
    <var>if</var> ((is_up != is_up))
      <var>return</var> roundhalfup0( value );
    <var>return</var> roundhalfdown0( value );
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// round random</cite>
  <cite>// Bias: generator's bias</cite>
  <var>template</var> &lt;<var>typename</var> FloatType, <var>typename</var> RandValue, <var>typename</var> RandomGenerator&gt;
  FloatType roundrandom(
    <var>const</var> FloatType&amp; value,
    <var>const</var> RandValue&amp; mid,
    RandomGenerator&amp; g
    ) {
    <var>if</var> (g() &lt; mid)
      <var>return</var> roundhalfup0( value );
    <var>return</var> roundhalfdown0( value );
    }

  <cite>//--------------------------------------------------------------------------</cite>
  <cite>// default round random</cite>
  <cite>// Bias: rand()</cite>
  <var>template</var> &lt;<var>typename</var> FloatType&gt;
  FloatType roundrandom( <var>const</var> FloatType&amp; value )
    {
    <var>return</var> roundrandom &lt;FloatType, <var>int</var>, <var>int</var>(*)()&gt; ( value, RAND_MAX /2, &amp;rand );
    }
  }

<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
If you find a bug let me know!<br>
The round half down did exactly what it should have. Given a number exactly halfway between two integers (12.5) it rounds <i>down</i> to 12.<br>
<br>
As an unrelated point of interest, if you are passing typed arguments to a template function you don't actually have to give template arguments:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>double</var> num = 12.5;
cout &lt;&lt; roundhalfdown( num ) &lt;&lt; endl;

num = 12.500001;
cout &lt;&lt; roundhalfdown( num ) &lt;&lt; endl;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
One thing to remember about floating point numbers is that they are not exact. In fact, a lot more can go wrong with them than people realize. So, depending on your hardware and your clib's temperament that second one may or may not be considered the same as the first. IEEE single precision should handle it fine though.<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','1UCRko23');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../ovr0/contact.doreferrerwww.cplusplus.com_252farticles_252~6.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='i8vCpfjN')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia1ucrko23.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia1ucrko23'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
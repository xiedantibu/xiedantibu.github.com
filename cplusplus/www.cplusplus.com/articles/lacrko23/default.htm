<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/lacrko23/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Linked Lists - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Linked Lists</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/aselcukakyuz/default.htm" rel="author">aselcukakyuz</a></b></div>
<div id="I_date">Dec 7, 2013 (last update: Dec 8, 2013)</div>
<h1>Linked Lists</h1>
<div id="I_score">Score: 3.6/5 (312 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
A set of items of the same type in which each item points to ("is linked to") the next item in the list. Ordering of items is not part of the definition, therefore, we will not consider the ordering. Yet determined according to the usage.<br>
<br>
<br>
<B>NOTE: </B> Since sequence of elements is not part of definition of a linked list, many other structures can be implemented using Linked Lists.<br>
    E.g. if items are ordered according to the sequence of insertion into the list, this corresponds to a stack, in which the top item is pointed by the list <STRONG> head pointer. </STRONG>
<br>
<H3>Head pointer</H3>
<UL>
<LI>List head is a special pointer to the first item in the list. </LI>
<LI>The last node(rear) points to a <EM>NULL</EM> address</LI>
<LI>In processing a list, any node can only be accessed after having accessed all other nodes before it. This property might also be called, in other words, Strict Sequential Access (SSA).</LI>
<UL>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br></code></pre></td>
<td class="source"><pre><code><cite>// implementation of LinkedList</cite>
<cite>// the Node class will be given later</cite>
<cite>// Author: Ali Selcuk AKYUZ</cite>
<cite>// Mail: selcuk@retinarobotics.com || e174043@metu.edu.tr</cite>
<cite>// Electrical and Electronics Engineering Department</cite>
<cite>// Middle East Technical University - ANKARA</cite>
<cite>// If any questions please send me an email</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include "Node.cpp"</dfn>
<var>using</var> <var>namespace</var> std;
<var>int</var> main ()
{
  Node&lt;<var>char</var>&gt; *p,*q,*r;
  <cite>// Link the nodes with each other</cite>
  q = <var>new</var> Node&lt;<var>char</var>&gt;(<kbd>'B'</kbd>); <cite>// here nxtptr is passed by a nullptr by default</cite>
  p = <var>new</var> Node&lt;<var>char</var>&gt;(<kbd>'A'</kbd>,q);
  r = <var>new</var> Node&lt;<var>char</var>&gt;(<kbd>'C'</kbd>);

  <cite>// modify the list</cite>
  q-&gt;InsertAfter(r);
  <cite>/*
  Call the InsertAfter method that belongs to the object pointed by q, as
  paramater, pass to it the address contained in r.
  */</cite>

  cout &lt;&lt; <kbd>"p:"</kbd> &lt;&lt; p-&gt;data &lt;&lt; endl;                 <cite>// "A" will be printed out</cite>
  cout &lt;&lt; <kbd>"p_next:"</kbd> &lt;&lt; p-&gt;NextNode()-&gt;data &lt;&lt; endl;  <cite>// "B" will be printed out</cite>
  cout &lt;&lt; <kbd>"q:"</kbd> &lt;&lt; q-&gt;data &lt;&lt; endl;                 <cite>// "B" will be printed out</cite>
  cout &lt;&lt; <kbd>"q_next:"</kbd> &lt;&lt; q-&gt;NextNode()-&gt;data &lt;&lt; endl;  <cite>// "C" will be printed out</cite>
  cout &lt;&lt; <kbd>"r:"</kbd> &lt;&lt; r-&gt;data &lt;&lt; endl;                 <cite>// "C" will be printed out</cite>

  p = p-&gt;NextNode(); <cite>// p now points to the node coming after the node it was</cite>
                     <cite>// previously pointing to.</cite>
  cout &lt;&lt; endl;
  cout &lt;&lt; <kbd>"p:"</kbd> &lt;&lt; p-&gt;data &lt;&lt; endl;                 <cite>// "B" will be printed out</cite>

  r = q-&gt;DeleteAfter();        <cite>// copy to r the address of the node pointed by</cite>
  <cite>//the node pointed by the node pointed by q, and remove that node from the list</cite>

  Node&lt;<var>char</var>&gt; *head;
  head = GetNode(<kbd>'A'</kbd>,GetNode(<kbd>'B'</kbd>,GetNode(<kbd>'C'</kbd>)));
  <cite>/*
  Here above method, creates a list which has nodes having data A,B,C and each
  node pointing to the next one respectively.
  */</cite>
  <var>delete</var> q;
  <var>delete</var> p;
  <var>delete</var> r;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
When we compile and run this program, the screen will show:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
p:A
P_next:B
q:B
q_next:C
r:C

p:B

</samp></pre></td></tr></table></div>
<br>
Now let us implement the Node class so that we can have a better understanding of this structure.<br>
<br>
Let me start with the header<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br></code></pre></td>
<td class="source"><pre><code><cite>// Node.h</cite>
<cite>// Author: Ali Selcuk AKYUZ</cite>
<cite>// Mail: selcuk@retinarobotics.com || e174043@metu.edu.tr</cite>
<cite>// Electrical and Electronics Engineering Department</cite>
<cite>// Middle East Technical University - ANKARA </cite>
<cite>// If any questions please send me an email</cite>

<dfn>#ifndef NODE_H</dfn>
<dfn>#define NODE_H</dfn>
<dfn>#include &lt;iostream&gt;</dfn>

<var>using</var> <var>namespace</var> std;

<var>template</var>&lt;<var>class</var> T&gt;
<var>class</var> Node
{
    <var>public</var>:
        Node();
        Node(<var>const</var> T&amp; item, Node&lt;T&gt;* ptrnext = NULL);
        T data;
        <cite>// access to the next node</cite>
        Node&lt;T&gt;* NextNode();
        <cite>// list modification methods</cite>
        <var>void</var> InsertAfter(Node&lt;T&gt;* p);
        Node&lt;T&gt;* DeleteAfter();
        Node&lt;T&gt; * GetNode(<var>const</var> T&amp; item, Node&lt;T&gt;* nextptr = NULL);
    <var>private</var>:

        Node&lt;T&gt; * next;
};

<dfn>#endif </dfn><cite>// NODE_H </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Here we have a default constructer, and three methods that will be explained later in the cpp part of the class implementation.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br></code></pre></td>
<td class="source"><pre><code><cite>// implementation of Node class</cite>
<cite>// Author: Ali Selcuk AKYUZ</cite>
<cite>// Mail: selcuk@retinarobotics.com || e174043@metu.edu.tr</cite>
<cite>// Electrical and Electronics Engineering Department</cite>
<cite>// Middle East Technical University - ANKARA </cite>
<cite>// If any questions please send me an email</cite>

<dfn>#include "Node.h"</dfn>

<var>template</var>&lt;<var>class</var> T&gt;
Node&lt;T&gt;::Node()
{
    <cite>// default constructor</cite>
    <cite>// this is to allow us to create an object without any initialization</cite>

}


<cite>//  This constructor is just to set next pointer of a node and the data contained.</cite>
<var>template</var>&lt;<var>class</var> T&gt;
Node&lt;T&gt;::Node(<var>const</var> T&amp; item,Node&lt;T&gt;* ptrnext)
{
    <var>this</var>-&gt;data = item;
    <var>this</var>-&gt;next = ptrnext;
}

<var>template</var>&lt;<var>class</var> T&gt;
Node&lt;T&gt;*Node&lt;T&gt;::NextNode()
{
    <var>return</var> <var>this</var>-&gt;next;
}

<cite>//  This methods inserts a node just after the node that the method belongs to </cite>
<cite>//  TO-DO: Consider a better implementation</cite>
<var>template</var>&lt;<var>class</var> T&gt;
<var>void</var> Node&lt;T&gt;::InsertAfter(Node&lt;T&gt; *p)
{
    <cite>// not to lose the rest of the list, we ought to link the rest of the</cite>
    <cite>// list to the Node&lt;T&gt;* p first</cite>
    p-&gt;next = <var>this</var>-&gt;next;

    <cite>// now we should link the previous Node to Node&lt;T&gt; *p , i.e the Node that we are </cite>
    <cite>//inserting after,</cite>
    <var>this</var>-&gt;next = p;
}

<cite>// Deletes the node from the list and returns the deleted node</cite>
<var>template</var>&lt;<var>class</var> T&gt;
Node&lt;T&gt;* Node&lt;T&gt;::DeleteAfter()
{
    <cite>// store the next Node in a temporary Node</cite>
    Node&lt;T&gt;* tempNode = next;
    <cite>// check if there is a next node</cite>
    <var>if</var>(next != NULL)
        next = next-&gt;next;

    <var>return</var> tempNode;
}
<var>template</var>&lt;<var>class</var> T&gt;
Node&lt;T&gt; * GetNode(<var>const</var> T&amp; item, Node&lt;T&gt;* nextptr = NULL)
{
    Node&lt;T&gt;* newnode; <cite>// Local ptr for new node</cite>
    newnode = <var>new</var> Node&lt;T&gt;(item,nextptr);
    <var>if</var> ( newnode == NULL)
    {
        cerr &lt;&lt; <kbd>"Memory allocation failed."</kbd> &lt;&lt; endl;
        exit(1);
    }
    <var>return</var> newnode;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
After implementing the node class, now we can implement stacks, queues and the like. Let me implement these structures by using Linked List logic.<br>
<br>
<H3> Stack, Queue Properties </H3>
<DL>
<DT>
<H3>Stack</H3>
</DT>
<DD>
If the items are ordered according to the sequence of insertion into the list, this corresponds to a stack.In other words, First In Last Out (FILO) or Last In First Out (LIFO)<br>
</DD>
<DT>
<H3>Queue</H3>
</DT>
<DD>
A queue is a data structure consisting of a list of items and two pointers to the "front" and "rear" items in the list. Items can only inserted at the rear and removed only at the front. i.e. FIFO (First In First Out) operation.<br>
</DD>
</DL>
<br>
I will implement these classes in another article. <br>
<br>
ENJOY!!!!</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','LACRko23');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~63.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='Dy6qM4Gy')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgialacrko23.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgialacrko23'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
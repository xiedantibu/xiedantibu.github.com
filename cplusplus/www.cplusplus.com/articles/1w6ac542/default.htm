<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/1w6ac542/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>How to Make a Game - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">How to Make a Game</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/modshop/default.htm" rel="author">ModShop</a></b></div>
<div id="I_date">May 16, 2011 (last update: Jul 19, 2011)</div>
<h1>How to Make a Game</h1>
<div id="I_score">Score: 4.2/5 (854 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
It has been recently brought to my attention that many people ask about game development, yet there aren't any articles on the topic. I've decided to shed some light on the general process of developing a game from start to finish. Keep in mind that that this is a generalization and WILL change from project to project.<br>
<br>
<hr>
<br>
<u><b>Step 1: Choose Your Game Library</b></u>
<br>
Unless you want to write your own library for all the dirty graphics/sound programming, you will probably want to get a game library. There are many game libraries out there. but they all offer the same base functionality (mostly...).<br>
<br>
<u><i>Features that any good library should have:</i></u>
<ul>
    <li>Some system to load and play sound files<br>
    <li>Some system to load and display graphics<br>
    <li>At least some basic image manipulation (rotation, etc)<br>
    <li>Primitive drawing functions (circles, lines, rectangles, dots, etc)<br>
    <li>Functions to display text<br>
    <li>Multi-threading support<br>
    <li>Basic timer functions<br>
</ul>
<br>
<i><u>Some game libraries include:</u></i>
<ul>
    <li>Simple Fast Multi-Media Library (SFML): <a href="../../../www.sfml-dev.org/default.htm">http://www.sfml-dev.org/</a></li>
    <li>Simple DirectMedia Layer (SDL): <a href="../../../www.libsdl.org/default.htm">http://www.libsdl.org/</a></li>
    <li>Allegro: <a href="../../../www.allegro.cc/default.htm">http://www.allegro.cc/</a></li>
    <li>OpenGL (GFX only, however, there are wrapper libs like AllegroGL): <a href="../../../www.opengl.org/default.htm">http://www.opengl.org/</a></li>
    <li>DirectX (Windows only): <a href="../../../msdn.microsoft.com/en-us/directx/default.htm">http://msdn.microsoft.com/en-us/directx/</a></li>
    <li>Irrlicht (3d lib): <a href="../../../irrlicht.sourceforge.net/default.htm">http://irrlicht.sourceforge.net/</a></li>
</ul>
<br>
<br>
<hr>
<br>
<br>
<u><b>Step 2: Define the Concept</b></u>
<br>
All games start here, merely ideas in someone's head.<br>
First, come up with an idea for a game. Once you have a simple idea, expand on it. For example, if it is a board game, what is the objective/How do you win? What will the rules be like? etc. If your game will have characters or a story, create them. Make sure you have a pretty well defined concept of what your game will be when its finished. The more complex the game, the better you should plan it out in the beginning so you don't have to worry about the game itself while your coding. Keep in mind that your game WILL evolve as you create it.<br>
<br>
<br>
<hr>
<br>
<br>
<u><b>Step 3: Plan Your Engine</b></u>
<br>
Here, you will plan out the various components your game engine will need and how everything will fit together. Depending on the complexity of your project, you may not need to do this step. This is also a good time to test various parts of your engine that you have never implemented in the past, just to make sure they work before you put them in the main project source. Also, you should begin to design the structure of your classes here as well(if you are using OOP, which you should be). <b>Keep in mind, however, that there are pre-made engines out there, available for use in all kinds of projects.</b>
<br>
<br>
<hr>
<br>
<br>
<u><b>Step 4: Code Your Engine</b></u> (if your making your own)<br>
<br>
Now its time to actually start coding your engine. This doesn't necessarily mean the game itself, but rather, core rendering, physics, file handling and the like, functions and classes that will be used to construct your game. However, depending on the complexity of the game, the engine and game code may be the same. Also, a more complex game will probably require a resource manager. A resource manager does what it sounds like, it manages your resources (graphics, music, sounds, etc). It also keeps your code clean and helps to avoid memory leaks. See an excellent resource manager below by <b>Xander314</b>.  Try to give your entire engine some kind of compact, easy interface for use as well. That way, when you program your game, you don't have search through source to find functions names and the like. An easy way of doing this would be OOP.<br>
Like so:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>//put related components into classes</cite>
<var>class</var> collisions {
    <var>bool</var> check_col(obj1*, obj2*); <cite>//you should have a base object class that all</cite>
    <var>void</var> handle_col(obj1*, obj2*); <cite>//game objects are derived from, for easy passing to functions</cite>

    <var>public</var>:
        <var>void</var> handle_all(); <cite>//handles EVERYTHING collision related</cite>
    }Collision;

<var>class</var> rendering {
    <var>void</var> bots();
    <var>void</var> bullets();
    <var>void</var> players();

    <var>public</var>:
        <var>void</var> draw_all(); <cite>//calls other functions for rendering</cite>
    }Renderer;

<cite>//this allows collision management and rendering in your game loop to be as simple as:</cite>
Renderer.draw_all();
Collision.handle_all();</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Resource Manager by <b>Xander314</b>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br></code></pre></td>
<td class="source"><pre><code><cite>/*
 ResourceManagerB.hpp - Generic template resource manager				
									
 (C) Alexander Thorne (SFML Coder) 2011	
 &lt;a href="http://sfmlcoder.wordpress.com/"&gt;http://sfmlcoder.wordpress.com/&lt;/a&gt;	
		
 Manages loading and unloading of a resource type specified by a
 template argument.

****************************************************************/</cite>

<dfn>#include &lt;map&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;exception&gt;</dfn>

<var>typedef</var> <var>const</var> std::string URI;

<cite>// exceptions</cite>
<var>namespace</var> Exceptions {

	<cite>// thrown if user requests a resource URI not present in the manager's list</cite>
	<var>class</var> URINotFound : <var>public</var> std::runtime_error 
	{ 
	<var>public</var>: 
		URINotFound(<var>const</var> std::string&amp; Message = <kbd>"The specified URI was not found in the resource index."</kbd>)
			: runtime_error(Message) { } 
	};

	<cite>// thrown if a resource allocation fails</cite>
	<var>class</var> BadResourceAllocation : <var>public</var> std::runtime_error {
	<var>public</var>: 
		BadResourceAllocation(<var>const</var> std::string&amp; Message = <kbd>"Failed to allocate memory for resource."</kbd>)
			: runtime_error(Message) {}
	};
}

<var>template</var> &lt;<var>class</var> Resource&gt; <var>class</var> ResourceManagerB {
	<var>typedef</var> std::pair&lt;URI, Resource*&gt; ResourcePair;
	<var>typedef</var> std::map&lt;URI, Resource*&gt; ResourceList;

	<cite>// the list of the manager's resources</cite>
	ResourceList Resources;
<var>public</var>:
	~ResourceManagerB() { UnloadAll(); }

	<cite>// Load a resource with the specified URI</cite>
	<cite>// the URI could represent, e.g, a filename</cite>
	URI&amp; Load(URI&amp; Uri);
	<cite>// unload a resource with the specified URI</cite>
	<var>void</var> Unload(URI&amp; Uri);
	<cite>// unload all resources</cite>
	<var>void</var> UnloadAll();

	<cite>// get a pointer to a resource</cite>
	Resource* GetPtr(URI&amp; Uri);
	<cite>// get a reference to a resource</cite>
	Resource&amp; Get(URI&amp; Uri);
};

<var>template</var> &lt;<var>class</var> Resource&gt;
URI&amp; ResourceManagerB&lt;Resource&gt;::Load(URI&amp; Uri)
{
	<cite>// check if resource URI is already in list</cite>
	<cite>// and if it is, we do no more</cite>
	<var>if</var> (Resources.find(Uri) == Resources.end())
	{
		<cite>// try to allocate the resource</cite>
		<cite>// NB: if the Resource template argument does not have a</cite>
		<cite>// constructor accepting a const std::std::string, then this</cite>
		<cite>// line will cause a compiler error</cite>
		Resource* temp = <var>new</var> (std::nothrow) Resource(Uri);
		<cite>// check if the resource failed to be allocated</cite>
		<cite>// std::nothrow means that if allocation failed</cite>
		<cite>// temp will be 0</cite>
		<var>if</var> (!temp)
			<var>throw</var> Exceptions::BadResourceAllocation();
		<cite>// add the resource and it's URI to the manager's list</cite>
		Resources.insert(ResourcePair(Uri, temp));
	}
	<var>return</var> Uri;
}

<var>template</var> &lt;<var>class</var> Resource&gt;
<var>void</var> ResourceManagerB&lt;Resource&gt;::Unload(URI&amp; Uri)
{
	<cite>// try to find the specified URI in the list</cite>
	ResourceList::const_iterator itr = Resources.find(Uri);
	<cite>// if it is found...</cite>
	<var>if</var> (itr != Resources.end())
	{
		<cite>// ... deallocate it</cite>
		<var>delete</var> itr-&gt;second;
		<cite>// then remove it from the list</cite>
		Resources.erase(Uri);
	}
}

<var>template</var> &lt;<var>class</var> Resource&gt;
<var>void</var> ResourceManagerB&lt;Resource&gt;::UnloadAll()
{
	<cite>// iterate through every element of the resource list</cite>
	ResourceList::iterator itr;
	<var>for</var> (itr = Resources.begin(); itr != Resources.end(); itr++)
		<cite>// delete each resource</cite>
		<var>delete</var> itr-&gt;second;
	<cite>// finally, clear the list</cite>
	Resources.clear();
}

<var>template</var> &lt;<var>class</var> Resource&gt;
Resource* ResourceManagerB&lt;Resource&gt;::GetPtr(URI&amp; Uri)
{
	<cite>// find the specified URI in the list</cite>
	ResourceList::const_iterator itr;
	<cite>// if it is there...</cite>
	<var>if</var> ((itr = Resources.find(Uri)) != Resources.end())
		<cite>// ... return a pointer to the corresponding resource</cite>
		<var>return</var> itr-&gt;second;
	<cite>// ... else return 0</cite>
	<var>return</var> 0;
}

<var>template</var> &lt;<var>class</var> Resource&gt;
Resource&amp; ResourceManagerB&lt;Resource&gt;::Get(URI&amp; Uri)
{
	<cite>// get a pointer to the resource</cite>
	Resource* temp = GetPtr(Uri);
	<cite>// if the resource was found...</cite>
	<var>if</var> (temp)
		<cite>// ... dereference the pointer to return a reference</cite>
		<cite>// to the resource</cite>
		<var>return</var> *temp;
	<var>else</var>
		<cite>// ... else throw an exception to notify the caller that</cite>
		<cite>// the resource was not found</cite>
		<var>throw</var> Exceptions::URINotFound();
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<hr>
<br>
<br>
<u><b>Step 5: Graphics/Sounds</b></u>
<br>
Based on your game concept, start creating your graphics and sound effects/music. As you get further into development, you will probably need to create more GFX and SFX and possibly discard unneeded ones. This step may continue through the entire process of development.<br>
<br>
<br>
<hr>
<br>
<br>
<u><b>Step 6: Code Your Game</b></u>
<br>
Once you have your engine complete and working, you can start to code your actual game. This involves anything specific such as rules, story, etc. Your main game loop will be here as well. This is the loop that runs over and over and updates everything in your game. See example below. If you made your engine right, this should be easier than coding your engine, and more fun! This will probably be where you add your sounds as well. Once this stage is complete, you should have a working copy of your game. Make sure you get it just how you want it!<br>
<br>
<br>
<i>Game Loop:</i>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>//your loop will probaly be very different from this, especially for board games</cite>
<cite>//but this is the basic structure</cite>

<var>while</var> (!Game.lost()) <cite>//or whatever your condition is (esc key not pressed, etc)</cite>
{
    Game.handle_input(); <cite>//get user input</cite>

    AI.update_bots(); <cite>//let your bots move</cite>

    Collision.handle_col(); <cite>//check for collisions</cite>

    Game.check_win(); <cite>//see if the player won or lost</cite>

    Renderer.draw_all(); <cite>//draw everything</cite>

    Game.sleep(); <cite>//pause so your game doesn't run too fast</cite>
    <cite>//your game lib of choice will have a function for this</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<hr>
<br>
<br>
<u><b>Step 7: Optimize</b></u>
<br>
Just because your game works, doesn't mean its finished. Besides adding in last minute details, there will probably be optimizations that you can put in your code. This involves memory usage (try not to use global variables, check for memory leaks, etc) as well as speed (make sure your code isn't too slow or overly demanding on the CPU for whatever its doing). General debugging can also be grouped here too.<br>
<br>
<br>
<hr>
<br>
<br>
<u><b>Step 8: Package and Distribute</b></u>
<br>
Now that your game is finished, you need to package it and then distribute it as you wish. For packaging, try to keep it organized and put the final product into a single file (installer package, zip file, etc). This makes distribution MUCH easier.<br>
<br>
<br>
<hr>
<br>
<br>
<u><b>Tips:</b></u>
<br>
I've learned many things about making games, some things the hard way. Here are some things that you should do:<br>
<ul>
<li>First, stay organized! You should have a good organizational system for everything; your code, your graphics, your sound effects, etc. I would suggest putting code into different files based on what it does. i.e, collision detection/resolution code in one file, resource management in another, AI in its own file, etc. This way, if you need to track down a bug, it will be MUCH easier to find various functions, and possibly, the bug itself. Keeping the structure of your code organized can help as well (i.e. have classes for various purposes; rendering, AI, collision detection, etc. Rather than hundreds of void some_func()'s all over).</li>
<br>
<li>Also, try to keep your code clean and efficient. Reuse variables where you can, minimize use of global variables, check for memory leaks, don't load all of your graphics/sounds at once, etc.</li>
<br>
<li>Try not to hardcode too much data into your game. Instead, try to implement a system of loading data from files (maps, etc) This will really help keep your code manageable, and will allow you to update something without recompiling anything.</li>
</ul>
<br>
<small><i>Some starting tips from <b>chrisname</b>:</i></small>
<blockquote>You don't need to work that hard. What you need to do, is go through a programming tutorial (the one on this website for example). Don't do too much in a day, or you will get bored and unmotivated. Don't set a goal based on time, that doesn't work. You'll forget alot of what you learn if you stop halfway through a lesson. Work through the tutorial on this website ( <a href="../../../cplusplus.com/doc/tutorial/default.htm">http://cplusplus.com/doc/tutorial/</a> ). Aim to get through two lessons a day. Don't stop partway through a lesson (unless it's for a short break, that's a good idea) and don't do too much in one go, or you simply won't remember it. I recommend reading and copying out each example (not copy and paste; type it yourself, this will help you to understand what you are doing), compiling it, seeing what it does when you run it and modifying things to see what changes. I also recommend you look at other people's code (one of the things that has helped me is to take other people's broken code and try to fix it, although don't get too hung up on this because it is hard to read other people's code when you first start out). When you are reading, try to rephrase things: "If you can't explain it simply, you don't understand it well enough." (Albert Einstein).<br>
<br>
Once you've gone through this tutorial, and maybe some others (I read about three different tutorials because it was useful to have things said in a different way - I find having something explained in two different ways is useful for understanding and remembering it), you could read through the tutorials for SFML ( <a href="../../../sfml-dev.org/tutorials/1.6/default.htm">http://sfml-dev.org/tutorials/1.6/</a> ). Learning SFML will teach you to make 2D games. I'd also recommend learning SDL ( <a href="../../../lazyfoo.net/sdl_tutorials/index.php">http://lazyfoo.net/SDL_tutorials/index.php</a> ) because lots of games use it and you will most probably come across it eventually.<br>
<br>
After that, you should get into OpenGL programming if you want to make 3D games. SFML makes this very easy, and the SFML tutorial includes a tutorial for using OpenGL. For OpenGL, perhaps someone here can recommend you a book or tutorial.<br>
<br>
<br>
<br>
Throughout all this you should remember that it is important to pace yourself. Don't try to absorb too much at once or you'll forget lots of it. And don't stay up until 3am when you have an exam the day after next... </blockquote>
<br>
<br>
There are many other things that can be done to make development easier and your game more efficient, but, these are the biggies.<br>
<br>
<hr>
<br>
That's my 2 cents on game development and the general process. If you feel that I am wrong somewhere, or missed something, please let me know.</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','1w6AC542');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~85.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='S2vDSL3A')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia1w6ac542'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia1w6ac542'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
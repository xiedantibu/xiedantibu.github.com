<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/zb07m4gy/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Tired of shifting bits? - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Tired of shifting bits?</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/trolltalk/default.htm" rel="author">trolltalk</a></b></div>
<div id="I_date">Jan 14, 2008</div>
<h1>Tired of shifting bits?</h1>
<div id="I_score">Score: 4.2/5 (22 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
I've looked at one too many pieces of source code that uses bit shifting along with bitwise ANDs to extract a value from a larger data size <i>(for example, an IP address from a 32-bit integer)</i>.<br>
<br>
This is error-prone. I'm going to show you an easier way, using a C "union".<br>
<br>
A C union is just a simple way to refer to the same memory address using more than one symbolic label.<br>
<br>
Okay, its not "that" simple, so here's a slightly simpler explanation. You know when you assign an name to a variable, what you're really doing is giving a piece of memory a symbol, a <i>(symbolic)</i> name you can use to refer to it. So when we write, for example, int x, what we're really doing is giving a 4-byte <i>(on 32-bit machines)</i> location of ram a label, "x", that we can refer to in our code.<br>
<br>
A union takes this a step further, by allowing us to refer to the same memory location by 2 or more names, and access them as if they're 2 or more data types.<br>
<br>
What I'm going to do is create a structure that will allow me to stuff a 32-bit integer into a location, and then extract the individual byte values from the same location, or alternately, write 4 individual bytes, and get the 32-bit integer value, all without any shifts or logical ands.<br>
<br>
I do this in 2 steps:<br>
<ol>
<li>declare a structure of 4 bytes (4 unsigned chars, to be exact), that I can address as b0, b1, b2 and b3.[/li]<br>
<li>declare a union that allows this 4 byte structure to overlap the same memory address as an unsigned 4-byte integer;[/li]<br>
</ol>
Here's the code:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdlib.h&gt;</dfn>

<var>typedef</var> <var>struct</var> packed_int {
		 <var>unsigned</var> <var>char</var> b0;
		 <var>unsigned</var> <var>char</var> b1;
		 <var>unsigned</var> <var>char</var> b2;
		 <var>unsigned</var> <var>char</var> b3;
} packed_int;

<var>typedef</var> <var>union</var> {
	<var>unsigned</var> <var>int</var> i;
	packed_int b;
} packed;
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Okay, now I just need some code to "exercise" these structures, to show you that they actually do what I say, without any fancy bit-shifting in the source ... <i>(note that I'm not including code to account for "endian-ness" - this would be conditionally included by using a compile-time constant, but its left out here for the sake of clarity)</i>.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br></code></pre></td>
<td class="source"><pre><code>
<var>int</var> main(<var>int</var> argc, <var>char</var>* argv[], <var>char</var>* env[]) {
	packed v;    <cite>/* this is my "dual-purpose" 32-bit memory location */</cite>

	v.i =  3232235881UL; <cite>/* I assign it an internet address in 32-bit format */</cite>

	<cite>/* next, I'll print out the individual bytes */</cite>
	printf(<kbd>"the bytes are %d, %d, %d, %d\n"</kbd>, v.b.b0, v.b.b1, v.b.b2, v.b.b3);

	<cite>/* and just to prove that the 32-bit integer is still there ... print it out too */</cite>
	printf(<kbd>"the value is %u\n"</kbd>, v.i);

	<cite>/* just for the heck of it, increment the 32-bit integer */</cite>
	v.i++;
	printf(<kbd>"after v.i++, the bytes are %d, %d, %d, %d\n"</kbd>, v.b.b0, v.b.b1, v.b.b2, v.b.b3);

	<cite>/* now do the reverse, assign 70.80.90.100 as an ip address */</cite>
	v.b.b0 = 70;
	v.b.b1 = 80;
	v.b.b2 = 90;
	v.b.b3 = 100;

	<cite>/* .. and extract the 32-bit integer value */</cite>
	printf(<kbd>"the value is %u\n"</kbd>, v.i);

	<cite>/* show that 70.80.90.100 is really what we put in there */</cite>
	printf(<kbd>"the bytes are %d, %d, %d, %d\n"</kbd>, v.b.b0, v.b.b1, v.b.b2, v.b.b3);

	<cite>/* ok, we're done here */</cite>
	<var>return</var> EXIT_SUCCESS;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Now, isn't that a lot easier than creating some freak-show macros to do bit manipulation? BTW, the same trick works for point_t, rect_t, time_t, 64, 128, and 256 bit values, as well as individual bits.<br>
<br>
In a future post, I'll show you how to write code to select individual bits without bothering with bitmasks.<br>
<br>
<i>my original article source: <a href="../../_5f3ca%20href"http://trolltalk.com/index.php?name=News&file=article&sid=2"><a href="../../../trolltalk.com/index.phpnamenewsfilearticlesid2_3c_2fa_3e">http://trolltalk.com/index.php?name=News&file=article&sid=2]]</a></i></div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','zb07M4Gy');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../ovr0/contact.doreferrerwww.cplusplus.com_252farticles_25~22.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='jNTU7k9E')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiazb07m4gy.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiazb07m4gy'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
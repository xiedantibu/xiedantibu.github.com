<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/zvbcpfjn/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Prefer std solutions over hand written c - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Prefer std solutions over hand written c</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/kempofighter/default.htm" rel="author">kempofighter</a></b></div>
<div id="I_date">May 10, 2009</div>
<h1>Prefer std solutions over hand written copycats</h1>
<div id="I_score">Score: 4.4/5 (21 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<b>Admittedly there are many tutorials around for beginners.  The purpose of this article is not to provide yet another.  </b>Instead its purpose is to make a case for why beginners should prefer the std containers and algorithms over hand written copycats.  Actually, we all should prefer std solutions when writing object oriented C++ code.  <br>
<br>
The target audience is anyone who has been learning C++ and who has a basic understanding of language syntax, especially regarding instantiation of structures and classes, as well as declaring and calling functions.<br>
<br>
<b>First let me summarize the advantages of learning the std containers and algorithms during the early stages of your development.</b>
<br>
1) You'll avoid lots of common mistakes when writing for loops and if statements and the chances of your program containing annoying defects decreases significantly.<br>
<br>
2) There is a good chance that the std::algorithms are faster then your own handwritten loops or functions anyway.  These are written by very intelligent people who have a lot more information about the inner workings of the compiler and the language itself.  <br>
<br>
3) Using building blocks will allow you to construct a program much faster.  Instead of reinventing the wheel, learn to use the building blocks to accomplish your goals.  You'll be able to spend more time studying and implementing your program's requirements.  <br>
<br>
4) You'll avoid nasty memory management gotchas.  Although everyone must learn memory management eventually, allowing the std containers to do this for you will allow you to get some programs up and running without having to worry about managing dynamic memory.  Memory management is a complex subject and can overwhelm a beginner.  Do as little of it as possible, at first.  <br>
<br>
Let me start by stating that this website does have a pretty good tutorial for the C++ language as well as for the std libraries.  The examples are typically complete so that you can compile and execute them in your own compiler.  Finding a good compiler and learning to use its debugger is a large part of the battle when learning C++.  Stepping through a program with a debugger is a great way to analyze a program and learn from it.  The examples that I am posting have been compiled using Microsoft Visual C++ express 2008.  <br>
<a href="../../../www.microsoft.com/express/vc/default.htm">http://www.microsoft.com/express/vc/</a>
<br>
<b>Now, let's start by taking a look at some examples.  </b>The best way to learn, in my opinion, is to analyze existing code and write new test code that exercises the existing building blocks.<br>
<br>
If you know how to call a function, then you also know how to use a std algorithm.  Don't let the word algorithm fool you into thinking that they are too complicated for beginners.  Consider std::count.  Here we use std::count to count the number of 1s in the array.  It is a template function so std::count works with arrays or std containers such as deque and vector.  It can also work with custom containers and iterators because it is a template function.  In this case, the pointer to the first element of the array is the begin iterator while the pointer to one past the end of the array is the end iterator (remember that arrays are zero based).<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "stdafx.h"</dfn>
<dfn>#include &lt;deque&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>

<var>void</var> countExample()
{
    <var>int</var> myArray[10] = { 1, 2, 1, 3, 1, 4, 1, 5, 1, 6 };
    std::cout &lt;&lt; <kbd>"myArray contains "</kbd> &lt;&lt; std::count(myArray, myArray + 10, 1) &lt;&lt; <kbd>" 1s"</kbd> &lt;&lt; std::endl;

    std::deque&lt;<var>int</var>&gt; myDeque(myArray, myArray + 10);
    std::cout &lt;&lt; <kbd>"myDeque contains "</kbd> &lt;&lt; std::count(myDeque.begin(), myDeque.end(), 1) &lt;&lt; <kbd>" 1s"</kbd> &lt;&lt; std::endl;
}
<var>void</var> incorrectCustomCounter()
{
    <var>int</var> myArray[10] = { 1, 2, 1, 3, 1, 4, 1, 5, 1, 6 };

    <cite>// Manually search for 1s in the deque.  Can you spot the errors in the loop?</cite>
    <var>int</var> count(0);
    <var>for</var>(<var>int</var> i = 1; i &lt;= 10; ++i)
    {
        <var>if</var>(myArray&lt;i&gt; = 1)
        {
            ++count;
        }
    }
    std::cout &lt;&lt; <kbd>"myDeque contains "</kbd> &lt;&lt; count &lt;&lt; <kbd>" 1s"</kbd> &lt;&lt; std::endl;
}
<var>int</var> main()
{
    countExample();
    incorrectCustomCounter();
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Can you spot the errors in the above example?  That program actually ran on my computer although incorrectCustomCounter produced an incorrect result.  The program could have simply crashed.  If I had simply used std::count, not only would the code have looked nicer but it would have worked correctly.  Moreover, using std::count is as simple as making a function call.  There is no reason to write your own counting function.  std::count also provides a version that takes a predicate.  Once you learn how to write predicates, the std::count becomes even more useful.  Now you can extend the algorithm's capabilities even further!<br>
<a href="../../../cplusplus.com/reference/algorithm/count/default.htm">http://cplusplus.com/reference/algorithm/count/</a> <br>
<a href="../../../cplusplus.com/reference/algorithm/count_if/default.htm">http://cplusplus.com/reference/algorithm/count_if/</a> <br>
<b>Now let's take a look at a more complex example.  </b>I have noticed that many beginners post threads that have to do with simple database tasks such as managing student or customer records.  This example builds a dynamic array of student records and shows how the std algorithms can be used to manipulate, sort, and search the records with very little effort and few user defined loops.  <br>
<br>
It also shows how you as a beginner could write a test application to learn how the algorithms and containers work.  <br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "stdafx.h"</dfn>
<dfn>#include &lt;deque&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>class</var> Student
{
<var>public</var>:
    <cite>//constructors</cite>
    Student(std::string firstName, std::string lastName, std::string hometown, <var>unsigned</var> <var>int</var> id) 
        : firstName_(firstName), lastName_(lastName), hometown_(hometown), id_(id)  {}
    Student() : firstName_(<kbd>""</kbd>), lastName_(<kbd>""</kbd>), hometown_(<kbd>""</kbd>), id_(0) {}

    <cite>//destructor</cite>
    ~Student() {}

    <cite>// accessor functions</cite>
    std::string getHometown() <var>const</var> { <var>return</var> hometown_; }
    std::string getFirstName() <var>const</var> { <var>return</var> firstName_; }
    std::string getLastName() <var>const</var> { <var>return</var> lastName_; }
    <var>unsigned</var> <var>int</var> getId() <var>const</var> { <var>return</var> id_; };

    <cite>// mutator functions.</cite>
    <var>void</var> addSubject(<var>const</var> std::string&amp; subject) { classes_.push_back(subject); }
    <var>void</var> setFirstName(std::string&amp; name) { firstName_ = name; }
    <var>void</var> setlastName(std::string&amp; name) { lastName_ = name; }
    <var>void</var> setHometown(std::string&amp; name) { hometown_ = name; }
    <var>void</var> setId(std::string&amp; name) { firstName_ = name; }

    <cite>// overloaded &lt;&lt; so that we can output directly to a stream</cite>
    <var>friend</var> std::ostream&amp; <var>operator</var>&lt;&lt;(std::ostream&amp; os, <var>const</var> Student&amp; s)
    {
        <var>return</var> os &lt;&lt; s.getFirstName() &lt;&lt; <kbd>"\t\t"</kbd> &lt;&lt; s.getLastName() &lt;&lt; <kbd>"\t\t"</kbd> 
                  &lt;&lt; s.getHometown() &lt;&lt; <kbd>"\t"</kbd> &lt;&lt; s.getId(); 
    }

    <cite>// This is an overloaded relational operator.  It is needed to allow arrays of </cite>
    <cite>// Student objects to be sorted using std::sort.  This is called during the</cite>
    <cite>// operation so that each object in the array can be compared against one another.</cite>
    <var>bool</var> <var>operator</var>&lt;(<var>const</var> Student&amp; rhs)
    {
        <var>return</var> (id_ &lt; rhs.id_);
    }

    <cite>// declare friends</cite>
    <var>friend</var> <var>struct</var> PrintSubjects;
    <var>friend</var> <var>struct</var> IsTakingCalculus;

<var>private</var>:
    std::string firstName_;
    std::string lastName_;
    std::string hometown_;
    <var>unsigned</var> <var>int</var> id_;
    std::deque&lt;std::string&gt; classes_;

};


    <cite>// printing functor for use with std::foreach.  It works because operator&lt;&lt; is overloaded</cite>
    <cite>// for the student class.  </cite>
    <var>struct</var> SendToStream 
    {
        <var>void</var> <var>operator</var>() (<var>const</var> Student&amp; s) { std::cout &lt;&lt; s &lt;&lt; std::endl; }
    } StsFtr;

    <var>struct</var> PrintSubjects 
    {
        <var>void</var> <var>operator</var>() (<var>const</var> Student&amp; s) 
        { 
            std::cout &lt;&lt; <kbd>"\n"</kbd> &lt;&lt; s &lt;&lt; <kbd>"\n"</kbd>;
            std::deque&lt;std::string&gt;::const_iterator pos = s.classes_.begin();
            <var>for</var>(; pos &lt; s.classes_.end(); ++pos)
            {
                std::cout &lt;&lt; *pos &lt;&lt; <kbd>"   "</kbd>;  <cite>// 3 spaces</cite>
            }
            std::cout &lt;&lt; <kbd>"\n"</kbd>;
        }
    } PsFtr;


    <cite>// used with count_if to count the number of students from san diego.  </cite>
    <var>struct</var> IsFromSanDiego 
    {
        <var>bool</var> <var>operator</var>() (<var>const</var> Student&amp; s) { <var>return</var> (s.getHometown() == <kbd>"San Diego, CA"</kbd>); }
    } IfSdFtr;

    <cite>// used with count_if to count the number of students taking calculus</cite>
    <var>struct</var> IsTakingCalculus 
    {
        <var>bool</var> <var>operator</var>() (<var>const</var> Student&amp; s) 
        { 
            <var>return</var> (std::find(s.classes_.begin(), s.classes_.end(), <kbd>"calculus"</kbd>) != s.classes_.end()); 
        }
    } ItcFtr;

<var>typedef</var> std::deque&lt;Student&gt; Students;

<var>int</var> main()
{
    <cite>//Build an array of students.</cite>
    Students theStudents;

    <cite>// construct 10 students</cite>
    theStudents.push_back(Student(<kbd>"Sandra"</kbd>, <kbd>"Fox"</kbd>, <kbd>"San Diego, CA"</kbd>, 12111));
    theStudents.push_back(Student(<kbd>"Warren"</kbd>, <kbd>"Pierce"</kbd>, <kbd>"Fairbanks, AK"</kbd>, 12112));
    theStudents.push_back(Student(<kbd>"Dan"</kbd>, <kbd>"Wright"</kbd>, <kbd>"St. Louis, MO"</kbd>, 12113));
    theStudents.push_back(Student(<kbd>"Amelia"</kbd>, <kbd>"Timlin"</kbd>, <kbd>"Erie, PA"</kbd>, 24312));
    theStudents.push_back(Student(<kbd>"Anne"</kbd>, <kbd>"Bradley"</kbd>, <kbd>"Boston, MA"</kbd>, 24315));
    theStudents.push_back(Student(<kbd>"Mike"</kbd>, <kbd>"Harding"</kbd>, <kbd>"San Diego, CA"</kbd>, 24316));
    theStudents.push_back(Student(<kbd>"Sandra"</kbd>, <kbd>"Brown"</kbd>, <kbd>"Boston, MA"</kbd>, 38125));
    theStudents.push_back(Student(<kbd>"Melissa"</kbd>, <kbd>"Turner"</kbd>, <kbd>"Boston, MA"</kbd>, 38126));
    theStudents.push_back(Student(<kbd>"Jack"</kbd>, <kbd>"Turner"</kbd>, <kbd>"San Diego, CA"</kbd>, 12114));
    theStudents.push_back(Student(<kbd>"Sandra"</kbd>, <kbd>"Rice"</kbd>, <kbd>"St. Louis, MO"</kbd>, 24317));

    <cite>// print students in the original order</cite>
    std::cout &lt;&lt; <kbd>"\nPrint the students in the original order. "</kbd> &lt;&lt; std::endl;
    std::for_each(theStudents.begin(), theStudents.end(), StsFtr);

    <cite>// Use std algorithms to collect and display student metrics.</cite>
    Students::iterator pos;

    <cite>// print the student with the largest student id</cite>
    std::cout &lt;&lt; <kbd>"\nPrint the student with the largest id. "</kbd> &lt;&lt; std::endl;
    <var>if</var>( (pos = std::max_element(theStudents.begin(), theStudents.end())) != theStudents.end())
        StsFtr(*pos);

    <cite>// print the student with the smallest student id</cite>
    std::cout &lt;&lt; <kbd>"\nPrint the student with the smallest id. "</kbd> &lt;&lt; std::endl;
    <var>if</var>( (pos = std::min_element(theStudents.begin(), theStudents.end())) != theStudents.end())
        StsFtr(*pos);

    <cite>// sort the students by student id.  The operator&lt; for the student uses the id so</cite>
    <cite>// we don't need to use a functor.</cite>
    std::cout &lt;&lt; <kbd>"\nSort the student by their student id. "</kbd> &lt;&lt; std::endl;
    std::sort(theStudents.begin(), theStudents.end());
    std::for_each(theStudents.begin(), theStudents.end(), StsFtr);

    <cite>// reverse the order</cite>
    std::cout &lt;&lt; <kbd>"\nReverse the order of elements within the container"</kbd> &lt;&lt; std::endl;
    std::reverse(theStudents.begin(), theStudents.end());
    std::for_each(theStudents.begin(), theStudents.end(), StsFtr);

    <cite>// shuffle the array into a random order</cite>
    std::cout &lt;&lt; <kbd>"\nShuffle the container "</kbd> &lt;&lt; std::endl;
    std::random_shuffle(theStudents.begin(), theStudents.end());
    std::for_each(theStudents.begin(), theStudents.end(), StsFtr);

    <cite>// add some subjects to the student classes</cite>
    std::string subjectsArray[7] = { <kbd>"calculus"</kbd>, <kbd>"physics"</kbd>, <kbd>"philosophy"</kbd>, <kbd>"history"</kbd>, <kbd>"biology"</kbd>, <kbd>"grammar"</kbd>, <kbd>"spanish"</kbd> };
    <var>for</var>(pos = theStudents.begin(); pos &lt; theStudents.end(); ++pos)
    {
        <cite>// add three random subjects to each student object</cite>
        pos-&gt;addSubject(subjectsArray[1]);
        pos-&gt;addSubject(subjectsArray[3]);
        pos-&gt;addSubject(subjectsArray[5]);
        std::random_shuffle(subjectsArray, subjectsArray + 5);
    }
    std::for_each(theStudents.begin(), theStudents.end(), PsFtr);

    <cite>// Try using find and count functions using a predicate that searches for subjects contained </cite>
    <cite>// in student objects.</cite>
    std::cout &lt;&lt; std::count_if(theStudents.begin(), theStudents.end(), ItcFtr)
              &lt;&lt; <kbd>" are taking calculus.\n"</kbd>;

    std::cout &lt;&lt; std::count_if(theStudents.begin(), theStudents.end(), IfSdFtr)
              &lt;&lt; <kbd>" are from San Diego, CA.\n"</kbd>;
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>
You'll notice a couple of things about that example.</b>  First, I did not need to dynamically allocate memory directly. Therefore there is no chance of a memory leak in this program.  There is no chance that I have deleted memory incorrectly, left any dangling references to objects, or used an uninitialized pointer.  Second, it contains very few user defined for loops for collecting metrics, sorting, or printing the data.<br>
<br>
Although this website provides documentation for each algorithm, it is nice to pull some things together into one example to see how they can work together.  So give it a try! Copy and paste it into a project and try fiddling with it yourself.  If you write any useful adaptations, feel free to post them until the thread is archived.<br>
<br>
References:<br>
<a href="../../../cplusplus.com/default.htm">http://cplusplus.com</a> <br>
<a href="../../../cplusplus.com/reference/std/default.htm">http://cplusplus.com/reference/std/</a> <br>
<a href="../../../cplusplus.com/reference/algorithm/default.htm">http://cplusplus.com/reference/algorithm/</a> <br>
<a href="../../../cplusplus.com/reference/stl/default.htm">http://cplusplus.com/reference/stl/</a> <br>
<a href="../../../cplusplus.com/reference/string/default.htm">http://cplusplus.com/reference/string/</a> <br>
Effective STL, 50 Specific Ways to Improve Your Use of the Standard Template Library, Scott Meyers<br>
The C++ Standard Library, A Tutorial and Reference, Nicolai M. Josuttis<br>
Thanks for the feedback so far.  I was limited in characters, and the example ended up being a bit long.  I'll take the comments into consideration and post an update with some additional tips this evening.  For now, I added a comment above operator&lt;.  I noticed that I forgot to write a comment for that. <br>
I added a comment to the example explaining the point of operator&lt; used for sorting.  Duos mentioned adding some info about the functors.  I've decided that to really explain functors well another article is necessary.  Actually many articles could be written about functors.  So let us keep it simple and explain the basic concept as it relates to this article.<br>
<br>
First, functors are classes that define the operator() and can be used as callbacks needed by the std algorithms, among other things.  In my examples I used functors as callbacks in order to customize the std algorithms.  This was one of the easier ones that I wrote:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td>
<td class="source"><pre><code><var>struct</var> IsFromSanDiego 
    {
        <var>bool</var> <var>operator</var>() (<var>const</var> Student&amp; s) { <var>return</var> (s.getHometown() == <kbd>"San Diego, CA"</kbd>); }
    } IfSdFtr;

<cite>// calls IfSdFtr(*studentIterator) on every student object in the range.  If the</cite>
<cite>// student is from san diego, true is returned and std::count_if increments a counter.  </cite>
<cite>// IfSdFtr is an instance of the struct and is passed to count_if as if it were a pointer to a function.</cite>
std::cout &lt;&lt; std::count_if(theStudents.begin(), theStudents.end(), IfSdFtr)
              &lt;&lt; <kbd>" are from San Diego, CA.\n"</kbd>;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Notice that the functors are written using the struct keyword instead of class.  This is very common.  Writing a functor should be simple and since members are public by default it is much easier to write them as a struct rather than a class.  Also, the base class functors in the std library &lt;functional&gt; header are written as structs.<br>
<br>
<br>
Here are a couple of articles that I found to be useful while I was learning about functors.<br>
<a href="../../../en.wikipedia.org/wiki/function_object">http://en.wikipedia.org/wiki/Function_object</a> <br>
<br>
This one is interesting because it allows you to implement a functor in terms of another by simply negating an existing functor.  It shows why it is more useful to design callbacks as functors rather than simply using a global or static member function.  You can't pass "!isOdd" as the third argument to count_if because it is illegal syntax.  By inheriting from a built in unary functor you have the ability to take advantage of some other useful tools built into the language such as not1.  In the beginning, it is very easy to get into the habit of writing predicates or callbacks as global functions because it seems easier at first.  If you get in the habit of writing functors you will be better off, although the payoff might not be obvious at first!<br>
<a href="../../reference/functional/not1/default.htm">http://cplusplus.com/reference/std/functional/not1/</a></div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','zvbCpfjN');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~84.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='iGAq5Di1')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiazvbcpfjn.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiazvbcpfjn'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
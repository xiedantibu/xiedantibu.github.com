<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/17mf92yv/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>PowerBall Lottery Simulator Revamped - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">PowerBall Lottery Simulator Revamped</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/fimas/default.htm" rel="author">fimas</a></b></div>
<div id="I_date">Mar 14, 2014 (last update: Mar 14, 2014)</div>
<h1>PowerBall Lottery Simulator Revamped</h1>
<div id="I_score">Score: 3.7/5 (85 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<h2>Introduction</h2>
I read the very well written article by “roachmaster” the other day and thought that it was a good beginner’s project to learn C++. But then I got thinking. Maybe it would make a good guide for an intermediate level project as well. It implements the same rules as “roachmaster’s” simulator, but it differs in design and somewhat in implementation. It uses OO concepts and the STL more extensively. <br>
<br>
<h3>C++</h3>
C++ is a very versatile language, once you start to take advantage of everything it has to offer. The STL is great for starters. One of the goals Stroustrup (the inventor of C++) had was to make the std::vector class at least as quick as C-style arrays. He has also expressed that the C-style arrays are ridiculous, they don’t even know how many elements they contain. Another important aspect of C++ is the notion of objects. An object is a user defined type that has relationship with other objects. This means that if you got a function that calculates areas in square centimeters you can create a centimeter object that you pass to the function instead of a naked double value. Now you are safe from anyone trying to pass an inch object to that particular function. It will generate an error at compile time and you can’t ship software if it isn’t compiled. This is also known as type safety.<br>
<br>
<h3>This project</h3>
This project is aimed at programmers who got the basic C++ syntax and grammar down and want to expand on how to think when designing object oriented programs. The problem we are trying to solve is an easy one which means we can focus more on the code and the concepts behind it.<br>
There is much to be added to this code to make it complete, but the classes do compile and are ready to be put into a project. <br>
So the problem at hand is to draw random lottery numbers, create tickets to a player with random numbers on them and to check and see if the player has won or not.<br>
<br>
<h3>The rules</h3>
1.	The lottery draws 6 balls, 5 white and 1 red ball, randomly.<br>
2.	You buy any amount of lottery tickets with 6 random numbers on each.<br>
3.	If the drawn numbers matches the numbers in your tickets, you win.<br>
4.	Bonus is awarded if you match the red ball.<br>
<br>
<h2>Balls</h2>
When I first began designing the new version I thought that the different colored balls would make a perfect chance to show off some object inheritance. So I created a base class Ball which implements all code that is congruent for any ball. That is, every ball has a number and every ball has a color. Balls can also be compared with other balls and since all balls has a number they can also be compared with any integer.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><var>class</var> Ball
{
<var>public</var>:
        Ball(<var>int</var> i) { number = i; }

        <var>int</var>   getNumber() { <var>return</var> number; }
        <var>bool</var>  isRed()	  { <var>return</var> Red; }

        <var>const</var> <var>bool</var> <var>operator</var> == (<var>int</var> i) { <var>return</var> number == i; }
        <var>const</var> <var>bool</var> <var>operator</var> == (Ball &amp;rhs) { <var>return</var> number == rhs.number; }
        <var>const</var> <var>bool</var> <var>operator</var> &lt;  (Ball &amp;rhs) { <var>return</var> number &lt; rhs.number;  }
        <var>const</var> <var>bool</var> <var>operator</var> &gt;  (Ball &amp;rhs) { <var>return</var> number &gt; rhs.number;  }
<var>protected</var>:
        <var>int</var> number;
        <var>bool</var> Red;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Now we need to differentiate between different kinds of balls. In this lottery there are white balls and red balls. The only real difference is the color. We set a flag to tell if the ball is red or if it is not red. Note also, that we use the base class’ ctor to set the number of the ball.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><var>class</var> WhiteBall : <var>public</var> Ball
{
<var>public</var>:
        WhiteBall(<var>int</var> i) : Ball(i)
        {
                Red = <var>false</var>;
        }
};

<var>class</var> RedBall : <var>public</var> Ball
{
<var>public</var>:
        RedBall(<var>int</var> i) : Ball(i)
        {
                Red = <var>true</var>;
        }
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h2>Random Numbers</h2>
A lottery isn’t a lottery without its random numbers. The RandomNumber class creates random numbers. The ctor takes 3 integer arguments, minimum, maximum and amount. The minimum is the lowest value to generate, the maximum is the highest number to generate and amount is the amount of numbers to create. We use the new C++11 library &lt;random&gt; to create our random numbers. First we create a random_device object. This object uses /dev/urandom on GNU/Linux to generate a random seed to the random generator. I don’t know how windows implements this object, but it still works. We use the default random engine (mersenne_twister_engine at the time of writing) to generate our numbers. <br>
We see a new C++11 construct here as well. The new for-loop. It makes it easier to traverse arrays and other objects with iterators. It wouldn’t do to have duplicate balls. Would we count that as two matches or one match if we got the number on our ticket? If we detect duplicates, regenerate the number and stick the new number into the vector.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br></code></pre></td>
<td class="source"><pre><code><var>class</var> RandomNumbers
{
<var>public</var>:
        RandomNumbers(<var>int</var> min, <var>int</var> max, <var>int</var> amount)
        {
                std::random_device rd;
                std::default_random_engine re(rd());
                std::uniform_int_distribution&lt;<var>int</var>&gt; uid(min, max);

                <var>for</var> (<var>int</var> i = 0; i &lt; amount; i++)
                {
                        <var>int</var> num = uid(re);

                        <var>for</var> (<var>int</var> n : numbers)
                        {
                                <var>if</var> (n == num)
                                        num = uid(re);
                        }

                        numbers.push_back(num);
                }
        }

        std::vector&lt;<var>int</var>&gt; getNumbers() { <var>return</var> numbers; }
<var>private</var>:	
        std::vector&lt;<var>int</var>&gt; numbers;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h2>Tickets</h2>
Next I decided to create the ticket class. It is very simple. It only holds 6 random numbers between 1 and 58 for us. It also contains logic for displaying our ticket. The most interesting thing about this class is that we are using an object we our self’s have created, the RandomNumbers object. We also implement the std::sort function that can sort arrays, vectors and other containers that contain basic types (e.g. int, char, double, float)<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><var>class</var> Ticket
{
<var>public</var>:
        Ticket()
        {
                RandomNumbers ticketNums(1, 58, 6);
                numbers = ticketNums.getNumbers();
                std::sort(numbers.begin(), numbers.end());
        }

        <var>void</var> display()
        {
                std::cout &lt;&lt; <kbd>"Ticket:  "</kbd>;
                <var>for</var> (<var>int</var> i : numbers)
                {
                        std::cout &lt;&lt; std::setw(2) &lt;&lt; i &lt;&lt; <kbd>" "</kbd>;
                }
                std::cout &lt;&lt; std::endl;
        }

        std::vector&lt;<var>int</var>&gt; getNumbers() { <var>return</var> numbers; }
<var>private</var>:
        std::vector&lt;<var>int</var>&gt; numbers;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h2>The Lottery</h2>
Now we have everything except the lottery itself. The interesting thing here is the use of the vector balls. It contains pointers to the base class Ball but we fill it with 5 WhiteBalls and a RedBall. We can do this since both are of the type Ball. Since we use the keyword new to create the balls we also need to use delete to free the memory allocated by the balls. This is a typical example of how to use the ctor and dtor of a class. The ctor allocates the memory needed for the object and the dtor releases the memory when the object is out of scope.<br>
We get to acquaint our self’s further with C++11 as we see in the line that sorts our balls. Std::sort does not know how to sort balls yet, but it allows us to submit a custom function to show how we want to sort them. As seen in the ball’s class, a ball knows how to compare itself with another ball. But it feels cumbersome to write a function just to test if a ball has a lower value than another. C++11 has the answer to this. Lambdas. A lambda-expression is a short piece of code that behaves like a function, but can be fitted nicely into a line of code and used as an argument to functions that takes a function as one of its arguments. It is also useful for functions that we aren’t likely to reuse but still need for some reason.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br></code></pre></td>
<td class="source"><pre><code><var>class</var> Lottery
{
<var>public</var>:
        Lottery()
        {
                RandomNumbers RandomWhite(1, 58, 5);
                RandomNumbers RandomRed(1, 34, 1);

                <var>for</var> (<var>int</var> n : RandomWhite.getNumbers())
                {
                        balls.push_back(<var>new</var> WhiteBall(n));
                }

                std::sort(balls.begin(), balls.end(), [](Ball* a, Ball* b){ <var>return</var> *a &lt; *b; });

                balls.push_back(<var>new</var> RedBall(RandomRed.getNumbers()[0]));
        }

        ~Lottery()
        {
                <var>for</var> (<var>auto</var> ball : balls)
                {
                        <var>delete</var> ball;
                }
        }

        <var>void</var> display()
        {
                std::cout &lt;&lt; <kbd>"Lottery: "</kbd>;

                <var>for</var> (<var>auto</var> ball : balls)
                {
                        <var>if</var> (ball-&gt;isRed())
                                std::cout &lt;&lt; <kbd>"Red number: "</kbd> &lt;&lt; ball-&gt;getNumber() &lt;&lt; std::endl;
                        <var>else</var>
                                std::cout &lt;&lt; std::setw(2) &lt;&lt; ball-&gt;getNumber() &lt;&lt; <kbd>" "</kbd>;
                }
        }

        std::vector&lt;Ball*&gt; getBalls() { <var>return</var> balls; }
<var>private</var>:
        std::vector&lt;Ball*&gt; balls;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h2>Winning conditions</h2>
Ok, so we got our balls, our tickets and our lottery. Now we need to see if the player has won anything. The logic is pretty straight forward even if the code may look a bit cluttered. If you use a good IDE it will help you highlight which curly braces are around what. I use Microsoft Visual Studio Express 2013, but there are many other very competent IDEs out there so make sure to pick one that suits your needs.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br></code></pre></td>
<td class="source"><pre><code><var>class</var> Winning
{
<var>public</var>:
        Winning(std::vector&lt;Ticket*&gt; tickets, std::vector&lt;Ball*&gt; balls)
        {
                <var>for</var> (<var>auto</var> ticket : tickets)
                {
                        <var>int</var> matches = 0;
                        <var>bool</var> hasRed = <var>false</var>;

                        <var>for</var> (<var>int</var> number : ticket-&gt;getNumbers())
                        {
                                <var>for</var> (<var>auto</var> ball : balls)
                                {
                                        <var>if</var> (*ball == number)
                                        {
                                                matches++;

                                                <var>if</var> (ball-&gt;isRed())
                                                        hasRed = <var>true</var>;
                                        }
                                }
                        }

                        winnsPerTicket.push_back(matches);
                        hasRedTicket.push_back(hasRed);
                }
        }

        <var>int</var> getWinnings()
        {
                <var>for</var> (size_t i = 0; i &lt; winnsPerTicket.size(); i++)
                {
                        std::cout &lt;&lt; <kbd>"Got "</kbd> &lt;&lt; winnsPerTicket[i] &lt;&lt; <kbd>" matches."</kbd>;

                        <var>if</var> (hasRedTicket[i])
                                std::cout &lt;&lt; <kbd>" And has got the red ball!"</kbd> &lt;&lt; std::endl;
                        <var>else</var>
                                std::cout &lt;&lt; <kbd>" But has not got the red ball."</kbd> &lt;&lt; std::endl;
                }

                <var>return</var> 0;
        }

<var>private</var>:
        std::vector&lt;<var>int</var>&gt; winnsPerTicket;
        std::vector&lt;<var>bool</var>&gt; hasRedTicket;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h2>The Game</h2>
We’re almost done now. The only thing that remains is to create a menu for buying tickets and implement the logic needed to play. Again we need to be sure to delete the objects we’ve created with new in the dtor.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br></code></pre></td>
<td class="source"><pre><code><var>class</var> Game
{
<var>public</var>:
        Game() {};
        ~Game()
        {
                <var>for</var> (<var>auto</var> ticket : tickets)
                {
                        <var>delete</var> ticket;
                }
        }

        <var>void</var> Menu()
        {
                <var>int</var> numTic = 0;
                std::cout &lt;&lt; <kbd>"Welcome to the PowerBall Lottery!"</kbd> &lt;&lt; std::endl;
                std::cout &lt;&lt; <kbd>"To play you need to purchase a ticket at $2. More tickets increase the odds to win."</kbd> &lt;&lt; std::endl;
                std::cout &lt;&lt; <kbd>"How many tickets would you like? "</kbd> &lt;&lt; std::endl;

                <var>do</var>
                {
                        std::cout &lt;&lt; <kbd>"Enter amount of tickets you would like to purchase: "</kbd>;
                        std::cin &gt;&gt; numTic;
                        std::cin.sync();

                        <var>if</var> ((numTic &lt; 1) || (numTic &gt; 100))
                        {
                                std::cout &lt;&lt; <kbd>"Input invalid. Needs to be a number between 1 and 100. Please try again"</kbd> &lt;&lt; std::endl;
                        }
                } <var>while</var> ((numTic &lt; 1) || (numTic &gt; 100));

                createTickets(numTic);
                std::cout &lt;&lt; <kbd>"Your tickets are registered. Thank you for playing the PowerBall lottery!"</kbd> &lt;&lt; std::endl;
        }

        <var>void</var> Play()
        {
                std::cout &lt;&lt; <kbd>"Let\'s see this weeks PowerBall lottery numbers!"</kbd> &lt;&lt; std::endl;
                lotto.display();

                <var>for</var> (<var>auto</var> ticket : tickets)
                {
                        ticket-&gt;display();
                }

                Winning w(tickets, lotto.getBalls());
                w.getWinnings();
        }

<var>private</var>:
        std::vector&lt;Ticket*&gt; tickets;
        Lottery lotto;

        <var>void</var> createTickets(<var>int</var> numTic)
        {
                <var>for</var> (<var>int</var> i = 0; i &lt; numTic; i++)
                {
                        tickets.push_back(<var>new</var> Ticket);
                }
        }
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h2>Epilogue</h2>
That’s it! Almost. I’ve left some things out for you to implement, but the code compiles and the lottery is playable with the code in this tutorial. You might want to add some function to keep track of the wins and losses and maybe give the player a wallet object to keep money in. One could also think of ways to save the state of the game to keep the stats between sessions. But as I’ve already said, that’s for you to implement. <br>
Oh, before I forget. You’ll need to include some headers to make this code work.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;  </dfn><cite>// For std::cout, std::cin</cite>
<dfn>#include &lt;iomanip&gt;	 </dfn><cite>// For std::setw</cite>
<dfn>#include &lt;random&gt;	 </dfn><cite>// For all random generation stuff</cite>
<dfn>#include &lt;algorithm&gt; </dfn><cite>// For std::sort</cite>
<dfn>#include &lt;vector&gt;	 </dfn><cite>// For std::vector </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
All the code in this tutorial is copyleft. That is, you may use this code as you wish, basically. Make sure to check http://www.cplusplus.com/ for more information on any function or method you are unsure about. If you have any questions or suggestions please drop me a line either via PM or email.<br>
<br>
“roachmaster”’s article <a href="../4yhv0pdg/default.htm">http://www.cplusplus.com/articles/4yhv0pDG/</a>
<br>
Author Tomas Landberg (tomas.landberg (at) gmail.com)<br>
Good Luck!<br>
<p>Attachments:
	[<a href="powerballlotteryrevamped.pdf">PowerBallLotteryRevamped.pdf</a>]
</p>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','17Mf92yv');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~28.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='9zqpDjzh')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia17mf92yv.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia17mf92yv'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
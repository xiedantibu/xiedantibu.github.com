<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/nha0rxsz/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Beginners guide to the std::sort() funct - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Beginners guide to the std::sort() funct</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/closed_account_3qx21hu5/default.htm" rel="author">closed account 3qX21hU5</a></b></div>
<div id="I_date">May 6, 2013 (last update: Jun 1, 2013)</div>
<h1>Beginners guide to the std::sort() function</h1>
<div id="I_score">Score: 4.2/5 (217 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<H3><STRONG>Important Information</STRONG></H3>
<br>
Now before we start I would like to state that I will be using features that are only available on C++11 compilers. If you don't have a C++11 or don't know if your compiler supports it, I would recommend doing this. Head on over to CodeBlocks and download their IDE. It comes with a C++11 compiler and you can enable it by going to settings-&gt;compiler-&gt;compiler settings-&gt;compiler flags-&gt; and then you should see a checkbox that says something like Have g++ follow the C++11 ISO C++ language standard. Enable that and click ok and you should be good to go.<br>
<br>
<br>
<br>
<H3><STRONG>What It Looks Like</STRONG></H3>
<br>
The sort() function in the algorithm header can be a very useful tool to both new and experienced programmers. It's use is to sort containers like arrays and vectors.<br>
<br>
The first example is what the function looks like. The second example is an optional overloaded function that includes a third parameter. First take a look at each of these functions and see if we can figure out what each parameter does.<br>
<br>
<STRONG>Example 1</STRONG> ~ <span class="auto"><code class="source">std::sort(myvector.begin(), myvector.end())</code></span>
<br>
<br>
<STRONG>Example 2</STRONG> ~ <span class="auto"><code class="source">std::sort(myvector.begin(), myvector.end(), myCompFunction)</code></span>
<br>
<br>
<br>
<H3><STRONG> About The Function </STRONG></H3>
<br>
So let’s go dig into these and figure out what each does and why it does it.<br>
<br>
<br>
<STRONG>Found in</STRONG> ~ <span class="auto"><code class="source"><dfn>#include &lt;algorithm&gt; </dfn></code></span>
<br>
<br>
<STRONG>Parameter 1 myvector.begin()</STRONG> ~ The first parameter is where you will be putting a iterator(Pointer) to the first element in the range that you want to sort. The sort will include the element that the iterator points to.<br>
<br>
<STRONG>Parameter 2 myvector.end()</STRONG> ~ The second parameter is almost like the first but instead of putting a iterator to the first element to sort you will be putting a iterator to the last element. One very important difference is that the search won’t include the element that this iterator points to. It is [First,Last) meaning it includes the first parameter in the sort but it doesn’t include the second parameter in the sort.<br>
<br>
<STRONG>Parameter 3 myCompFunction() <I>Optional</I></STRONG> ~ I will only give a brief description here, because I will be explaining this parameter in more detail later. The third parameter is used to define how you do the search. For example if you have a struct that has 3 different variables in it, how does the function know which one to sort? Or how does it know how it should sort it? This is what this parameter is for. I will explain this more in a bit.<br>
<br>
<STRONG>Function Return</STRONG> ~ This function doesn’t return anything because it alters the container directly through iterators(Pointers).<br>
<br>
<br>
<H3><STRONG>Array Example</STRONG></H3>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// sort() Example using arrays.</cite>
<cite>// By Zereo 04/22/13</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>

<var>using</var> <var>namespace</var> std;

<var>const</var> <var>int</var> SIZE = 7;

<var>int</var> main()
{
    <var>int</var> intArray[SIZE] = {5, 3, 32, -1, 1, 104, 53};

    <cite>//Now we call the sort function</cite>
    sort(intArray, intArray + SIZE);

    cout &lt;&lt; <kbd>"Sorted Array looks like this."</kbd> &lt;&lt; endl;
    <var>for</var> (size_t i = 0; i != SIZE; ++i)
        cout &lt;&lt; intArray[i] &lt;&lt; <kbd>" "</kbd>;

    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<br>
<STRONG>Things to know</STRONG>
<br>
<br>
When we use the sort function to sort an array our arguments will look a bit different then when we use it on a vector for example. In the example above when we pass in intArray as an argument we are telling the function to start the sort at the beginning of the array. If we wanted it to start the sort at the second element of the array we would do <span class="auto"><code class="source">sort(intArray + 1, intArray + SIZE);</code></span>. So when we do intArray + SIZE for the second argument we are telling the array to sort up to the last element in the array.<br>
<br>
<br>
<STRONG>Using C++11 to simplify things</STRONG>
<br>
<br>
We can make sorting whole arrays even easier by using <span class="auto"><code class="source">std::begin()</code></span> and <span class="auto"><code class="source">std::end()</code></span>. <span class="auto"><code class="source">std::begin()</code></span> will return a iterator(pointer) to the first element in the array we pass it. Whereas <span class="auto"><code class="source">std::end()</code></span> will return a iterator(pointer) to one past the last element in the array we pass it. So we could call the sort function by passing it begin() and end() like so.<br>
<br>
<span class="auto"><code class="source">sort(begin(intArray), end(intArray));</code></span>
<br>
<br>
<br>
<H3><STRONG>Sorting Vectors and other STL Containers Example</STRONG></H3>
<br>
<I>Warning: Uses C++11 features.</I>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br></code></pre></td>
<td class="source"><pre><code><cite>// Vector Sorting Example.</cite>
<cite>// By Zereo 04/22/13</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>using</var> <var>namespace</var> std;

<var>int</var> main()
{
    <cite>// Warning this type of initialization requires a C++11 Compiler</cite>
    vector&lt;<var>int</var>&gt; intVec = {56, 32, -43, 23, 12, 93, 132, -154};
    vector&lt;string&gt; stringVec = {<kbd>"John"</kbd>, <kbd>"Bob"</kbd>, <kbd>"Joe"</kbd>, <kbd>"Zack"</kbd>, <kbd>"Randy"</kbd>};

    <cite>// Sorting the int vector</cite>
    sort(intVec.begin(), intVec.end());

    <var>for</var> (vector&lt;<var>int</var>&gt;::size_type i = 0; i != intVec.size(); ++i)
        cout &lt;&lt; intVec[i] &lt;&lt; <kbd>" "</kbd>;

    cout &lt;&lt; endl;

    <cite>// Sorting the string vector</cite>
    sort(stringVec.begin(), stringVec.end());

    <cite>// Ranged Based loops. This requires a C++11 Compiler also</cite>
    <cite>// If you don't have a C++11 Compiler you can use a standard</cite>
    <cite>// for loop to print your vector.</cite>
    <var>for</var> (string &amp;s : stringVec)
        cout &lt;&lt; s &lt;&lt; <kbd>" "</kbd>;

    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<STRONG>Things to know</STRONG>
<br>
<br>
First as you can see the sorting function works almost the same as on an array but we just have to pass our arguments a little differently. Since the first parameter in sort() accepts a iterator(pointer) to the first element we want to sort we can pass <span class="auto"><code class="source">stringVec.begin()</code></span> to it because <span class="auto"><code class="source">.begin()</code></span>returns a iterator to the first element. So it will start the sorting at the first element in the vector. The same goes for <span class="auto"><code class="source">stringVec.end()</code></span> for the second parameter because remember <span class="auto"><code class="source">.end()</code></span> is a iterator that points to one past the last element in the container. Remember the sort function sorts up to but not including what we pass in as the second parameter.<br>
<br>
You also probably noticed that the sort works on things other then numbers. When we printed out the vector of strings it gave us a nice and neat vector that holds the names in their alphabetical order. <br>
<br>
<br>
<br>
<H3><STRONG>The Overloaded sort() With A Third Parameter.</STRONG></H3>
<br>
The third parameter in the sort() function is actually a very useful feature. It allows us to define how the sort() function will actually perform the search. Sometimes you can get by with the normal version of sort(), but what if we wanted to change how the container was sorted by having it sort by descending order instead of ascending? Or what if we had a container full of a special type of class objects we created and need to sort that container a special way? Well this is where the third parameter comes in.<br>
<br>
<br>
<br>
<H3><STRONG>Making it sort by descending order example.</STRONG></H3>
<br>
<I>Warning: Uses C++11 Features</I>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br></code></pre></td>
<td class="source"><pre><code><cite>// Vector Sorting Descending Example.</cite>
<cite>// By Zereo 04/22/13</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>using</var> <var>namespace</var> std;

<cite>// We need this function to define how to sort</cite>
<cite>// the vector. We will pass this function into the</cite>
<cite>// third parameter and it will tell it to sort descendingly.</cite>
<var>bool</var> wayToSort(<var>int</var> i, <var>int</var> j) { <var>return</var> i &gt; j; }

<var>int</var> main()
{
    vector&lt;<var>int</var>&gt; intVec = {56, 32, -43, 23, 12, 93, 132, -154};
    
    <cite>// Do not include the () when you call wayToSort</cite>
    <cite>// It must be passed as a function pointer or function object</cite>
    sort(intVec.begin(), intVec.end(), wayToSort);

    <var>for</var> (<var>int</var> i : intVec)
        cout &lt;&lt; i &lt;&lt; <kbd>" "</kbd>;
    
    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<STRONG>The Function</STRONG>
<br>
<br>
First let’s look at the function. What we did is we created a function that will determine whether i &gt; j every time it is called. The sort function will automatically assign an element to both i and j.<br>
<br>
The function you make needs to have a return type of Boolean.<br>
<br>
So when we define <span class="auto"><code class="source"><var>bool</var> wayToSort(<var>int</var> i, <var>int</var> j) { <var>return</var> i &gt; j; }</code></span>, we are saying we wanted it to sort descending because i&gt;j. Whereas ascending would be i&lt;j.<br>
<br>
<br>
<STRONG>Using the STL to simplify sorting in ascending or descending.</STRONG>
<br>
<br>
Another solution to the problem of getting it to sort descending is to use <VAR>std::greater()</VAR>, which would look like this.<br>
<br>
<span class="auto"><code class="source">sort(intVec.begin(), intVec.end(), greater&lt;<var>int</var>&gt;());</code></span>
<br>
<br>
<br>
<H3><STRONG>Sorting User Made Types.</STRONG></H3>
<br>
For a lot of programs we aren’t storing just ints, strings, or doubles. Instead we are making complicated classes that have multiple number and string members and storing them in a container. So when we want to sort that container of our class objects we need to define a special function that will tell the sort() function how it should sort those objects.<br>
<br>
So for my last example lets say we have a struct that represents a person and it looks like this.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code><var>struct</var> Person
{
    string name;
    <var>int</var> age;
    string favoriteColor;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
As you can see it has three members: name, age and color. Now let’s say we have a program that has a vector full of Person objects, and we need a way to be able to sort them by their name, age or favorite color at certain points in the program.<br>
<br>
One way would be to make a function for each different way of sorting like in the example below. Those this is not the only way.<br>
<br>
<I>Warning: Uses C++11 Features</I>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br></code></pre></td>
<td class="source"><pre><code><cite>// Complicated Types Sorting Example.</cite>
<cite>// By Zereo 04/22/13</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>using</var> <var>namespace</var> std;

<var>struct</var> Person
{
    <cite>// Left out making a constructor for simplicity's sake.</cite>
    string name;
    <var>int</var> age;
    string favoriteColor;
};

<cite>// Sort Container by name function</cite>
<var>bool</var> sortByName(<var>const</var> Person &amp;lhs, <var>const</var> Person &amp;rhs) { <var>return</var> lhs.name &lt; rhs.name; }

<cite>// Sort Container by age function</cite>
<var>bool</var> sortByAge(<var>const</var> Person &amp;lhs, <var>const</var> Person &amp;rhs) { <var>return</var> lhs.age &lt; rhs.age; }

<cite>// Sort Container by favorite color</cite>
<cite>// We can just sort alphabetically and then it will group the</cite>
<cite>// color together.</cite>
<var>bool</var> sortByColor(<var>const</var> Person &amp;lhs, <var>const</var> Person &amp;rhs) { <var>return</var> lhs.favoriteColor &lt; rhs.favoriteColor; }

<cite>// A global const variable to hold how many people to ask for input for.</cite>
<var>const</var> <var>unsigned</var> numberOfPeople = 2;

<var>int</var> main()
{
    <cite>// Make a vector that holds 5 blank Person Objects</cite>
    vector&lt;Person&gt; people(numberOfPeople);

    <cite>// This will ask for user input to populate the container</cite>
    <cite>// with 5 different indivuals.</cite>
    <var>for</var> (vector&lt;Person&gt;::size_type i = 0; i != numberOfPeople; ++i)
    {
        cout &lt;&lt; <kbd>"Person #"</kbd> &lt;&lt; i + 1 &lt;&lt; <kbd>" name: "</kbd>;
        cin &gt;&gt; people[i].name;

        cout &lt;&lt; <kbd>"Person #"</kbd> &lt;&lt; i + 1 &lt;&lt; <kbd>" age: "</kbd>;
        cin &gt;&gt; people[i].age;

        cout &lt;&lt; <kbd>"Person #"</kbd> &lt;&lt; i + 1 &lt;&lt; <kbd>" favorite color: "</kbd>;
        cin &gt;&gt; people[i].favoriteColor;
    }

    cout &lt;&lt; <kbd>"\n\n"</kbd>;

    <cite>// Sort by name</cite>
    sort(people.begin(), people.end(), sortByName);
    <var>for</var> (Person &amp;n : people)
        cout &lt;&lt; n.name &lt;&lt; <kbd>" "</kbd>;

    cout &lt;&lt; endl;

    <cite>// Sory by age</cite>
    sort(people.begin(), people.end(), sortByAge);
    <var>for</var> (Person &amp;n : people)
        cout &lt;&lt; n.age &lt;&lt; <kbd>" "</kbd>;

    cout &lt;&lt; endl;

    <cite>// Sort by color</cite>
    sort(people.begin(), people.end(), sortByColor);
    <var>for</var> (Person &amp;n : people)
        cout &lt;&lt; n.favoriteColor &lt;&lt; <kbd>" "</kbd>;

    <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<STRONG>Things to know</STRONG>
<br>
<br>
Now I won’t be able to go into everything that was going on in that last example, but I will go through one of the functions and explain how it works.<br>
<br>
<br>
<br>
<STRONG>Sort By Name Function</STRONG>
<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>bool</var> sortByName(<var>const</var> Person &amp;lhs, <var>const</var> Person &amp;rhs) 
{ 
    <var>return</var> lhs.name &lt; rhs.name;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This function is actually very similar to the one we just made before except we changed two things. We changed the parameter types from int to type Person, and we also changed the return expression a bit. <br>
<br>
First let’s go over the change to the parameters.<br>
<br>
The reason why we had to change the parameters from int to Person, is because the container we are sorting is of type vector&lt;Person&gt;. And in order to be able to call the equation lhs.name &lt; rhs.name the parameters would have to be of type Person so we can access the name members.<br>
<br>
Secondly we changed the return equation to lhs.name &lt; rhs.name. Can you guess what this equation is asking? Well what this is saying is basically this. Remember that both lhs and rhs are pointing to a separate element in the container (Like lhs is element 1 and rhs is element 2). So when we say lhs.name we are telling it to access element 1’s object and then access that objects name member. The same goes for rhs.name but is it accessing element 2’s object instead. So when we say to return lhs.name &lt; rhs.name we are asking it if lhs’s object’s name less then rhs’s objects name.<br>
<br>
The other functions are actually just the same but use the different members of the struct.<br>
<br>
<br>
<br>
THE END ;p<br>
<br>
Well that is all for this tutorial, though there is a lot more to learn about sorting with the STL. So if you are interested you can look below for some links to other things that relate to sort(). If you have any comments (Especially on any mistakes) on the article/tutorial please let me know I enjoy any type of feedback good or bad. <br>
<br>
The same goes for any questions, if you don’t understand anything or the way I explained something didn’t make sense (More then likely ;p) please let me know through a reply here or through a PM. I would be glad to help answer any questions you have.<br>
<br>
I am hoping to create some more tutorials shortly about how to use algorithms from the STL. Once I get them written up I will either add them to this Article or create a new one. Hope everyone liked it and thanks for reading,<br>
<br>
<br>
<br>
<H3><STRONG>Resources</H3></STRONG>
<br>
<STRONG>Documentations</STRONG>
<br>
<br>
<A HREF="../../../en.cppreference.com/w/cpp/iterator/end">std::end()</A>
<br>
<A HREF="../../../en.cppreference.com/w/cpp/iterator/begin">std::begin()</A>
<br>
<A HREF="../../reference/algorithm/sort/default.htm">std::sort()</A>
<br>
<A HREF="../../reference/algorithm/stable_sort/kwstable_sort.htm">std::stable_sort()</A>
<br>
<A HREF="../../reference/functional/greater/default.htm">std::greater()</A>
<br>
<A HREF="../../reference/functional/less/default.htm">std::less()</A>
<br>
<br>
<br>
<STRONG>Information</STRONG>
<br>
<br>
<A HREF="../../../www.cprogramming.com/c11/c11-ranged-for-loop">Ranged Based For Loops</A>
<br>
<A HREF="../../../www.informit.com/articles/article.aspxp1852519">Info on initialization in C++11</A>
<br>
<br>
<br>
~ Zereo</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','NhA0RXSz');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~64.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='3qX21hU5')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgianha0rxsz.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgianha0rxsz'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
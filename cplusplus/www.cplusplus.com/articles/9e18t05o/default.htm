<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/9e18t05o/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Static code analysis - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Static code analysis</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/andreykarpov/default.htm" rel="author">AndreyKarpov</a></b></div>
<div id="I_date">Mar 12, 2012 (last update: Mar 12, 2012)</div>
<h1>Static code analysis</h1>
<div id="I_score">Score: 3.4/5 (47 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
Static code analysis is the process of detecting errors and defects in software's source code.<br>
<br>
Static analysis can be viewed as an automated code review process. Let's speak on the code review now.<br>
<br>
Code review is one of the oldest and safest methods of defect detection. It deals with joint attentive reading of the source code and giving recommendations on how to improve it. This process reveals errors or code fragments that can become errors in future. It is also considered that the code's author should not give explanations on how a certain program part works. The program's execution algorithm should be clear directly from the program text and comments. If it is not so, the code needs improving.<br>
<br>
The code review usually works well because programmers can notice errors in somebody else's code much easier than in their own's. To learn more about the code review method, please see a wonderful book "Code Complete" by Steve McConnell [1].<br>
<br>
The only crucial disadvantage of the joint code review method is an extremely high price: you need to gather several programmers at regular times to review a fresh code or re-review a code after recommended changes have been applied to it. The programmers also need to have a rest regularly, as their attention might quickly weaken if they review large code fragments at a time, so there will be no use of code review then.<br>
<br>
It appears that - on the one hand - you want to review your code regularly. On the other hand, it is too expensive. Static code analysis tools are a compromise solution. They can tirelessly handle source texts of programs and give recommendations to the programmer on what code fragments he/she should consider. Of course, a program can never replace complete code review performed by a team of programmers, but the ratio use/price makes usage of static analysis a rather good practice exploited by many companies.<br>
<br>
The tasks solved by static code analysis software can be divided into 3 categories:<br>
<br>
<ol>
  <li>Detecting errors in programs. We will speak on that in detail further.</li>
  <li>Recommendations on code formatting. Some static analyzers allow you to check if the source code corresponds to the code formatting standard accepted in your company. We mean control of the number of indents in various constructs, use of spaces/tabs and so on.</li>
  <li><a href="../../../www.viva64.com/go.phpurl817">Metrics</a> computation. Software metrics are a measure that lets you get a numerical value of some property of software or its specifications. There are <a href="../../../www.viva64.com/en/a/0045/default.htm">lots of</a> various metrics that can be computed with the help of certain tools.</li>
</ol>
<br>
There are also <a href="../../../www.viva64.com/en/b/0091/default.htm">other ways</a> of using static code analysis tools. For instance, static analysis can be used as a method to control and teach new workers who are not yet familiar enough with the company's programming rules.<br>
<br>
There are a lot of commercial and free static code analyzers. The Wikipedia website contains a large list of static analyzers: <a href="../../../www.viva64.com/go.phpurl70">List of tools for static code analysis</a>. The list of languages static code analyzers support is great too (C, C++, C#, Java, Ada, Fortran, Perl, Ruby, ...).<br>
<br>
Like any other error detection methodology, static analysis has its strong and weak points. You should understand that there are no ideal software testing methods. Different methods will produce different results for different software classes. Only combining various methods will enable you to achieve the highest quality of your software.<br>
<br>
The main advantage of static analysis is this: it enables you to greatly reduce the price of eliminating defects in software. The earlier an error is detected, the lower the price to fix it. Thus, according to the data given in the book "Code Complete" by McConnell, fixing an error at the stage of testing costs ten times more than at the code writing stage:<br>
<br>
<img src="image2.png" alt="An average cost of fixing defects depending on the time they have been made and detected">
Figure 1. An average cost of fixing defects depending on the time they have been made and detected (the data for the table are taken from the book "Code Complete" by S. McConnell).<br>
<br>
Static analysis tools allow you to quickly detect a lot of errors of the coding stage, which significantly reduces the cost of development of the whole project. For example, the PVS-Studio static code analyzer can run in background right after compilation is done and tell the programmer about potential errors if there are any (see <a href="../../../www.viva64.com/en/d/0218/default.htm">incremental analysis mode</a>).<br>
<br>
Other static code analysis' advantages are the following:<br>
<ol>
  <li>Full code coverage. Static analyzers check even those code fragments that get control very rarely. These code fragments usually cannot be tested through other methods. It allows you to find defects in exception handlers or in the logging system.</li>
  <li>Static analysis doesn't depend on the compiler you are using and the environment where the compiled program will be executed. It allows you to find hidden errors that can reveal themselves only a few years later. For instance, these are <a href="../../../www.viva64.com/en/t/0066/default.htm">undefined behavior</a> errors. Such errors can occur when switching to another compiler version or when using other code optimization switches. Another interesting example of hidden errors is discussed in the article "<a href="../../../www.viva64.com/en/k/0041/default.htm">Overwriting memory - why?</a>".</li>
  <li>You can easily and quickly detect misprints and <a href="../../../www.viva64.com/en/a/0068/default.htm">consequences of Copy-Paste usage</a>. Detecting these errors through other methods is usually a too inefficient waste of time and efforts. It's a pity when you have spent an hour on debugging just to find out that the error is in an expression of the "strcmp(A, A)"-kind. People usually don't remember such troubles when discussing typical errors. But practice shows that it takes much time to detect them.</li>
</ol>
<br>
Static code analysis' disadvantages<br>
<ol>
  <li>Static analysis is usually poor regarding diagnosing memory leaks and concurrency errors. To detect such errors you actually need to execute a part of the program virtually. It is too difficult to implement. Such algorithms take too much memory and processor time. Static analyzers usually limit themselves to diagnosing simple cases. A more efficient way to detect memory leaks and concurrency errors is to use dynamic analysis tools.</li>
  <li>A static analysis tool warns you about odd fragments. It means that the code can actually be quite correct. It is called false-positive reports. Only the programmer can understand if the analyzer points to a real error or it is just a false positive. The necessity to review false positives takes work time and weakens attention to those code fragments that really contain errors.</li>
</ol>
<br>
Errors detected by static analyzers are rather diverse. Here is, for example, <a href="../../../www.viva64.com/en/d/default.htm">the list of diagnostics</a> implemented in the PVS-Studio tool. Some analyzers focus on a certain area or type of defects, while others support certain coding standards, for instance, MISRA-C:1998, MISRA-C:2004, Sutter-Alexandrescu Rules, Meyers-Klaus Rules, etc.<br>
<br>
The sphere of static analysis is actively developing; new diagnostic rules and standards appear, while some rules get obsolete. That's why there is no sense in trying to compare analyzers on the basis of defects they can detect. The only way to compare tools is to check them on a set of projects and count the number of real errors they have found. This subject is discussed in detail in the article "<a href="../../../www.viva64.com/en/a/0071/default.htm">Difficulties of comparing code analyzers, or don't forget about usability</a>".<br>
<br>
<h4>Examples of errors detected by static code analysis</h4>
<ul>
  <li><a href="../../../www.viva64.com/en/a/0077/default.htm">90 errors in the open-source projects</a>;</li>
  <li><a href="../../../www.viva64.com/en/a/0074/default.htm">PVS-Studio vs Chromium</a>;</li>
  <li><a href="../../../www.viva64.com/en/b/0120/default.htm">PVS-Studio: analyzing Doom 3 code</a>;</li>
  <li><a href="../../../www.viva64.com/en/b/0108/default.htm">PVS-Studio vs Clang</a>;</li>
  <li><a href="../../../www.viva64.com/en/a/0069/default.htm">Intel IPP Samples for Windows - error correction</a>.</li>
</ul>
<br>
<h4>Myths about static analysis</h4>
<ul>
  <li>The first myth. <a href="../../../www.viva64.com/en/b/0115/default.htm">A static analyzer is a single-use product</a>;</li>
  <li>The second myth. <a href="../../../www.viva64.com/en/b/0116/default.htm">Expert developers do not make silly mistakes</a>;</li>
  <li>The third myth. <a href="../../../www.viva64.com/en/b/0117/default.htm">Dynamic analysis is better than static analysis</a>;</li>
  <li>The fourth myth. <a href="../../../www.viva64.com/en/b/0118/default.htm">Programmers want to add their own rules into a static analyzer</a>;</li>
  <li>The fifth myth. <a href="../../../www.viva64.com/en/b/0119/default.htm">A small test program is enough to evaluate a tool</a>.</li>
</ul>
<br>
<h4>References</h4>
<ol>
  <li>Steve McConnell, "Code Complete, 2nd Edition" Microsoft Press, Paperback, 2nd edition, Published June 2004, 914 pages, ISBN: 0-7356-1967-0.</li>
  <li>Wikipedia. <a href="../../../www.viva64.com/go.phpurl12">Static code analysis</a>.</li>
  <li>Coverity. <a href="../../../www.viva64.com/go.phpurl697">A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World</a>.</li>
  <li>By Walter W. Schilling, Jr. and Mansoor Alam. "<a href="../../../www.viva64.com/go.phpurl816">Integrate static analysis into a software development process</a>".</li>
  <li>Criticism. Mark Dixon. <a href="../../../www.viva64.com/go.phpurl808">Top five reasons not to use static analysis</a>.</li>
</ol>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','9E18T05o');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~97.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='Dj1Rko23')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia9e18t05o'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia9e18t05o'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
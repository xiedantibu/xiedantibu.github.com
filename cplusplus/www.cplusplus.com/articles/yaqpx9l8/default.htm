<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/yaqpx9l8/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Declarations, Prototypes, Definitions, a - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Declarations, Prototypes, Definitions, a</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/esslercuffi/default.htm" rel="author">Esslercuffi</a></b></div>
<div id="I_date">Oct 26, 2014 (last update: Oct 28, 2014)</div>
<h1>Declarations, Prototypes, Definitions, and Implementations</h1>
<div id="I_score">Score: 5.0/5 (3 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<P>Many people, when learning C++, seem to have some confusion about the distinction between and purpose of declarations and definitions. Especially concerning functions or classes. To understand why all this seemingly pedantic and repetitive stuff is necessary, let’s review the build process.</P>
 <br>
<br>
<IMG SRC="comp-link.png" alt="">
<br>
<P>First, each .cpp file is compiled independently. During this process any #include directives will first insert the included file into the .cpp. Compilation then processes the .cpp from top to bottom, generating machine language code and outputting this into an .obj file.  The thing to keep in mind for purposes of this discussion is that it is a single pass process from top to bottom, and that it is completely unaware of anything in other .cpp files. Nor is the compiler even aware of anything in the current .cpp file at any point beyond the point at which it is processing. The code generated by the compiler does not fully resolve memory addressing and function calls.  That’s the job of the linker.  When the compiler encounters a function call in a .cpp file, it usually has no idea what the function does, or how it does it. All the compiler need to know is what parameters are passed and what type the return value is.  The .obj code for the function call can be generated, and the linker will figure out exactly where to make the jump later.</P>
<br>
Now keeping all this in mind we can discuss the real topic.<br>
<br>
<br>
<P><STRONG>DECLARATIONS:</STRONG>
A declaration introduces a name into a scope.  Generally speaking, a scope is either an entire .cpp file or anything in code delimited by {}, be it a function, a loop within a function, or even an arbitrarily placed block of {} within a function. A name introduced, is visible within the scope from the point at which it is declared to the end of that scope.  A declarations merely tells the compiler how to use something, it does not actually create anything.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>extern</var> <var>int</var> y; <cite>// declares y, but does not define it.  y is defined elsewhere,</cite>
              <cite>// but the program can now use it since it knows what it is (an integer) </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
</P>
<br>
<br>
<P><STRONG>PROTOTYPES:</STRONG>
A prototype is just another name for a <STRONG>declaration</STRONG> of a function.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>double</var> someFunction( <var>double</var>, <var>int</var> );</code></pre></td><td class="C_btnholder"></td></tr></table></div>
</P>
<br>
<br>
<P><STRONG>DEFINITIONS:</STRONG>
A definition fully specifies an entity. Definitions are where the actual creation of the entity in memory takes place. All definitions are also declarations, but not all declarations are definitions.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>Int x;  <cite>// declares and defines x.  it is a definition because it creates the variable allocating memory </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
</P>
<br>
<br>
<P><STRONG>IMPLEMENTATIONS:</STRONG>
An implementation is another name for a <STRONG>definition</STRONG> of a function.  That is, the implementation is the actual code of the function itself.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>double</var> someFunction( <var>double</var> x, <var>int</var> y )
{
	<var>return</var> x * y;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
</P>
<br>
Any entity can be declared multiple times, but can only be defined once.<br>
<br>
<br>
<P><H3>Why all this matters to you</H3>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><var>int</var> main()
{
	<var>double</var> a = 3.5;
	<var>int</var> b = 2;
	<var>double</var> c;
	
	c = someFunction( a, b );
}

<var>double</var> someFunction( <var>double</var> x, <var>int</var> y )
{
	<var>return</var> x * y;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Recall that compilation is a single pass top-down process. Because of this, the above code can not work because the compiler gets to the "c = someFunction( a, b );" line and doesn't know how to handle someFunction(). The solution is to have someFunction() declared before this.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><var>double</var> someFunction( <var>double</var>, <var>int</var> );

<var>int</var> main()
{
	<var>double</var> a = 3.5;
	<var>int</var> b = 2;
	<var>double</var> c;
	
	c = someFunction( a, b );
}

<var>double</var> someFunction( <var>double</var> x, <var>int</var> y )
{
	<var>return</var> x * y;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><var>double</var> someFunction( <var>double</var> x, <var>int</var> y )
{
	<var>return</var> x * y;
}

<var>int</var> main()
{
	<var>double</var> a = 3.5;
	<var>int</var> b = 2;
	<var>double</var> c;
	
	c = someFunction( a, b );
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Since a definition is also a declaration, either of the above approaches works.  The first uses a prototype, while the second just moved the definition of someFunction() ahead of the call to it in main().  As a general rule, using prototypes is the preferred method as it allows code to be organized better (you don't have to start at the bottom and work up as you read it) and prevents errors being introduced if code is reorganized.  Also, consider a set of recursive functions in which each calls the other. <br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code>funcA()
{
	<var>if</var>( condition )
		funcB();
	<var>return</var>;
}

funcB()
{
	<var>if</var>( condition )
		funcC();
	<var>return</var>;
}

funcC()
{
	<var>if</var>( condition )
		funcA();
	<var>return</var>;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This may sound bizarre to new students, but it is rather common in certain types of algorithms like sorting and grammar parsing. The thing to note is that there is no way to organize these functions without having at least one prototype somewhere. So do yourself a favor and get into the habit of using prototypes.<br>
<br>
<P><H3>A note about .h and .cpp organization</H3>
All of the above relates directly to how you should organize your code into header files and source files. Most students learning C++ won't be writing programs large enough to require multiple source files for the first month or so of their study. But when they do, I've seen a lot of them get confused about what should be put in which file. The rule of thumb is this: Header files should contain <STRONG>declarations</STRONG>, sourch files should contain <STRONG>definitions</STRONG>.  The reason for this should be fairly clear now. An entity can be declared multiple times, but only defined once. If a header file contains definitions, you can end up with the same entity being defined more than once. This will likely cause problems in the linking process when the linker tries to resolve external addressing and finds multiple entities with the same name.<br>
<br>
For a more thorough discussion about header file organization, see <A HREF="../gw6ac542/default.htm">this article by Disch</A>.</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','yAqpX9L8');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~52.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='ECXiNwbp')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiayaqpx9l8.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiayaqpx9l8'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/4z18t05o/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Clear the screen - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Clear the screen</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/duoas/default.htm" rel="author">Duoas</a></b></div>
<div id="I_date">Apr 28, 2009 (last update: Nov 27, 2011)</div>
<h1>Clear the screen</h1>
<div id="I_score">Score: 4.2/5 (356 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<h2>Contents</h2>
<ul>
  <li>
    <a href="#Introduction">   Introduction     </a>
  </li>
  <li>
    <a href="#OSAgnosticWays"> OS Agnostic ways </a>
    <ul>
      <li><a href="#TheSimpleAnswer"> The Simple Answer </a></li>
      <li><a href="#TheStandardWay">  The Standard Way  </a></li>
      <li><a href="#UsingCurses">     Using Curses      </a></li>
      <li><a href="#UsingConio">      Using &lt;conio.h&gt;   </a></li>
    </ul>
  </li>
  <li>
    <a href="#OSSpecificWays"> OS Specific ways </a>
    <ul>
      <li><a href="#Windows"> Windows API                       </a></li>
      <li><a href="#POSIX">   POSIX (Unix, Linux, Mac OSX, etc) </a></li>
      <li><a href="#Others">  Other systems, like DOS           </a></li>
    </ul>
  </li>
  <li>
    <a href="#Addenda">        Addenda          </a>
    <ul>
      <li><a href="#EscapeCodes"> ANSI Escape Codes              </a></li>
      <li><a href="#HeaderFiles"> Wait, how do I use this stuff? </a></li>
    </ul>
  </li>
</ul>
<br>
<h2><a name="Introduction"></a>Introduction</h2>
This short article describes the method of clearing the console display of all text and positioning the text cursor in the home location (the upper-left corner).<br>
<br>
Before becoming too comfortable doing this kind of thing blithely, make sure you read and understand about the <a href="../../forum/beginner/1988/4/default.htm#msg14423">types and purposes of console applications</a> (and <a href="../../forum/beginner/1988/2/default.htm#msg10636">why it matters</a>).<br>
<br>
<small>Throughout this article the code snippits will not assume either C or C++, so the #include section will be bracketed by the appropriate #ifdef tests depending on which language you are using. If you know yourself to be using just one, you can get rid of everything except for the proper #includes.<br>
<br>
If you don't know what that entails, don't worry about it.</small>
<br>
<br>
<h2><a name="OSAgnosticWays"></a>OS Agnostic Ways</h2><hr>
The following methods are usually supported by a wide variety of platforms, but have significant tradeoffs in functionality or utility or both.<br>
<br>
<h3><a name="TheSimpleAnswer"></a>The Simple Answer</h3>
While simple, it really is a <b>Bad Thing</b>. See <a href="../j3wturfi/default.htm">Why system() is evil</a> for more information.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifdef __cplusplus__</dfn>
  <dfn>#include &lt;cstdlib&gt;</dfn>
<dfn>#else</dfn>
  <dfn>#include &lt;stdlib.h&gt;</dfn>
<dfn>#endif</dfn>

<var>if</var> (system(<kbd>"CLS"</kbd>)) system(<kbd>"clear"</kbd>);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h3><a name="TheStandardWay"></a>The Standard Way</h3>
This method is pathetic, but does the job, and it is usually correct.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifdef __cplusplus__</dfn>

  <dfn>#include &lt;iostream&gt;</dfn>
  <dfn>#include &lt;string&gt;</dfn>

  <var>void</var> ClearScreen()
    {
    cout &lt;&lt; string( 100, <kbd>'\n'</kbd> );
    }

<dfn>#else</dfn>

  <dfn>#include &lt;stdio.h&gt;</dfn>

  <var>void</var> ClearScreen()
    {
    <var>int</var> n;
    <var>for</var> (n = 0; n &lt; 10; n++)
      printf( <kbd>"\n\n\n\n\n\n\n\n\n\n"</kbd> );
    }

<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
This works, of course, just by putting a hundred newlines to the display. Over a poorly-buffered network connection, this might be <i>s l o w</i>. Alas.<br>
<br>
<h3><a name="UsingCurses"></a>Using Curses</h3>
The Curses library is designed for working with the console. Advantages: it is cross-platform. Disadvantages: it doesn't interact well with the standard streams. In other words, you shouldn't mix <b>printf</b>() and the like or <b>cout</b> and the like with Curses. Use Standard I/O or Curses, but not both. (You can still employ Standard I/O with things other than the terminal, of course.)<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;curses.h&gt;</dfn>

<var>int</var> main()
  {
  <var>char</var> users_name[ 100 ];

  initscr();
  (<var>void</var>)echo();

  addstr( <kbd>"What is your name&gt; "</kbd> );
  refresh();
  getnstr( users_name, <var>sizeof</var>( users_name ) - 1 );

  <cite>/* Here is where we clear the screen.                  */</cite>
  <cite>/* (Remember, when using Curses, no change will appear */</cite>
  <cite>/* on the screen until &lt;b&gt;refresh&lt;/b&gt;() is called.     */</cite>
  clear();

  printw( <kbd>"Greetings and salutations %s!\n"</kbd>, users_name );
  refresh();

  printw( <kbd>"\n\n\nPress ENTER to quit."</kbd> );
  refresh();
  getnstr( users_name, <var>sizeof</var>( users_name ) - 1 );

  endwin();
  <var>return</var> 0;
  }  </code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Again, if all you want to do is clear the screen on occasion, then it is complete overkill to use Curses. (If you <i>do</i> use Curses, see <a href="../../../www.gnu.org/s/ncurses/default.htm"><b>NCurses</b></a> for Unix and Linux and other POSIX systems, and <a href="default.htm"><b>PDCurses</b></a> for DOS, Windows, OS/2, and some other random systems.)<br>
<br>
<h3><a name="UsingConio"></a>Using &lt;conio.h&gt;</h3>
This library is severely deprecated, but it is so popular (due to <a href="../../../www.faqs.org/docs/jargon/h/hysterical-reasons.html">hysterical raisins</a>) that some form of it exists on most 80x86 hardware compilers --almost always on Windows compilers, and there exist Linux versions too. However, given the choice, use <a href="#UsingCurses">Curses</a> instead...<br>
<br>
The caveat is that it is <b>non-standard</b>, meaning that the actual functions it provides vary a lot and they don't always behave just right. Hence, for anything other than Windows programs it is also a sub-optimal solution. (See <a href="../../../en.wikipedia.org/wiki/conio.h">Wikipedia's Conio article</a> for a very succinct description of its limitations.)<br>
<br>
If undaunted, then here is some code:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code>#include &lt;conio.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main()
  {
  char users_name[ 100 ];

  printf( "What is your name&gt; " );
  fgets( users_name, sizeof( users_name ), stdin );
  *strchr( users_name, '\n' ) = '\0';

  /* Here is where we clear the screen */
  clrscr();

  printf( "Greetings and salutations %s!\n", users_name );

  printf( "\n\n\nPress ENTER to quit." );
  fgets( users_name, sizeof( users_name ), stdin );

  return 0;
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Now, the enterprising among you may have already tried to compile this. If it worked for you, then you are lucky. If not, then you have learned firsthand the shortcomings of the &lt;conio.h&gt; library. Alas.<br>
<br>
<br>
<h2><a name="OSSpecificWays"></a>OS Specific Ways</h2><hr>
So, on to the part for those of us who have the hack nature: we want to do it the <i>Right Way</i>.<br>
<br>
<h3><a name="Windows"></a>Windows API</h3>
The Windows Console has a specific-size <i>buffer</i> of cell data, organized exactly the same as the old EGA/VGA/HGC cards but with user-specified dimensions: each "cell" contains attribute information (colors) and a character code (for simplicity, you can consider this the ASCII code -- its actual meaning depends on the current <b>Code Page</b>). Clearing the screen is, therefore, a simple method of writing the current character attribute and a space character to every cell on the screen, then positioning the cursor at (0,0).<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;windows.h&gt;</dfn>

<var>void</var> ClearScreen()
  {
  HANDLE                     hStdOut;
  CONSOLE_SCREEN_BUFFER_INFO csbi;
  DWORD                      count;
  DWORD                      cellCount;
  COORD                      homeCoords = { 0, 0 };

  hStdOut = GetStdHandle( STD_OUTPUT_HANDLE );
  <var>if</var> (hStdOut == INVALID_HANDLE_VALUE) <var>return</var>;

  <cite>/* Get the number of cells in the current buffer */</cite>
  <var>if</var> (!GetConsoleScreenBufferInfo( hStdOut, &amp;csbi )) <var>return</var>;
  cellCount = csbi.dwSize.X *csbi.dwSize.Y;

  <cite>/* Fill the entire buffer with spaces */</cite>
  <var>if</var> (!FillConsoleOutputCharacter(
    hStdOut,
    (TCHAR) <kbd>' '</kbd>,
    cellCount,
    homeCoords,
    &amp;count
    )) <var>return</var>;

  <cite>/* Fill the entire buffer with the current colors and attributes */</cite>
  <var>if</var> (!FillConsoleOutputAttribute(
    hStdOut,
    csbi.wAttributes,
    cellCount,
    homeCoords,
    &amp;count
    )) <var>return</var>;

  <cite>/* Move the cursor home */</cite>
  SetConsoleCursorPosition( hStdOut, homeCoords );
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<h3><a name="POSIX"></a>POSIX (Unix, Linux, Mac OSX, etc)</h3>
Unix systems are not so simple. While PC hardware follows a very strict standard, Unix systems work with more than a few different kinds of hardware. (Hundreds, actually.) In an effort to make writing programs for all these different types of terminals easier, a fellow by the name of Bill Joy wrote the <a href="../../../en.wikipedia.org/wiki/termcap">termcap</a> library, which has been (long since) superceded by the <a href="../../../en.wikipedia.org/wiki/terminfo">terminfo</a> library, first programmed by Mark Horton and significantly updated and maintained by Eric S. Raymond.<br>
<br>
The terminfo database and library makes querying and using advanced terminal features relatively easy. The caveat is, of course, you may be stuck on some ancient dinosaur that does not support the feature you desire, like "clear and home". (Fortunately, the vast majority of modern terminals do.)<br>
<br>
Fortunately, since the terminal can do this stuff, the resulting code is quite a bit shorter than the Windows version:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;unistd.h&gt;</dfn>
<dfn>#include &lt;term.h&gt;</dfn>

<var>void</var> ClearScreen()
  {
  <var>if</var> (!cur_term)
    {
    <var>int</var> result;
    setupterm( NULL, STDOUT_FILENO, &amp;result );
    <var>if</var> (result &lt;= 0) <var>return</var>;
    }

  putp( tigetstr( <kbd>"clear"</kbd> ) );
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
You'll have to link to the proper library (one of <span class="auto"><code class="source">-lcurses</code></span>, <span class="auto"><code class="source">-lterminfo</code></span>, etc) to compile that last one. If neither of those work, you will have to ask your system administrator what to link to. I know that on some old SunSPARC workstations you have to link with <span class="auto"><code class="source">-lncurses</code></span> to get the proper library.<br>
<br>
<h3><a name="Others"></a>Other systems, like DOS</h3>
This article specifically addresses modern systems. If you are using an older system, such as DOS or something really weird, you will have to look up your system's documentation. For example, on DOS, you would have to use the <a href="../../../en.wikipedia.org/wiki/int_10h">Video Interrupt functions</a> to do it, or, as optimized programs often did, simply write directly to video memory. The ins and outs of this kind of thing are ancient, esoteric stuff. Good luck!<br>
<br>
<br>
<h2><a name="Addenda"></a>Addenda</h2><hr>
This article, as it originally appeared, attracted some commentary, both good and bad. What follows is edited from that commentary to answer some valid questions.<br>
<br>
<br>
<h3><a name="EscapeCodes"></a>ANSI Escape Codes</h3>
Why not just emit an ANSI Escape code, like <span class="auto"><code class="source">printf( <kbd>"\033[2J"</kbd> );</code></span>?<br>
<br>
The answer is that it might not work. As explained above in <a href="#POSIX">the introduction to the POSIX code</a>, not all terminals take the ANSI/VT100+ escape sequences. (DOS and Windows, remember, has the suboptimal solution of requiring your <i>user</i> to have loaded ANSI.SYS -- just to use a small subset of those escape sequences!) But beyond that, it is actually possible that the terminal gets something <i>other</i> than what you think, because stuff that you <b>printf</b>() might be modified some before it gets to the terminal itself!<br>
<br>
The best way to do it on *nix systems is to use the <b>putp</b>() function to properly communicate with the terminal, and to use the <b>tigetstr</b>() function(s) to get the proper terminal escape sequence to send. It may very well be "\033[2J". It might not. If you use the terminfo database, your program will work almost everywhere, instead of mysteriously printing garbage or failing on a good number of systems.<br>
<br>
On Windows, do things the Windows way.<br>
<br>
<br>
<h3><a name="HeaderFiles"></a>Wait, how do I use this stuff?</h3>
This doesn't technically belong here, but the question came up about actually using this code. All the above examples are snippets, which you should know how to properly integrate into your program. For simple stuff, it is enough to just copy and paste the code into your program somewhere before it is used.<br>
<br>
However, if you really want to get fancy and use multiple files, here is the quick-n-dirty:<br>
<br>
Do not define functions in header files. You should only prototype them.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code><cite>// clearscreen.h</cite>
<cite>// #include &lt;disclaimer.h&gt;</cite>

<dfn>#ifndef CLEARSCREEN_H</dfn>
<dfn>#define CLEARSCREEN_H</dfn>

<var>void</var> ClearScreen();

<dfn>#endif </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The source code goes in a separate .cpp file.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>// clearscreen.cpp</cite>
<cite>// #include &lt;disclaimer.h&gt;</cite>

<dfn>#include "clearscreen.h"</dfn>

<cite>// Paste one of the above ClearScreen code snippets here.</cite>
<cite>// For example, here's the POSIX stuff:</cite>
<dfn>#include &lt;unistd.h&gt;</dfn>
<dfn>#include &lt;term.h&gt;</dfn>

<var>void</var> ClearScreen()
  {
  <var>if</var> (!cur_term)
    {
    <var>int</var> result;
    setupterm( NULL, STDOUT_FILENO, &amp;result );
    <var>if</var> (result &lt;= 0) <var>return</var>;
    }

  putp( tigetstr( <kbd>"clear"</kbd> ) );
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
To use the code, you need to do two things.<br>
<br>
First, you need to #include "clearscreen.h" and use it as you would any other library.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;limits&gt;</dfn>
<dfn>#include &lt;clearscreen.h&gt;</dfn>

<var>int</var> main()
  {
  ClearScreen();
  std::cout &lt;&lt; <kbd>"Hello world!\n\nPress ENTER to quit."</kbd>;
  std::cin.ignore( std::numeric_limits &lt;std::streamsize&gt; ::max(), <kbd>'\n'</kbd> );
  <var>return</var> 0;
  }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Second, you must add "clearscreen.cpp" to your project so that it is compiled and linked also. If you port your code to another platform, all you need to do is compile a different "clearscreen.cpp" file to link with your code.<br>
<br>
<br>
Well, that's it for now. Enjoy!</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','4z18T05o');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~97.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='i8vCpfjN')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgia4z18t05o.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgia4z18t05o'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
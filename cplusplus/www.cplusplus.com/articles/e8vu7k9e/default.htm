<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/e8vu7k9e/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Strings Obfuscation System - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Strings Obfuscation System</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/michael_haephrati/default.htm" rel="author">Michael Haephrati</a></b></div>
<div id="I_date">Aug 8, 2014 (last update: Aug 28, 2014)</div>
<h1>Strings Obfuscation System</h1>
<div id="I_score">Score: 4.6/5 (6 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<BLOCKQUOTE>
<br>
A string obfuscation system that integrates in a Visual Studio C++ solution<br>
<P><a href="../../../www.codeproject.com/script/membership/view.aspxmid5956881"target="_blank"title="Michael Haephrati">&nbsp;Michael Haephrati</a>, <a href="../../../www.codeproject.com/script/awards/mvpwinners.aspx"target="_blank" title="Michael Haephrati - Code Project MVP 2013">CodeProject MVP 2013</a></P>
<LI><A HREF="sourcecode.zip">Download source code - 16 KB</A></LI>
<br>
<br>
<H2><B>Introduction</B></H2>
<P>The purpose of obfuscators in general is to hide program code, flow, and functionality. If your program uses an algorithm that is a trade secret, obfuscation will make it harder to reverse engineer it and reveal this trade secret. But what about hiding the data inside the executable? Some people say that is almost impossible to achieve. Since the problem needs to be able to read this data, the data must be there, and if it is there, it can be revealed eventually. In my opinion, a well obfuscated program, can make it next to impossible to guess where the data is kept (encrypted), and even if the data is found, to obfuscate it using strong encryption.<br>
<br>
<H2><B>The Solution</B></H2>
<P>The set of tools I will introduce in this article, were developed for the purpose of encrypting strings within applications.</p>
Usually, an application can reveal a great deal of information about itself, even without having to reverse engineer it. When you open an application such as <I>Calc.exe</I> from a Hex editor (or from Notepad as a text editor), you can find strings like:<br>
<br>
<IMG SRC="strings_found_in_calc.jpg" alt="">
<p>An example of strings that create a risk if kept non encrypted, is passwords. If your software connects to an Internet service, SMS gateway or a FTP server, and send a password, this password will be visible to anyone who opens the executable of your application with any textual editor.</P>
<br>
<H2><B>Background</B></H2>
<P>I have read <A HREF="../../../www.codeproject.com/script/membership/view.aspxmid42"target="_blank">Chris Losinger</A>'s  <A HREF="../../../www.codeproject.com/articles/2724/literal-string-encryption-as-part-of-the-build-pro"target="_blank">excellent article</A> and wanted to take it to the next level by creating a stronger encryption (AES-256) and to support more variations and string types, including UNICODE, double and single byte strings.</P>
<P>The purpose of this tool is professional use, and not just being a proof of concept.</P>
<br>
<H2><B>The Source Code</B></H2>
<P>The encryption / decryption mechanism integrate as two separate projects which need to be added to your Visual Studio solution. The two projects are in the main folder:</P>
<blockquote> <br>
a. The obfisider project.<br>
b. The obfuscase project.<br>
</blockquote> <br>
<H2><B>The Obfisider and the Obfuscate Projects</B></H2>
<P>The Obfisider project contains the AES encryption part. The Obfuscate project contains the necessary parts to scan a solution, and each project it contains, and to encrypt the strings found.</P>
<br>
<B>Scanning a Solution</B>
<p>Solutions are scanned using <STRONG> parseSolution </STRONG>  which calls another function named <STRONG> parseProject </STRONG> .</P>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br></code></pre></td>
<td class="source"><pre><code><var>static</var> strList parseSolution( <var>const</var> <var>char</var> * solName  )
{
  strList result;
  <var>static</var> <var>char</var> drive[_MAX_DRIVE];
  <var>static</var> <var>char</var> somepath[_MAX_PATH];
  <var>static</var> <var>char</var> buffer[_MAX_PATH];
  <var>static</var> <var>char</var> path[_MAX_PATH];
  <var>static</var> <var>char</var> ext[_MAX_EXT];
  _splitpath( solName, drive, somepath, buffer, ext );
  FILE * f = fopen( solName, <kbd>"r"</kbd> );
  <var>if</var>( NULL == f )
  {
    printf(<kbd>"ERROR: Solution %s is missing or unavailable.\n"</kbd>, solName );
    exit(1);
  }
  <var>while</var>( !feof(f) )
  {
    <var>char</var> * res = fgets( buffer, <var>sizeof</var>(buffer), f );
    <var>if</var>( NULL == res )
      <var>continue</var>;
    <var>if</var>( NULL != strstr(buffer, <kbd>"Project("</kbd>) )
    {
      <var>char</var> * ptrName = strchr( buffer, <kbd>'='</kbd> );
      <var>char</var> * ptrFile = strchr( ptrName, <kbd>','</kbd> );
      *ptrFile++ = 0;
      <var>char</var> * ptrEnd  = strchr( ptrFile, <kbd>','</kbd> );
      *ptrEnd++  = 0;
      
      <var>while</var>( (<kbd>'='</kbd> == *ptrName) 
           ||(<kbd>' '</kbd> == *ptrName)
           ||(<kbd>'"'</kbd> == *ptrName) ) ptrName++;
      <var>if</var>( <kbd>'"'</kbd> == ptrName[strlen(ptrName)-1] )
        ptrName[strlen(ptrName)-1] = 0;
      <var>while</var>( (<kbd>' '</kbd> == *ptrFile)
           ||(<kbd>'"'</kbd> == *ptrFile) ) ptrFile++;
      <var>if</var>( <kbd>'"'</kbd> == ptrFile[strlen(ptrFile)-1] )
        ptrFile[strlen(ptrFile)-1] = 0;
      _makepath( path, drive, somepath, ptrFile, NULL );
      
      result.push_back( std::string(path) );
    }
  }
  fclose(f);
  <var>return</var> result;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The <STRONG> parseProject </STRONG> function extract the relevant files from a given project. Relevant files means : .c, .cpp, .h and .hpp files.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br></code></pre></td>
<td class="source"><pre><code><cite>/**
 * Parse project and extract fullpath source filename from project.
 */</cite>
<var>static</var> strList parseProject( <var>const</var> <var>char</var> * projName  )
{
  strList result;
  <var>static</var> <var>char</var> drive[_MAX_DRIVE];
  <var>static</var> <var>char</var> somepath[_MAX_PATH];
  <var>static</var> <var>char</var> buffer[_MAX_PATH];
  <var>static</var> <var>char</var> path[_MAX_PATH];
  <var>static</var> <var>char</var> ext[_MAX_EXT];
  _splitpath( projName, drive, somepath, buffer, ext );
  FILE * f = fopen( projName, <kbd>"r"</kbd> );
  <var>if</var>( NULL == f )
  {
    printf(<kbd>"ERROR: Project %s is missing or unavailable.\n"</kbd>, projName );
    exit(1);
  }
  <var>while</var>( !feof(f) )
  {
    <var>char</var> * res = fgets( buffer, <var>sizeof</var>(buffer), f );
    <var>if</var>( NULL == res )
      <var>continue</var>;
    <var>if</var>( (NULL != strstr(buffer, <kbd>"&lt;ClInclude Include="</kbd>))
      ||(NULL != strstr(buffer, <kbd>"&lt;ClCompile Include="</kbd>)) )
    {
      <var>char</var> * ptrName = strchr( buffer, <kbd>'='</kbd> );
      <var>char</var> * ptrName1 = strstr( buffer, <kbd>"/&gt;"</kbd> );
  <var>if</var>( NULL != ptrName1 ) *ptrName1 = 0;
      <var>while</var>( (<kbd>'='</kbd> == *ptrName) 
           ||(<kbd>' '</kbd> == *ptrName)
           ||(<kbd>'"'</kbd> == *ptrName) ) ptrName++;
      <var>while</var>( (<kbd>'"'</kbd> == ptrName[strlen(ptrName)-1])
   ||(<kbd>' '</kbd> == ptrName[strlen(ptrName)-1])
           ||(<kbd>'\n'</kbd> == ptrName[strlen(ptrName)-1]))
        ptrName[strlen(ptrName)-1] = 0;
      _makepath( path, drive, somepath, ptrName, NULL );
      result.push_back( std::string(path) );
    }
  }
  fclose(f);
  <var>return</var> result;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<B>The AES_Encode function</B>
<br>
<P>This function handles the encryption of the strings using AES-256:</P>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br></code></pre></td>
<td class="source"><pre><code><cite>/* -------------------------------------------------------------------------- */</cite>
<var>int</var> AES_encode_a( <var>unsigned</var> <var>int</var> key_start, <var>const</var> <var>wchar_t</var> * plainString, <var>unsigned</var> <var>char</var> * outbuf, <var>unsigned</var> outlen )
{
  <var>unsigned</var> <var>char</var> key[32];
  aes_key key_context = {0};
  <var>int</var> i;
  <var>unsigned</var> <var>char</var> offset;
  <cite>/** Calculate required size */</cite>
  <var>int</var> retval = (wcslen(plainString) + 1);
  <cite>/** Round to 16 byte over */</cite>
  retval = ((retval + 15)&amp;(~0xF)) + 4;
  <cite>/** Memory request */</cite>
  <var>if</var>( NULL == outbuf )
    <var>return</var> -retval;
  <cite>/** Not enought memory */</cite>
  <var>if</var>( outlen &lt; retval )
    <var>return</var> 0;
  <cite>/** Prepare output buffer */</cite>
  memset( outbuf, 0, retval );
<cite>//  wcscpy( (char*)(outbuf+4), plainString );</cite>
  WideCharToMultiByte( CP_ACP, 0, plainString, -1, (outbuf+4), retval-<var>sizeof</var>(<var>unsigned</var>),NULL, NULL);
  *((<var>unsigned</var>*)outbuf) = key_start;
  <cite>/** Prepare key */</cite>
  srand(key_start);
  <var>for</var>( i = 0; i &lt; <var>sizeof</var>(key); i++ )
    key[i] = rand();
  aes_prepare( &amp;key_context, key );
  memset( key, 0, <var>sizeof</var>(key) );
  <var>for</var>( i = 4; i &lt; retval; i += 16 )
  {
    aes_encrypt_block( &amp;key_context, &amp;outbuf[i] );
  }
  memset( &amp;key_context, 0, <var>sizeof</var>(key_context) );
  <var>return</var> retval;
}
<cite>/* -------------------------------------------------------------------------- */</cite> </code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<B>The AES_Decode function</B>
<br>
<P>This function handles the decryption of the strings back:</P>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><cite>/* -------------------------------------------------------------------------- */</cite>
<var>static</var> <var>int</var> AES_decode( <var>const</var> <var>unsigned</var> <var>char</var> * inbuf, <var>unsigned</var> inlen, <var>void</var> *plainString, <var>unsigned</var> stringSize )
{
  <var>unsigned</var> <var>char</var> key[32];
  aes_key key_context = {0};
  <var>int</var> i;
  BYTE * outbuf = (BYTE*)plainString;
  <var>if</var>( NULL == plainString )
    <var>return</var> -inlen;
  <var>if</var>( stringSize &lt; inlen )
    <var>return</var> 0;
  <cite>/** Prepare output buffer */</cite>
  memcpy( outbuf, inbuf, inlen );
  <cite>/** Prepare key */</cite>
  <var>for</var>( i = 0; i &lt; <var>sizeof</var>(key); i++ )
    key[i] = rand();
  aes_prepare( &amp;key_context, key );
  memset( key, 0, <var>sizeof</var>(key) );
  <var>for</var>( i = 0; i &lt; inlen; i += 16 )
  {
    aes_decrypt_block( &amp;key_context, &amp;outbuf[i] );
  }
  memset( &amp;key_context, 0, <var>sizeof</var>(key_context) );
  <var>return</var> inlen;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<B>Decoding the strings back</B>
<br>
<P>ASCII strings are decoded using the following function ( __ODA__ ):</P>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>/* -------------------------------------------------------------------------- */</cite>
<var>char</var>* __ODA__( <var>const</var> <var>char</var> * enc_str )
{
  <var>int</var> i, size = strlen( enc_str )/2;
  <var>unsigned</var> <var>char</var> * inBuff = NULL;
  <var>unsigned</var> key = 0;
  PDECODED_LIST ptr = &amp;charList;
  <var>char</var>     * result = a_text_err;

  <var>while</var>( NULL != ptr-&gt;next )
  {
  <var>if</var>( ptr-&gt;org_str == enc_str )
  <var>return</var> ((<var>char</var>*)ptr+<var>sizeof</var>(DECODED_LIST));
  ptr = ptr-&gt;next;
  }
  <var>if</var>( NULL == (inBuff = (<var>unsigned</var> <var>char</var>*)malloc( size )) )
    <var>return</var> result; <cite>// a_text_error</cite>
  <var>if</var>( NULL == (ptr-&gt;next = (PDECODED_LIST)malloc( size + <var>sizeof</var>(DECODED_LIST) )) )
  {
    free( inBuff );
    <var>return</var> result; <cite>// a_text_error</cite>
  }
  ptr = ptr-&gt;next;
  ptr-&gt;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
When the string is UNICODE, the following function <STRONG>(__ODC__)</STRONG> is used:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>/* -------------------------------------------------------------------------- */</cite>
<var>wchar_t</var>* __ODC__( <var>const</var> <var>char</var> * enc_str )
{
  <var>int</var> i, size = strlen( enc_str )/2;
  <var>unsigned</var> <var>char</var> * inBuff = NULL;
  <var>unsigned</var> key = 0;
  PDECODED_LIST ptr = &amp;wcharList;
  <var>wchar_t</var>     * result = w_text_err;

  <var>while</var>( NULL != ptr-&gt;next )
  {
     <var>if</var>( ptr-&gt;org_str == enc_str )
     <var>return</var> (<var>wchar_t</var>*) ((<var>char</var>*)ptr+<var>sizeof</var>(DECODED_LIST));
     ptr = ptr-&gt;next;
  }
  <var>if</var>( NULL == (inBuff = (<var>unsigned</var> <var>char</var>*)malloc( size )) )
    <var>return</var> result; <cite>// w_text_error</cite>
  <var>if</var>( NULL == (ptr-&gt;next = (PDECODED_LIST)malloc( size + <var>sizeof</var>(DECODED_LIST) )) )
  {
    free( inBuff );
    <var>return</var> result; <cite>// w_text_error</cite>
  }
  ptr = ptr-&gt;next;
  ptr-&gt;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<H2><B>How to use</B></H2>
<P>Set project dependencies so the main executable or DLL your solution is generating depends on the "obfinsider" project.</P>
<P>The 'obfinsider' project must depend on the other project – the 'obfuscate' project. This will automatically include obfinsider.lib, but in case you make changes that break this dependency, please add <I>obfisider.lib</I> manually.</P>
<H2><B>How it works</B></H2>
<br>
<B>The Process</B>
<br>
<P>'obfuscate' is built first and after build is completed, a Post Build event takes place. The Post Build event calls obfuscate along with the entire solution file as its parameter.</P>
<br>
<B>The Files Scan</B>
<P>Obfuscate scans the given solution and works on each relevant file in it. The current version requires that no spaces will exist in this path, and if there are spaces, the proper way "obfuscate" should be called would be:</P>
<br>
<span class="auto"><code class="source"><kbd>"$(TargetPath)"</kbd> <kbd>"$(SolutionPath)"</kbd></code></span>
<br>
<br>
<P>"obfuscate" scans the solution for all project files, but process the following file types: .c, .cpp, .h and .hpp.</P>
<br>
<B>The Work</B>
<br>
Per each file, the following checks are made:<br>
<BLOCKQUOTE>
  a. Obfuscated files are skipped<br>
 <P> b."obfuscate" doesn't process itself, so its own files are skipped.</P>
 <P> c. Comments are skipped. This includes:</P></BLOCKQUOTE>
<span class="auto"><code class="source"><cite>// this is a comment </cite></code></span>
     <P>and</P>
<span class="auto"><code class="source"><cite>/*  this a another comment */</cite> </code></span>
 <BLOCKQUOTE><P>  d.<STRONG>#include</STRONG> and <STRONG>#pragma</STRONG> declarations are skipped.</P>
<P>   e.Initialized global strings are ignored. If you look at the following example:</P>
</BLOCKQUOTE>
<br>
<br>
<span class="auto"><code class="source">Static <var>char</var> c[]=<kbd>"test string"</kbd>;</code></span>
<BLOCKQUOTE>
<P>f. For all other strings, "obfuscate" looks for the original declaration and replaces it with a calls to the decryption function, along with the encrypted string as its parameter.</P>
</BLOCKQUOTE>
<P>For easy maintenance, the original line is preserves as kept as a commented line above the new line.</P>
<br>
<H2><B>ASCII vs. Unicode</B></H2>
<P>The system distinguishes between ASCII and Unicode text. Two separate sets of functions are used per each type.</P>
<br>
The following statement:<br>
<br>
<span class="auto"><code class="source">wcscpy(mystring, <kbd>"my text"</kbd>);</code></span>
 <P>or</P>
<span class="auto"><code class="source">wcscpy(mystring, _T(<kbd>"my text"</kbd>));</code></span>
<p>
will be detected as Unicode type and will be replaced with a call to <STRONG>__ODC__</STRONG> while similar ASCII statements:</P>
<br>
<span class="auto"><code class="source">strcpy(mystring, <kbd>"my text"</kbd>);</code></span>
<br>
<P>will be detected as such as will be replaced with a call to <STRONG>__ODA__</STRONG>.</P>
<br>
<H2><B>Encryption and Encoding Scheme</B></H2>
<P><BLOCKQUOTE>
1. Each string is encrypted separately with an ad-hoc generated encryption key.</P>
<P>2. This key is generated randomly, while the SEED value for the random number generated is set at the start of the application.</P>
<P>3. All strings are padded with NULL characters to round them so their length match an entire number of encryption blocked, which are required by the AES-256 encryption scheme.</P>
<P>4. The result, is in a binary form, and is represented as a printable set of characters using the following algorithm:</BLOCKQUOTE></P>
<UL>     <br>
 <P><BLOCKQUOTE><li>Each byte is split by half. Higher half is encoded first and then the 2nd half. For example: 0xAF is split into: 0xA and 0xF. </li>
<P><li>The encoded value is the Delta between the preview value and the new value (initial value is "A").</li></P></BLOCKQUOTE>
<P><I>For example: value 0x3 is set as a result of shifting from character "A" and "D" (0x40+0x3==0x43).</I></P>
<P>5. When the shifted value reaches 0x7E, the initial value of "A" is subtracted from this value.</P>
<P><BLOCKQUOTE><I>For example: if Last value was 'z' (code 0x7A) and encoded value is 0xF, then the new value will be encoded as character '+' ( code 0x2B == 0x7A + 0xF - (0x7E-0x20) )</I></BLOCKQUOTE></P>
</UL>
<H2><B>Example</B></H2>
<P>The following statement:</P>
<br>
<span class="auto"><code class="source">wprintf(L<kbd>"This is a test\n"</kbd> );</code></span>
<br>
<P>will be replaced with the following lines:</P>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><cite>/*  wprintf( L"This is a test\n" );*/</cite>
wprintf( __ODC__(<kbd>"IPPXXXXXbmm|\"$%.=KXfgpx#-;DPZiw}$$*0=APR[\\epy##$.27EKXXdhq}#/00&gt;DEOVVW]"</kbd>; </code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<H2><B>Limitations</B></H2>
<P>It is impossible to cover all variations in which strings may appear in a C / C++ project, even though I have done my best to cover most of them. Since one can initialize a one-dimensional character array by specifying:<br>
<BLOCKQUOTE>
<LI>A brace-enclosed comma-separated list of constants, each of which can be contained in a character</LI>
<LI>A string constant (braces surrounding the constant are optional)</LI>
</BLOCKQUOTE></P>
For example:<br>
<br>
<span class="auto"><code class="source"><var>static</var> <var>char</var> a[]=<kbd>"some_string"</kbd>; </code></span>  <br>
<br>
<P>When the size of the array is not set, it is impossible to encrypt the predefined contents as the real size isn't know at the time of compilation.</P>
<P>Another example where such system will not be able to encrypt is referred to as "Hidden Merging":</P>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><dfn>#define PRODUCT_NAME "MyProduct"</dfn>
<dfn>#define PRODUCT_FOLDER "MyFolder"</dfn>
<dfn>#define WORK_PATH PRODUCT_NAME "/" PRODUCT_FOLDER  </dfn></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h2>License</h2>
<P>This article, along with any associated source code and files, is licensed under <a href="../../../www.opensource.org/licenses/cddl1.php" rel="license"target="_blank">The Common Development and Distribution License (CDDL)</a></P>
<br>
<h2 id="ctl00_AboutHeading">About the Author</h2>
<BLOCKQUOTE><IMG SRC="mr.m.png" alt=""></BLOCKQUOTE>
<a href="../../../www.codeproject.com/members/mhaephrati"target="_blank"><B>Michael N. Haephrati</B></a>, is an entrepreneur, inventor and a musician. Haephrati worked on many ventures starting from HarmonySoft, designing Rashumon, the first Graphical Multi-lingual word processor for Amiga computer. During 1995-1996 he worked as a Contractor with <a rel="nofollow"href="../../../www.apple.com/default.htm"target="_blank">Apple </a> at Cupertino. Worked at a research institute made the fist steps developing the credit scoring field in Israel. He founded Target Scoring and developed a credit scoring system named ThiS, based on geographical statistical data, participating VISA CAL, Isracard, Bank Leumi and Bank Discount (Target Scoring, being the VP Business Development of a large Israeli institute).<br>
During 2000, he founded Target Eye, and developed the first remote PC surveillance and monitoring system, named <a rel="nofollow" title="Target Eye" href="../../../www.targeteye.biz/default.htm"target="_blank">Target Eye</a>.<br>
<br>
Other ventures included: <a rel="nofollow" title="Data Optimization" href="../../../dataoptimisation.wordpress.com/default.htm"target="_blank">Data Cleansing</a> (as part of the <a rel="nofollow" title="DataTune by Michael Haephrati" href="../../../datatune.wordpress.com/default.htm"target="_blank">DataTune&nbsp;</a> system which was implemented in many organizations. <br>
<br>
<br>
<br>
<a rel="nofollow" href="../../../httpstwitter.com/haephrati"class="twitter-follow-button"data-show-count="false"data-size="large"target="_blank">Follow @haephrati</a>
<br>
<br>
Follow on   <a href="../../../www.twitter.com/haephratirelauthor"rel="author" class="small-text"target="_blank">Twitter</a>, <a href="../../../httpsplus.google.com/103057860647722688896relauthor"rel="author" class="small-text"target="_blank">Google</a>, <a href="../../../www.linkedin.com/profile/viewid344149159"rel="author" class="small-text"target="_blank">LinkedIn</a>   <br>
<br>
<br>
<br>
<a href="../ewa0rxsz/default.htm">Article Top</a>
<br>
<br>
<br>
<br>
</BLOCKQUOTE><p>Attachments:
	[<a href="sourcecode.zip">SourceCode.zip</a>]
</p>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','E8vU7k9E');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~31.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='Lhv7X9L8')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiae8vu7k9e.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiae8vu7k9e'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
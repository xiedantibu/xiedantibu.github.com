<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/iy6ac542/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Virtual Method Table and accident preven - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Virtual Method Table and accident preven</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/andreykarpov/default.htm" rel="author">AndreyKarpov</a></b></div>
<div id="I_date">Oct 10, 2014 (last update: Oct 10, 2014)</div>
<h1>Virtual Method Table and accident prevention</h1>
<div id="I_score">Score: 0.0/5 (0 votes)</div>
<div id="I_stars"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<IMG SRC="image1.png" alt="">
<br>
As a small warm-up before the article, I would like readers to ask themselves: does a photographer need to know how camera works in order to make qualitative photos? Well, does he need to know the term "diaphragm" at least? "Signal-to-noise ratio"? "Depth of field"? Practice shows that even with a knowledge of such difficult terms photos shot by the most "gifted ones" may be just a little bit better that photos shot by cell phone camera through 0.3 MP "hole". Alternatively, good quality photos may be shot due to the outstanding experience and intuition without any knowledge whatsoever (but usually it is an exception to the rules). Nevertheless, it is unlikely that there is somebody who can argue with me in the fact that professionals who want to get every single possibility from their camera (not only MP in a square millimeter on an image sensor) are required to know these terms, or else they cannot be called professionals at all. That is true not only in digital photography, but in almost every other industry as well.<br>
<br>
That is also true for programming, and for programming on C++ it is true twice as much. In this article, I shall explain an important language feature, known as virtual table pointer, which is included in almost every nontrivial class, and how it can accidentally be damaged. Damaged virtual table pointer may lead to very difficult to fix errors. First, I am going to recall what virtual table pointer is, and then I shall share my thoughts what and how can be broken there.<br>
<br>
To my regret, in this article will be a lot of reasoning related to low level. However, there is no other way to illustrate the problem. In addition, I should tell that this article is written for Visual C++ compiler in 64-bit mode - results may differ with usage of other compilers and other target systems.<br>
<br>
<h2>Virtual table pointer</h2>
<br>
In theory, it is said that vptr pointer, virtual table poiner, or vpointer, is stored in every class that has at least one virtual method. Let us puzzle out what a thing is this. For this, let us write a simple demo program on C++.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;iomanip&gt;</dfn>
<var>using</var> <var>namespace</var> std;
<var>int</var> nop() {
  <var>static</var> <var>int</var> nop_x; <var>return</var> ++nop_x; <cite>// Don't remove me, compiler!</cite>
};

<var>class</var> A
{
<var>public</var>:
  <var>unsigned</var> <var>long</var> <var>long</var> content_A;
  A(<var>void</var>) : content_A(0xAAAAAAAAAAAAAAAAull)
      { cout &lt;&lt; <kbd>"++ A has been constructed"</kbd> &lt;&lt; endl;};
  ~A(<var>void</var>) 
      { cout &lt;&lt; <kbd>"-- A has been destructed"</kbd> &lt;&lt; endl;};

  <var>void</var> function(<var>void</var>) { nop(); };
};

<var>void</var> PrintMemory(<var>const</var> <var>unsigned</var> <var>char</var> memory[],
                 <var>const</var> <var>char</var> label[] = <kbd>"contents"</kbd>)
{
  cout &lt;&lt; <kbd>"Memory "</kbd> &lt;&lt; label &lt;&lt; <kbd>": "</kbd> &lt;&lt; endl;
  <var>for</var> (size_t i = 0; i &lt; 4; i++) 
  {
    <var>for</var> (size_t j = 0; j &lt; 8; j++)
      cout &lt;&lt; setw(2) &lt;&lt; setfill(<kbd>'0'</kbd>) &lt;&lt; uppercase &lt;&lt; hex
           &lt;&lt; <var>static_cast</var>&lt;<var>int</var>&gt; (memory[i * 8 + j]) &lt;&lt; <kbd>" "</kbd>;
    cout &lt;&lt; endl;
  }
}

<var>int</var> main()
{
  <var>unsigned</var> <var>char</var> memory[32];
  memset(memory, 0x11, 32 * <var>sizeof</var>(<var>unsigned</var> <var>char</var>));
  PrintMemory(memory, <kbd>"before placement new"</kbd>);

  <var>new</var> (memory) A;
  PrintMemory(memory, <kbd>"after placement new"</kbd>);
  <var>reinterpret_cast</var>&lt;A *&gt;(memory)-&gt;~A();

  system(<kbd>"pause"</kbd>);
  <var>return</var> 0;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Despite of relatively large size of code, its logic should be clear: first, it allocates 32 bytes on stack, which is filled then with 0x11 values (0x11 value will indicate a "garbage" in memory, i.e. not-initialized memory). Secondly, with usage of <a href="../../../en.wikipedia.org/wiki/placement_syntax">placement new</a> operator it creates trivial class A object. Lastly, it prints memory contents, after which destructs A object and terminates normally. Below you can see output of this program (Microsoft Visual Studio 2012, x64).<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Memory before placement new:
11 11 11 11 11 11 11 11
11 11 11 11 11 11 11 11
11 11 11 11 11 11 11 11
11 11 11 11 11 11 11 11
++ A has been constructed
Memory after placement new:
AA AA AA AA AA AA AA AA
11 11 11 11 11 11 11 11
11 11 11 11 11 11 11 11
11 11 11 11 11 11 11 11
-- A has been destructed
Press any key to continue . . .
</samp></pre></td></tr></table></div>
It is easy to notice that size of class in memory is 8 bytes and is equal to size of its only member "unsigned long long content_A".<br>
<br>
Let us complicate our program a bit with addition of "virtual" keyword to declaration of void function(void):<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>virtual</var> <var>void</var> function(<var>void</var>) {nop();};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Program output (hereinafter only part of output will be shown, "Memory before placement new" and "Press any key..." will be omitted):<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
++ A has been constructed
Memory after placement new:
F8 D1 C4 3F 01 00 00 00
AA AA AA AA AA AA AA AA
11 11 11 11 11 11 11 11
11 11 11 11 11 11 11 11
-- A has been destructed
</samp></pre></td></tr></table></div>
Again, it is easy to notice that size of class is now 16 bytes. First eight bytes now contain a pointer to virtual method table. On this run it was equal to 0x000000013FC4D1F8 (pointer and content_A are "reversed" in memory due to the Intel64's little-endian <a href="../../../httpsen.wikipedia.org/wiki/endianness">byte order</a>; however, in case of content_A it is kind of difficult to notice).<br>
<br>
Virtual method table is a special structure in memory that is generated automatically and that contains pointers to all virtual methods listed in this class. When somewhere in code function() method is called in the context of pointer to A class, instead of call to A::function() directly, a call to function located in virtual method table with some offset will be called - this behavior realizes polymorphism. Virtual method table is presented below (it is obtained after compiling with /FAs key; in addition take note to somewhat strange function name in assembly code - it went through "<a href="../../../en.wikipedia.org/wiki/name_mangling">name mangling</a>"):<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code>CONST SEGMENT
??_7A@@6B@ DQ  FLAT:??_R4A@@6B@   ; A::<kbd>'vftable'</kbd>
 DQ FLAT:?function@A@@UEAAXXZ
CONST ENDS</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h2>__declspec(novtable)</h2>
<br>
Sometimes such a situation occurs when there is no need in virtual table pointer at all. Let us suppose that we shall never instantiate object of A class, and if we shall, only on weekend and on holidays, meticulously controlling that no one virtual function is called. This situation is frequent in case of abstract classes - it is known that abstract classes cannot be instantiated no matter what. Actually, if function() was declared in A class as abstract method, virtual method table would look like this:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code>CONST SEGMENT
??_7A@@6B@ DQ FLAT:??_R4A@@6B@ ; A::<kbd>'vftable'</kbd>
 DQ FLAT:_purecall
CONST ENDS</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
It is obvious that an attempt to call this function would result in a shooting one's own leg.<br>
<br>
After this, the question arises: if class is never instantiated, is there a reason to initialize virtual table pointer? To prevent compiler from generating redundant code, programmer can give it a __declspec(novtable) attribute (be careful: Microsoft-specific!). Let us rewrite our virtual function example using __declspec(novtable):<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>class</var> __declspec(novtable) A { .... }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Program output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
++ A has been constructed
Memory after placement new:
11 11 11 11 11 11 11 11
AA AA AA AA AA AA AA AA
11 11 11 11 11 11 11 11
11 11 11 11 11 11 11 11
-- A has been destructed
</samp></pre></td></tr></table></div>
Notice that size of an object has not changed: it is still 16 bytes. After including __declspec(novtable) attribute there are only two differences: first, on place of virtual table pointer there is an uninitialized memory, secondly - in assembler code there is no virtual method table of class A at all. Nevertheless, virtual table pointer is present and has a size of eight bytes! This is the thing to remember, because...<br>
<br>
<h2>Inheritance</h2>
<br>
Let us rewrite our example to realize simplest inheritance technique from the abstract class with virtual table pointer.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><var>class</var> __declspec(novtable) A <cite>// I never instantiate</cite>
{
<var>public</var>:
  <var>unsigned</var> <var>long</var> <var>long</var> content_A;
  A(<var>void</var>) : content_A(0xAAAAAAAAAAAAAAAAull)
      { cout &lt;&lt; <kbd>"++ A has been constructed"</kbd> &lt;&lt; endl;};
  ~A(<var>void</var>) 
      { cout &lt;&lt; <kbd>"-- A has been destructed"</kbd> &lt;&lt; endl;};

  <var>virtual</var> <var>void</var> function(<var>void</var>) = 0;
};

<var>class</var> B : <var>public</var> A <cite>// I always instantiate instead of A</cite>
{
<var>public</var>:
  <var>unsigned</var> <var>long</var> <var>long</var> content_B;
  B(<var>void</var>) : content_B(0xBBBBBBBBBBBBBBBBull)
      { cout &lt;&lt; <kbd>"++ B has been constructed"</kbd> &lt;&lt; endl;};
  ~B(<var>void</var>) 
      { cout &lt;&lt; <kbd>"-- B has been destructed"</kbd> &lt;&lt; endl;};

  <var>virtual</var> <var>void</var> function(<var>void</var>) { nop(); };
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
In addition, we need to make that instead of instantiating class A main program would have constructed (and destructed) an object of class B:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code>....
<var>new</var> (memory) B;
PrintMemory(memory, <kbd>"after placement new"</kbd>);
<var>reinterpret_cast</var>&lt;B *&gt;(memory)-&gt;~B();
....</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Program output will be like this:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
++ A has been constructed
++ B has been constructed
Memory after placement new:
D8 CA 2C 3F 01 00 00 00
AA AA AA AA AA AA AA AA
BB BB BB BB BB BB BB BB
11 11 11 11 11 11 11 11
-- B has been destructed
-- A has been destructed
</samp></pre></td></tr></table></div>
Let us try to figure out what has happened. Constructor B::B() had been called. This constructor before executing its body had called base class' constructor A::A(). If __declspec(novtable) attribute was not present, A::A() would have been initialized virtual table pointer; in our case virtual table pointer has not been initialized. Then constructor set content_A value to 0xAAAAAAAAAAAAAAAAull (second field in memory) and returned flow of execution to B::B().<br>
<br>
Because there is no __declspec(novtable) attribute, constructor set virtual table pointer (first field in memory) to virtual method table of class B, set content_B value to 0xBBBBBBBBBBBBBBBBull (third field in memory) and then returned flow of execution to main program. Taking in consideration memory contents it is easy to find out that the object of B class was constructed correctly, and program logic makes it clear that one unnecessary operation was skipped. If you are confused: unnecessary operation in this context is an initializing virtual table pointer in a base class' constructor.<br>
<br>
It would seem that only one operation was skipped. What is the point in removing it? But what if program have thousands and thousands of classes derived from one abstract class, removing one automatically generated command can significantly affect program performance. Moreover, it will. Do you believe me?<br>
<br>
<h2>memset function</h2>
<br>
The main idea of memset() function lies in filling memory field with some constant value (most often with zeroes). In C language it could have been used to quickly initialize all structure field. What is the difference between simple C++ class without virtual table pointer and C structure in terms of memory arrangement? Well, there is none, C raw data is the same as C++ raw data. To initialize really simple C++ classes (in terms of C++11 - <a href="../../../en.cppreference.com/w/cpp/concept/standardlayouttype">standart layout types</a>) it is possible to use memset() function. Well, it is also possible to use memset() function to initialize every class. However, what is the consequences of that? Incorrect memset() call may damage virtual table pointer. This raises the question: maybe it is possible, when class has __declspec(novtable) attribute?<br>
<br>
The answer is: possible, but with precautions.<br>
<br>
Let us rewrite our classes in another way: add wipe() method, which is used to initialize all contents of A to 0xAA:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br></code></pre></td>
<td class="source"><pre><code><var>class</var> __declspec(novtable) A <cite>// I never instantiate</cite>
{
<var>public</var>:
  <var>unsigned</var> <var>long</var> <var>long</var> content_A;
  A(<var>void</var>)
    {
      cout &lt;&lt; <kbd>"++ A has been constructed"</kbd> &lt;&lt; endl;
      wipe();
    };
    <cite>// { cout &lt;&lt; "++ A has been constructed" &lt;&lt; endl; };</cite>
  ~A(<var>void</var>) 
    { cout &lt;&lt; <kbd>"-- A has been destructed"</kbd> &lt;&lt; endl;};

  <var>virtual</var> <var>void</var> function(<var>void</var>) = 0;
  <var>void</var> wipe(<var>void</var>)
  {
    memset(<var>this</var>, 0xAA, <var>sizeof</var>(*<var>this</var>));
    cout &lt;&lt; <kbd>"++ A has been wiped"</kbd> &lt;&lt; endl;
  };
};

<var>class</var> B : <var>public</var> A <cite>// I always instantiate instead of A</cite>
{
<var>public</var>:
  <var>unsigned</var> <var>long</var> <var>long</var> content_B;
  B(<var>void</var>) : content_B(0xBBBBBBBBBBBBBBBBull)
      { cout &lt;&lt; <kbd>"++ B has been constructed"</kbd> &lt;&lt; endl;};
      <cite>// {</cite>
      <cite>//   cout &lt;&lt; "++ B has been constructed" &lt;&lt; endl;</cite>
      <cite>//   A::wipe();</cite>
      <cite>// };</cite>

  ~B(<var>void</var>) 
      { cout &lt;&lt; <kbd>"-- B has been destructed"</kbd> &lt;&lt; endl;};

  <var>virtual</var> <var>void</var> function(<var>void</var>) {nop();};
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The output in this case will be as expected:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
++ A has been constructed
++ A has been wiped
++ B has been constructed
Memory after placement new:
E8 CA E8 3F 01 00 00 00
AA AA AA AA AA AA AA AA
BB BB BB BB BB BB BB BB
11 11 11 11 11 11 11 11
-- B has been destructed
-- A has been destructed
</samp></pre></td></tr></table></div>
So far, so good.<br>
<br>
Nevertheless, if we change wipe() function call by commenting out constructors lines and uncommenting lines next to them, it will become clear that something went wrong. First call to virtual method function() will cause run-time error due to damaged virtual table pointer:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
++ A has been constructed
++ B has been constructed
++ A has been wiped
Memory after placement new:
AA AA AA AA AA AA AA AA
AA AA AA AA AA AA AA AA
BB BB BB BB BB BB BB BB
11 11 11 11 11 11 11 11
-- B has been destructed
-- A has been destructed
</samp></pre></td></tr></table></div>
Why has it happened? Wipe() function was called after B constructor initialized virtual table pointer. As a result, wipe() damaged this pointer. In other words - it is not advised to zero class with virtual table pointer even it is declared with __declspec(novtable) attribute. Full zeroing will be appropriate only in a constructor of a class that will never be instantiated, but even this should be done only with great caution.<br>
<br>
<h2>memcpy function</h2>
<br>
All the words above can be applied to memcpy() function as well. Again, its purpose is to copy standard layout types. However, judging by the practice, some programmers enjoy using it when it is needed and when it is not. In case of non-standard layout types usage of memcpy() is like ropewalking above Niagara falls: one mistake can be fatal, and this fatal mistake can be made surprisingly easy. As an example:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>class</var> __declspec(novtable) A
{
  ....
  A(<var>const</var> A &amp;source) { memcpy(<var>this</var>, &amp;source, <var>sizeof</var>(*<var>this</var>)); }
  <var>virtual</var> <var>void</var> foo() { }
  ....
};
<var>class</var> B : <var>public</var> A { .... };</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Copy constructor can write anything his digital soul wants into virtual table pointer of an abstract class: constructor of derived class will anyway initialize it with correct value. However, in body of assignment operator usage of memcpy() is forbidden:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><var>class</var> __declspec(novtable) A
{
  ....
  A &amp;<var>operator</var> =(<var>const</var> A &amp;source)
  {
    memcpy(<var>this</var>, &amp;source, <var>sizeof</var>(*<var>this</var>)); 
    <var>return</var> *<var>this</var>;
  }
  <var>virtual</var> <var>void</var> foo() { }
  ....
};
<var>class</var> B : <var>public</var> A { .... };</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
To finish the picture, remember that nearly every copy constructor and assignment operator have nearly identical bodies. No, it is not as bad as it looks like at first glance: in practice assignment operator may work as expected not due to the correctness of code, but due to the stars' wish. This code copies virtual table pointer from another class and results are highly unpredictable.<br>
<br>
<h2>PVS-Studio</h2>
<br>
This article is a result of detailed research about this mysterious __declspec(novtable) attribute, cases when it is possible to use memset() and memcpy() functions in a high-level code, and when it is not. From time to time developers ask us about the fact that <a href="../../../www.viva64.com/en/pvs-studio/default.htm">PVS-Studio</a> shows too many warnings about virtual table pointer. Developers frequently mail us about virtual table pointer. Programmers think that if __declspec(novtable) is present, class have no virtual method table and no virtual table pointer either. We had started to carefully puzzle out this question, and then we have understood that it is not as simple as it looks.<br>
<br>
It should be kept in mind. If __declspec(novtable) attribute is used in class declaration, it does not mean that this class does not contain virtual table pointer! Does class initialize it or not? It is another kind of question.<br>
<br>
In future we are going to make our analyzer to suppress warning about usage of memset()/memcpy(), but only in case of base classes with __declspec(novtable).<br>
<br>
<h2>Conclusion</h2>
<br>
Unfortunately, this article does not cover a lot of material about inheritance (for example, we have not covered multiple inheritance at all). Nevertheless, I hope that this information would allow understanding that "it is not as simple as it looks" and it is advisable to think three times before using low-level function in conjunction with high-level objects. Moreover, is it worth it?</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','iy6AC542');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~37.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='Dj1Rko23')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaiy6ac542.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaiy6ac542'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
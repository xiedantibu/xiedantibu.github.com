<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/evbcpfjn/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Conditionals - The true or false story - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Conditionals - The true or false story</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/aakanaar/default.htm" rel="author">Aakanaar</a></b></div>
<div id="I_date">Aug 11, 2008 (last update: Aug 14, 2008)</div>
<h1>Conditionals - The true or false story</h1>
<div id="I_score">Score: 2.6/5 (10 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
I have yet again seen a piece of code similar to the following very common mistake<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code><var>if</var> (chr == <kbd>'Y'</kbd> || <kbd>'y'</kbd>) <cite>// this will always return true</cite>
  do_something; <cite>// and this will always be called</cite>
<var>else</var> <var>if</var> (chr == <kbd>'N'</kbd> || <kbd>'n'</kbd>) <cite>// this makes same mistake as above</cite>
  do_something_else; <cite>// but, this will never be called because of above</cite>
<var>else</var>
  do_some_other_thing; <cite>// This will never be called </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Before I get into why that first if will always return true, let's look at a few details about how conditionals work.<br>
<br>
<b>What is a conditional?</b>
A conditional is a statement that evaluates to <b>true</b> or <b>false</b>. All of your control structures rely on conditionals. This includes..<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code><var>if</var> ( conditional )
<var>else</var> <var>if</var> ( conditional )

<var>while</var> ( conditional )

<var>do</var> { ... }
  <var>while</var> ( conditional )

<cite>// even</cite>
<var>for</var> ( initialization; conditional; incremental)
<cite>// for loops can have an empty conditional which evaluates to true. But this only works for For loops.</cite>

<cite>// and there is the conditional operator</cite>
<var>int</var> a = conditional ? ... : ...;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And since conditionals evaluate to <b>true</b> or <b>false</b> then the above can also be writen as such..<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><var>if</var> (<var>true</var>)
<var>else</var> <var>if</var> (<var>true</var>)

<var>while</var> (<var>true</var>)

<var>do</var> { ... }
  <var>while</var> (<var>true</var>)

<var>for</var> ( ...; <var>true</var>; ...)

<var>int</var> a = <var>true</var> ? ... : ...;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Naturally, <b>if (true)</b> would defeat the purpose of the <b>if</b> statement, but <b>while (true)</b> is very commonly used.<br>
<br>
<b>So how do we define True or False?</b>
A lot of people would tell you that <b>false</b> is <b>zero</b>, and <b>true</b> is any number larger than <b>zero</b>. This is not entirely accurate. To be more percise, <b>false</b> is <b>zero</b> and <b>true</b> is any <b>non-zero</b>. This includes negative numbers. (<i>I have tested to confirm this with DevC++</i>)<br>
<br>
<b>False</b> can also be <b>null</b> which is distinctly different from <b>zero</b>. There are many functions that return <b>null</b>, so this can also be used as a conditional.<br>
<br>
<b>So what qualifies as a conditional?</b>
Anything that evaluates to <b>true</b> or <b>false</b>. All of your comparisons, such as <b>greater than</b> '&gt;', <b>less than or equal to</b> '&lt;=', and <b>is equal to</b> '==' evaluate to <b>true</b> or <b>false</b>.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><var>int</var> i = 5; <cite>// integer i is equal to five.</cite>

<var>if</var> (i == 5) <cite>// this evaluates to</cite>
<var>if</var> (<var>true</var>)

<var>else</var> <var>if</var> (i &lt; 5) <cite>// this evaluates to</cite>
<var>else</var> <var>if</var> (<var>false</var>)

<var>while</var> (i &gt;= 5) <cite>// this evaluates to</cite>
<var>while</var> (<var>true</var>)

<cite>// and so forth </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
All of your assignments also evaluate to <b>true</b> or <b>false</b>. This is because assignments also return a value. <b>a = 5;</b> stores the number <b>5</b> into the variable <b>a</b>. But it also returns the value <b>5</b>. This is why <b>b = a = 5;</b> works. It first stores <b>5</b> into <b>a</b>, then returns <b>5</b> which is stored into <b>b</b>.<br>
<br>
The <b>b = 5;</b> also returns <b>5</b>, but since we don't store it into anything else, it gets lost into time and space, never to be seen again. This is ok, since someday someone will invent a hyperspace engine that gets its power from all of these lost values floating around.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><cite>// notice one '=' sign makes it an assignment, not a comparison</cite>
<var>if</var> (a = 5) <cite>// this evaluates into</cite>
<var>if</var> (5) <cite>// which since 5 is a non-zero, it evaluates into</cite>
<var>if</var> (<var>true</var>)

<var>if</var> (a = 0) <cite>// this evaluates to</cite>
<var>if</var> (0) <cite>// which as we know from above evaluates to</cite>
<var>if</var> (<var>false</var>)</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Then finally, there are many functions that you can call that return values. Any function that does not return a <b>void</b> (or by definition of <b>void</b> does not return anything) can be used as or in conditionals.<br>
<br>
<b>Logical Operators</b>
There are two logical operators that can be used to concatenate conditionals. These are the <b>And</b> '&&', and the <b>Or</b> '||' operators. both of these take two conditionals, one on either side, and evaluate each conditional seperately.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><var>if</var> ( condition_1 || condition_2 ) <cite>// or</cite>
<var>if</var> ( condition_1 &amp;&amp; condition_2 ) <cite>// and</cite>

<var>int</var> i = 5, j = 1;

<var>if</var> ( i == 3 || j == 1 ) <cite>// evaluates to</cite>
<var>if</var> ( <var>false</var> || <var>true</var> ) <cite>// evaluates to</cite>
<var>if</var> ( <var>true</var> )

<var>if</var> ( i == 5 &amp;&amp; j == 3 ) <cite>// evaluates to</cite>
<var>if</var> ( <var>true</var> &amp;&amp; <var>false</var> ) <cite>// evaluates to</cite>
<var>if</var> ( <var>false</var> )

<cite>// You can even use multiple concatenations.</cite>
<var>int</var> h = 3;

<var>if</var> ( i == 2 || ( j == 1 &amp;&amp; h == 3 ) ) <cite>// evaluates to</cite>
<var>if</var> ( <var>false</var> || ( <var>true</var> &amp;&amp; <var>true</var> ) ) <cite>// evaluates to</cite>
<var>if</var> ( <var>false</var> || <var>true</var> ) <cite>// evaluates to</cite>
<var>if</var> ( <var>true</var> )</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And this brings us back to the code at the beginning, and why it will always return true. That code reads...<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>if</var> (chr == <kbd>'Y'</kbd> || <kbd>'y'</kbd>) <cite>// which if chr = anything other than 'Y' would evaluate to</cite>
<var>if</var> ( <var>false</var> || <kbd>'y'</kbd> ) <cite>// and since 'y' is a non-zero this would evaluate to</cite>
<var>if</var> ( <var>false</var> || <var>true</var> ) <cite>// which will evaluate to</cite>
<var>if</var> ( <var>true</var> )</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>Special Note</b>
You can also use assignments and function calls with the logical operators. However, special care should be given here, as doing so may have unexpected results. This is due to the way the program handles these logical operators.<br>
<br>
For example, <b>Or</b> returns true if either conditional is true. It checks the first conditional, and if it returns false, it will check the second conditional. If, however, the first conditional returns true, it does not need to check the second conditional. It already has enough information to return true. Let's take the following code for example..<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code>   <var>int</var> i = 0, j = 0;
   <var>while</var> (<var>true</var>)
   {
      <var>if</var> (++i &gt;= 5 || ++j &gt;= 5) <cite>// OR</cite>
         cout &lt;&lt; i &lt;&lt; <kbd>" "</kbd> &lt;&lt; j &lt;&lt; <kbd>" true"</kbd> &lt;&lt; endl;

      <var>else</var>
         cout &lt;&lt; i &lt;&lt; <kbd>" "</kbd> &lt;&lt; j &lt;&lt; <kbd>" false"</kbd> &lt;&lt; endl;

      <var>if</var> (i &gt;= 10)
         <var>break</var>;
   }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
One would think from looking at this code that both <b>i</b> and <b>j</b> would reach 10. However, once <b>i</b> reaches 5, it returns true and thus the second conditional no longer needs to be tested. The result is the following output.<br>
<br>
<blockquote>1 1 false<br>
2 2 false<br>
3 3 false<br>
4 4 false<br>
5 4 true<br>
6 4 true<br>
7 4 true<br>
8 4 true<br>
9 4 true<br>
10 4 true</blockquote>
<br>
<b>And</b>, however, requires both conditionals to be true. So it checks the first conditional, and if it returns true, it will check the second conditional. If, however, the first conditional returns false, there is no reason to check the second conditional. It already has enough information to return false. Thus the following code..<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code>   <var>int</var> i = 0, j = 0;
   <var>while</var> (<var>true</var>)
   {
      <var>if</var> (++i &gt;= 5 &amp;&amp; ++j &gt;= 5) <cite>// AND</cite>
         cout &lt;&lt; i &lt;&lt; <kbd>" "</kbd> &lt;&lt; j &lt;&lt; <kbd>" true"</kbd> &lt;&lt; endl;

      <var>else</var>
         cout &lt;&lt; i &lt;&lt; <kbd>" "</kbd> &lt;&lt; j &lt;&lt; <kbd>" false"</kbd> &lt;&lt; endl;

      <var>if</var> (i &gt;= 10)
         <var>break</var>;
   }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
.. produces the following output..<br>
<br>
<blockquote>1 0 false<br>
2 0 false<br>
3 0 false<br>
4 0 false<br>
5 1 false<br>
6 2 false<br>
7 3 false<br>
8 4 false<br>
9 5 true<br>
10 6 true</blockquote>
<br>
<b>The Not Operator</b>
And there is of course, one more logical operator to consider. the <b>Not</b> '!' operator which when put in front of the conditional, simply reverses it. It turns <b>true</b> into <b>false</b> and <b>false</b> into <b>true</b>.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><var>if</var> (!<var>true</var>) <cite>// evaluates to</cite>
<var>if</var> (<var>false</var>)

<cite>// and</cite>

<var>if</var> (!<var>false</var>) <cite>// evaluates to</cite>
<var>if</var> (<var>true</var>)</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>Side Note: XOR</b>
I originally had <b>Xor</b> as a logical operator, but it is not. It is a bitwise operator. It is possible, however, to emulate the <b>Xor</b> functionality in a logical sence. <b>Xor</b> is simply '<b>Or And Not And</b>'. However, using assignments in part or all of this is much more difficult to predict the possible outcomes.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code>   <var>int</var> i = 0, j = 0;
   <var>while</var> (<var>true</var>)
   {
      <var>if</var> ((++i &gt;= 5 || ++j &gt;= 5) &amp;&amp; !(++i &gt;= 5 &amp;&amp; ++j &gt;= 5))
         cout &lt;&lt; i &lt;&lt; <kbd>" "</kbd> &lt;&lt; j &lt;&lt; <kbd>" true"</kbd> &lt;&lt; endl;

      <var>else</var>
         cout &lt;&lt; i &lt;&lt; <kbd>" "</kbd> &lt;&lt; j &lt;&lt; <kbd>" false"</kbd> &lt;&lt; endl;

      <var>if</var> (i &gt;= 10)
         <var>break</var>;
   }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
..produces this output..<br>
<br>
<blockquote>1 1 false<br>
2 2 false<br>
3 3 false<br>
4 4 false<br>
6 5 false<br>
8 6 false<br>
10 7 false</blockquote>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','EvbCpfjN');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../ovr0/contact.doreferrerwww.cplusplus.com_252farticles_252~8.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='jNyTURfi')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaevbcpfjn.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaevbcpfjn'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/nb07m4gy/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>double - and how to use it - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">double - and how to use it</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/exception/default.htm" rel="author">exception</a></b></div>
<div id="I_date">Aug 28, 2008 (last update: Aug 30, 2008)</div>
<h1>double - and how to use it</h1>
<div id="I_score">Score: 3.6/5 (6 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
This article shows some properties of "double" atithmetic, and what you can and can't do with it.<br>
NB: it requires UTF-8 support for mathematic symbols.<br>
<br>
0. Motivation<br>
=============<br>
When doing floatingpoint arithmetic, some strange effects can occur, like<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>for</var>(<var>double</var> i=0.0; i!=5.5; i+=0.5)
{
        ... 
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
might never terminate due to rounding errors. Especially testing for (in)equality often does not yield in the desired result. A common workaround is to use an epsilon:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code><var>bool</var> is_equal(<var>double</var> d1, <var>double</var> d2) 
{
        <var>if</var>(abs(d1-d2)&lt;epsilon)
                <var>return</var> <var>true</var>;
        <var>return</var> <var>false</var>;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
However, this "solution" is only in few cases applicable - equality, defined this way, is not an equivalence relation anymore (lost transitivity: a-b&lt;ε Λ b-c&lt;ε doesn't imply a-c&lt;ε - oops). Another question is: how large should epsilon be?<br>
<br>
The computer should calculate the correct results or state it's uncertainty. This cannot be achieved in general using an epsilon. This is why you should be interested in the rest of this article ;-)<br>
<br>
<br>
1. The number type<br>
==================<br>
A IEEE 754 double value is composed of: <br>
1 bit sign (+ or -)<br>
11 bit exponent (range: 0 to 1047, 0 and 1047 "reserved")<br>
52 bit significant (aka "mantissa")<br>
<br>
the represented number is then:<br>
<br>
[sign] 2<sup>exponent-bias[=1023]</sup>*1[significant]<br>
<br>
where the 1 is an implied bit set to 1 before the bits of the significant start.<br>
<br>
For normalized numbers the first bit of the significant is 1 and not saved, so the significant grows to 53 bit (obviously, leading zeros can be left out, so a number starts with a non-zero, which happens to be always one in a binary system).<br>
<br>
A value is normalized iff 0 &lt; exponent &lt; 2047. If the exponent is zero, IEEE uses "denormalized" numbers, the value then is [sign]2<sup>-1022</sup>*[significant] without the leading one in the significant. Note that calculations in the range of denormalized numbers is usually extremely slow (2047 in the exponent is reserved for "NaN (not a number), ±inf and alike)<br>
<br>
If you, for some reason, require bit access, you can use on a *BIG* endian machine:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code><var>union</var> ieee_double
{
   <var>double</var>   a;
   <var>struct</var> { <var>unsigned</var> s : 1;
            <var>unsigned</var> e :11;
            <var>unsigned</var> h :20;
            <var>unsigned</var> l :32;
          } b;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Little endian has to be handled seperately, but is done in a similar way.<br>
<br>
2. Operations<br>
=============<br>
Assume that rounding is set to "round to nearest" and "round to even tie-breaking" (default)<br>
<br>
Let ∘ denote an operation of {+,-,*,/} and ⊚ the corresponding machine operation, i.e. one of {⊕,⊖,⊛,⊘}<br>
<br>
Let x, y and z be IEEE 754 double values.<br>
Let a be a real number.<br>
Let fl(a) be the IEEE 754 double value nearest to a<br>
<br>
IEEE 754 now guarantees:<br>
(a) fl(x ∘ y) = x ⊚ y<br>
Corollary:<br>
  x ⊖ y = 0 ⇔ x = y<br>
  x ⊕ y = y ⊕ x<br>
  x ⊛ y = y ⊛ x<br>
(b) fl(sqrt(x)) = msqrt(x), where msqrt is the "machine sqrt" operation.<br>
Furthermore, some "no-number" results are defined, like NaN (not a number) and +/- infinity.<br>
<br>
However in the general case, due to rounding errors:<br>
a ⊚ ( b ⊚ c ) ≠ ( a ⊚ b ) ⊚ c<br>
<br>
3. Sterbenz Lemma<br>
=================<br>
One of your most important friends when doing double arithmetic is Sterbenz Lemma, which can be stated as:<br>
If y/2 ≤ x ≤ y then<br>
x ⊖ y = x - y<br>
if x ⊖ y doesn't underflow<br>
<br>
Or, formulated in "plain enlish": if y is between x/2 and x, then the machine substraction x ⊖ y gives you the exact result.<br>
<br>
4. Error bounds<br>
===============<br>
One can, given the properties in (1) and (2), and the resulting lemma (3), compute an error bound for any formula using +,-,*,/ and 'sqrt'. However, this calculation is tedious and error-prone itself, so an approximation is usually used.<br>
<br>
Using Sterbenz' lemma, one can prove some easier error bounds for the evaluation of polynomials. I won't show them here, but you can google for e.g.<br>
- Fortune-van-Wyk Bound<br>
- Mehlhorn-Näher Bound<br>
- Mehlhorn-Neumaier Bound<br>
to find them. (Note: IIRC, all these papers prove thir correctness only for integer operands (represented in doubles). However, they all are correct for any double input). A noteworthy beauty of all these formulas is that the actual error bound can be computed using double arithmetic.<br>
<br>
5. Floating point filters<br>
=========================<br>
Remember the motivation example: equality tests. Given two polynomials P and Q, it now can be decided if P(x) = Q(x) in some cases:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><cite>// equality test:</cite>
<var>if</var>(abs(P(x1) - Q(x2)) &gt; ErrorBound(max(x1,x2)))
        <var>return</var> <var>false</var>; <cite>/* we know that for sure */</cite>
<var>else</var>
        <cite>// ??? </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
(note that if P or Q is multivariate, max had better used the supremum norm of x1 and x2...)<br>
<br>
If you know the operand size at compile time (or at program startup) and can pre-compute it, all you have to pay for the exactness is then a simple test in most cases.<br>
Question: what is the '???'? There are several options. You could use exact arethmetic using an arbitrary precision number type, you can use floating-point expansions, or you can perform lazy adaptive evaluation (note that the speed increases, but so does the difficulty of implementation (and coming up with the right formulas), from left to right).<br>
These methods are out of the scope of this article (if time allows it, I might write a sequel, though ;-) )<br>
In some areas, another possibility would be to use controlled pertubation, meaning that the input is transformed in such a way that equality doesn't occur and inequality can be shown here (not exact, but might be robust and sufficient, since we guarantee some property (i.e., we don't just say "not equal", we also make sure it isn't).<br>
<br>
6. Conclusion<br>
=============<br>
While calculating the error bound imposes extra work, runtime efficiency is a minor issue (one comparison to prove the correctness of the result in most cases). At the same time, many degeneracencies caused by the incorrect assumption of equality can be avoided, often resulting in a substantial performance gain.<br>
<br>
________________________________________________________________________________<br>
If you have any comments, suggestions or improvements, or spotted a spelling error (or several), please let me know.<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','Nb07M4Gy');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../ovr0/contact.doreferrerwww.cplusplus.com_252farticles_25~16.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='2b7XoG1T')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgianb07m4gy.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgianb07m4gy'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
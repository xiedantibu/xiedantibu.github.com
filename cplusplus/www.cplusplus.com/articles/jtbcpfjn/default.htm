<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/jtbcpfjn/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Make - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Make</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/kbw/default.htm" rel="author">kbw</a></b></div>
<div id="I_date">Dec 17, 2012 (last update: Dec 17, 2012)</div>
<h1>Make</h1>
<div id="I_score">Score: 3.7/5 (92 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<H3>Introduction</H3>
Make is a program that's used to build other programs or documents.  Make is suitable for any process that has intermediate steps that may or may not be complete.<br>
<br>
Make doesn't rebuild things that are already up to date.  Further more, it knows how to build the intermediate targets.  You instruct Make with a Make file.<br>
<br>
There's more than one Make program.  The most common that C/C++ developers encounter is GNU Make.  I will describe GNU Make with examples first, then look at BSD Make and end with some commentary on the differences.<br>
<br>
<H3>Getting Started with GNU Make</H3>
GNU Make has a lot of rules built into it.  They're called built in rules.  Lets look at an example, hello.c<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdio.h&gt;</dfn>

<var>int</var> main()
{
	printf(<kbd>"hello world\n:"</kbd>);
	<var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
To build the program, simply type:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>make hello</samp></pre></td></tr></table></div>
It runs:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>cc     hello.c   -o hello</samp></pre></td></tr></table></div>
<br>
So GNU Make already knows that a program can be constructed from a .c file, and it knows how to compile and link it.<br>
<br>
Let's try another one, this time with some more files.  We'll need a makefile for this one.  A GNU Make file can be called GNUmakefile, Makefile, or makefile.  I will use GNUmakefile in these examples as we'll be looking at BSD Make later.<br>
calc.c<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include "engine.h"</dfn>

<var>int</var> main()
{
	printf(<kbd>"%d\n"</kbd>, calc(<kbd>"2+3"</kbd>));
	<var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
engine.h<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><dfn>#pragma once</dfn>

<var>int</var> calc(<var>const</var> <var>char</var>* expression);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
engine.c<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "engine.h"</dfn>

<var>int</var> calc(<var>const</var> <var>char</var> *expression)
{
	<var>return</var> 5;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
GNUmakefile <br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code>OBJ = calc.o engine.o

calc: $(OBJ)

$(OBJ): engine.h</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
We define a macro OBJ, that has the list of our object files.  Remember, GNU Make knows how to create an object file from a C program.<br>
<br>
Next, we tell GNU Make that our program, calc, is made from these OBJ files.  When we run make, it does:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>cc    -c -o calc.o calc.c
cc    -c -o engine.o engine.c
cc   calc.o engine.o   -o calc</samp></pre></td></tr></table></div>
<br>
Finally, we tell GNU Make that if engine.h changes, we must recompile the object files.  This is called a dependency.<br>
<br>
Now, let's introduce C++.  Lets define one new file: calcpp.cc<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<var>extern</var> <kbd>"C"</kbd>
{
<dfn>#include "engine.h"</dfn>
}

<var>int</var> main()
{
	std::cout &lt;&lt; calc(<kbd>"2+3"</kbd>) &lt;&lt; std::endl;
	<var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This is our modified GNUmakefile<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code>OBJ = calcpp.o engine.o

calc: $(OBJ)
	$(LINK.cc) $^ -o $@

$(OBJ): engine.h</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
So what's changed?  We need to tell GNU Make that we're linking a C++ program,  We use the GNU Make macro LINK.cc to tell it that we're linking a C++ program.<br>
<br>
$^ means all the dependencies, calcpp.o and engine.o in this case.<br>
<br>
$@ means the target we're making, calc in this case.<br>
<br>
When we run make, it does:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>c++    -c -o calcpp.o calcpp.cc
c++     calcpp.o engine.o -o calc</samp></pre></td></tr></table></div>
<br>
What about compiling engine.c?  Well, we compiled it earlier and make knows it doesn't need to be recompiled.<br>
<br>
<H3>BSD Make</H3>
BSD Make predate's GNU Make and it's a little different.  BSD Make doesn't have a lot of built in rules.  It needs to be told quite a lot in the make file.  As you've seen above, GNU Make know quite a lot.<br>
<br>
BSD Make knows about dependencies and rules to build those dependencies, but it doesn't have all those built in default rules, so it needs to be told.  Instead of being told everything, a system that uses BSD Make provides a set of include files that define how things are done on that system.  For example, on FreeBSD, if you want to write a program, you include &lt;bsd.prog.mk&gt;.  This has all the rules needed to compile, install, uninstall, archive â€¦ while develop your program.<br>
<br>
<H3>A comparison of GNU Make and BSD Make</H3>
Remember, GNU is the Free Software Foundation, toolset.  GNU means GNU is Not Unix.  This is important.  When the GNU project was started, it's aim was to provide freely available equivalents of Unix programs.  And they improved them by adding helpful and consistent behaviour.<br>
<br>
BSD Make just knows about dependencies, targets, rules and macros.  GNU Make adds built in rules to that mix to make it easier for the developer.<br>
<br>
It turns out that details of systems are conflicting and cannot be known in advance.  BSD Make deals with system dependencies by having the system define its parameters.  GNU Make's built in rules turn out to be inadequate.  The Auto Tools project (AutoConf, AutoMake, LibTools) was developed to compensate for this.  It works by discovering the system at configuration time, which then generates makefiles.<br>
<br>
I prefer the BSD solution.  It's clear that in this example it's better designed.  I find that's generally true of BSD.<br>
<br>
<H3>An Example</H3>
This example uses 3 C++ source files (main.cc, config.cc, dispatch.cc), and 2 header files (config.hpp, dispatch.hpp).  I haven't added the dependencies, in the real world, they're auto-generated.<br>
<br>
GNUmakefile<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code>CXXFLAGS = -g

all: goodlistener

goodlistener: main.o config.o dispatch.o
	$(LINK.cc) -o $@ $^</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
BSDmakefile<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></pre></td>
<td class="source"><pre><code>PROG_CXX = goodlistener
SRCS = main.cc config.cc dispatch.cc
MAN = goodlistener.1
MAKEOBJDIR = work
CXXFLAGS=-g

.include &lt;bsd.prog.mk&gt;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','jTbCpfjN');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~88.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='LU7f92yv')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiajtbcpfjn'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiajtbcpfjn'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
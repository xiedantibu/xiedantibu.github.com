<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/y7mf92yv/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Borland C++ 5.02 Code For A Print Previe - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Borland C++ 5.02 Code For A Print Previe</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/analyzoh/default.htm" rel="author">analyzoh</a></b></div>
<div id="I_date">Jan 22, 2014 (last update: Jun 15, 2014)</div>
<h1>Borland C++ 5.02 Code For A Print Preview Window</h1>
<div id="I_score">Score: 4.4/5 (21 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<b>INTRODUCTION</b><br>
<br>
I have used Borland C++ version 5.02 to code <a href="../../../www.analyzohiosoftware.com/application-development-cleveland-ohio.html">application development</a> projects for small businesses in my local area for years. It is a very robust <a href="../../../www.analyzohiosoftware.com/index.html">software</a> platform and a cornerstone of these <a href="../../../www.analyzohiosoftware.com/software-development-archive-cleveland-ohio.html">custom software</a> engagements is the “Print Preview” feature. Here I will feature an example of a check register reconciliation, which utilized my <a href="../../../www.analyzohiosoftware.com/developer-skills-cleveland-ohio.html">developer skills</a> to create a “Print Preview” function. <br>
<br>
<b>DECLARE THE NEEDED C++ CLASSES</b><br>
<br>
The first thing that needs to be done is to declare the classes required for the print preview window. The “TPrevWindow” class is derived from the base class of “TWindow” as found in OWL (Object Windows Library). It includes member functions for page navigation and printing. The response table in this class associates defined constants for bitmap images with their respective member functions. <br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br></code></pre></td>
<td class="source"><pre><code>
<cite>// this is the class declaration for the “TPrevWindow” class, which</cite>
<cite>// contains member functions for scrolling forwards and backwards</cite>
<cite>// through print preview pages as well as the printing function itself.</cite>
<cite>// also, each of these member functions are associated with bitmaps as</cite>
<cite>// seen here under the response table. lastly, there is a “TPrinter”</cite>
<cite>// object, “Printer”, that is used throughout the code.</cite>
<cite>//</cite>
<cite>// class TPrevWindow</cite>
<cite>// ~~~~~ ~~~~~~~~~~~</cite>
<var>class</var> TPrevWindow : <var>public</var> TWindow {
  <var>public</var>:
    TPrevWindow(TWindow* parent = 0);
    <var>void</var> PrnNext();
    <var>void</var> PrnPrevious();
    <var>void</var> PrnImage();
    <var>void</var> Paint(TDC&amp; dc, <var>bool</var> erase, TRect&amp; rect);
  <var>private</var>:
    TPrinter* Printer;
  DECLARE_RESPONSE_TABLE(TPrevWindow);
};
DEFINE_RESPONSE_TABLE1(TPrevWindow, TWindow)
  EV_COMMAND(IDB_BITMAP1, PrnNext),
  EV_COMMAND(IDB_BITMAP2, PrnPrevious),
  EV_COMMAND(IDB_BITMAP3, PrnImage),
END_RESPONSE_TABLE;
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Next, we need to declare the dialog class “TBalEndDlg” of the base class “TDialog” that will do the work of accepting user input, extracting data, etc. to prepare for the upcoming print preview operation.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></code></pre></td>
<td class="source"><pre><code>
<cite>// this class contains controls for accepting user input as well</cite>
<cite>// as “TButtonGadget” and “TButtonGadgetEnabler” objects to be</cite>
<cite>// utilized for constructing the print preview window near the</cite>
<cite>// end of processing.</cite>
<cite>//</cite>
<cite>// class TBalEndDlg</cite>
<cite>// ~~~~~ ~~~~~~~~~~~~</cite>
<var>class</var> TBalEndDlg : <var>public</var> TDialog {
  <var>public</var>:
    TBalEndDlg(TWindow* parent, TResId resId, TBalEndStruct&amp; transfer);
    TEdit *Edit1,*Edit2;

    LRESULT WMChar(WPARAM, LPARAM);

  <var>protected</var>:
    <var>void</var>    CmOk();

  <var>private</var>:
    TButtonGadget* G1;
    TButtonGadget* G2;
    TButtonGadgetEnabler* Ge1;
    TButtonGadgetEnabler* Ge2;
    <var>void</var>    SetupWindow();
    <var>char</var>    StartingAmt[MAXSELL];
    <var>char</var>    EndDate[MAXDAT];

  DECLARE_RESPONSE_TABLE(TBalEndDlg);
};

DEFINE_RESPONSE_TABLE1(TBalEndDlg, TDialog)
  EV_COMMAND(IDOK, CmOk),
  EV_MESSAGE(WM_CHAR, WMChar),
END_RESPONSE_TABLE;
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>NEXT, SET UP THE PRINT PREVIEW</b><br>
<br>
Here is the command that runs the dialog “TBalEndDlg” from the “TTestWindow” class, which is used for the main program window. The resource used to create the user input screen is “IDD_STATEMENTBAL”. The directive within the main window class “TTestWindow” used to construct the input control transfer mechanism is “TBalEndStruct BalEndStruct;”. The object “BalEndStruct” is specified below in the call to run the dialog “TBalEndDlg”.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code>
<var>void</var>
TTestWindow::Reconciliation()
{

 <var>if</var> (TBalEndDlg(<var>this</var>, IDD_STATEMENTBAL, BalEndStruct).Execute() == IDOK) {

 }

}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
And here is what the “IDD_STATEMENTBAL” dialog resource coding looks like.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code>
IDD_STATEMENTBAL DIALOG 15, 20, 205, 65
STYLE DS_MODALFRAME | DS_3DLOOK | WS_POPUP | WS_CAPTION | WS_SYSMENU
CAPTION <kbd>"Reconciliation Entry Screen"</kbd>
FONT 8, <kbd>"MS Sans Serif"</kbd>
{
 CONTROL <kbd>"Register Starting Balance: "</kbd>, 962, <kbd>"static"</kbd>, SS_LEFT | WS_CHILD, 30 10, 130, 12
 CONTROL <kbd>"Register Ending Date: "</kbd>, 963, <kbd>"static"</kbd>, SS_LEFT | WS_CHILD, 30 25, 130, 12
 EDITTEXT IDC_STARTINGBAL, 113, 10, 55, 12, ES_LEFT | WS_BORDER | WS_TABSTOP | WS_CHILD, 0
 EDITTEXT IDC_ENDDATE, 103, 25, 55, 12, ES_LEFT | WS_BORDER | WS_TABSTOP | WS_CHILD, 0
 DEFPUSHBUTTON <kbd>"&amp;OK"</kbd>, IDOK, 70, 45, 30, 19, 0, 0
 PUSHBUTTON <kbd>"&amp;Cancel"</kbd>, IDCANCEL, 100, 45, 30, 19, 0, 0
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This is what the input screen looks like during runtime.<br>
<br>
<br><IMG SRC="firstpreview.jpg" alt=""><br>
<br>
This next patch of C++ code will engage after the “TBalEndDlg” dialog call has occurred. It will commence setting up for the print preview process by first accepting a starting balance and an ending date. These will be used for the data extraction process that follows after the “OK” button in the above referenced dialog resource has been clicked. After this is complete, it will calculate the number of pages based on 50 lines per page. Then it will construct a “frame_d”  object from the “TDecoratedFrame” base class. It will initialize various settings including the control bar that the buttons for the member functions are embedded in. It will also set the dimensions of the print preview window as well as enabling and disabling the navigation buttons based on how many pages have been calculated for the print preview operation. You will also notice the use of defined constants in the file input/output operations I use. These are used to set the offset in the filestreams I use to read from and write to binary fixed length data files that work with the <a href="../../../www.analyzohiosoftware.com/programming-article-archive-cleveland-ohio.html">programming</a>. <br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>407<br>408<br>409<br>410<br>411<br>412<br>413<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>430<br>431<br>432<br>433<br>434<br>435<br>436<br>437<br>438<br>439<br>440<br>441<br>442<br>443<br>444<br>445<br>446<br>447<br>448<br>449<br>450<br>451<br>452<br>453<br>454<br>455<br>456<br>457<br>458<br>459<br>460<br>461<br>462<br>463<br>464<br>465<br>466<br>467<br>468<br>469<br>470<br>471<br>472<br>473<br>474<br>475<br>476<br>477<br>478<br>479<br>480<br>481<br>482<br>483<br>484<br>485<br>486<br>487<br>488<br>489<br>490<br>491<br>492<br>493<br>494<br>495<br>496<br>497<br>498<br>499<br>500<br>501<br>502<br>503<br>504<br>505<br>506<br>507<br>508<br>509<br>510<br></code></pre></td>
<td class="source"><pre><code>
<cite>// instantiate the “TBalEndDlg” dialog class.</cite>
<cite>//</cite>
TBalEndDlg::TBalEndDlg(TWindow* parent, TResId resid,
  TBalEndStruct&amp; transfer)
:
  TDialog(parent, resid)
{
  Edit1 = <var>new</var> TEdAmt_(<var>this</var>, IDC_ENDBAL, <var>sizeof</var>(transfer.StartingAmt));
  Edit2 = <var>new</var> TEdate(<var>this</var>, IDC_ENDDATE, <var>sizeof</var>(transfer.EndDate));

  TransferBuffer = (<var>void</var> far*)&amp;transfer;
}

<cite>// let’s get the Winform screen set up.</cite>
<var>void</var>
TBalEndDlg::SetupWindow()
{
  <cite>// declare variables for this function.</cite>
  <var>long</var> <var>int</var>  datecomponent,monthvar,dayvar,yearvar;
  <var>int</var>          a,t,b;
  <var>char</var>       var[3],Date_[MAXDAT];
  <var>struct</var>     dosdate_t d;
  ldiv_t     n;

  TDialog::SetupWindow();

  <cite>// clear out the starting amount field.</cite>
  Edit1-&gt;Clear();

  <cite>// grab today’s date and assign it to the ending date input. </cite>
  _dos_getdate(&amp;d);
  monthvar = d.month;
  dayvar = d.day;
  yearvar = d.year;

  <cite>// take the current date components month, day and year and</cite>
  <cite>// convert to chars to be stored in the char array “Date_”.	</cite>
  <var>for</var>(a=0; a&lt;MAXDAT; a++) Date_[a] = 32;
	  Date_[2] = 47;
	  Date_[5] = 47;
	  t=0;
		  <var>do</var> {

			  <var>if</var>(t == 0) datecomponent = monthvar;
			  <var>if</var>(t == 1) datecomponent = dayvar;
			  <var>if</var>(t == 2) {
			  datecomponent = yearvar;
				  <cite>// y2k adjustment.	</cite>
				  <var>if</var> (datecomponent &lt; 2000 )
				  datecomponent = datecomponent - 1900;
				  <var>else</var>
				  datecomponent = datecomponent - 2000;
				      }

  var[0] = 48;
  var[1] = 48;
  var[2] = 32;
  b=1;
  <var>do</var> {
  n=ldiv(datecomponent,10L);
  datecomponent =n.quot;
		<var>if</var>(n.rem==0) var[b] = 48;
	  	<var>if</var>(n.rem==1) var[b] = 49;
		<var>if</var>(n.rem==2) var[b] = 50;
		<var>if</var>(n.rem==3) var[b] = 51;
		<var>if</var>(n.rem==4) var[b] = 52;
		<var>if</var>(n.rem==5) var[b] = 53;
		<var>if</var>(n.rem==6) var[b] = 54;
  		<var>if</var>(n.rem==7) var[b] = 55;
	  	<var>if</var>(n.rem==8) var[b] = 56;
		<var>if</var>(n.rem==9) var[b] = 57;
  b--;
  } <var>while</var>(datecomponent &gt; 0);

  <var>if</var>(t==0) <var>for</var>(a=0; a&lt;2; a++) Date_[a] = var[a];
  <var>if</var>(t==1) <var>for</var>(a=0; a&lt;2; a++) Date_[3+a] = var[a];
  <var>if</var>(t==2) <var>for</var>(a=0; a&lt;2; a++) Date_[6+a] = var[a];

  t++;
  } <var>while</var>(t &lt; 3);
  Date_[MAXDAT-1] = 0;
  Edit2-&gt;SetText(Date_);

  <var>for</var>(a=0; a&lt;MAXDAT-1; a++) Horddatexz[a] = Date_[a];

  Datedispz = 0;

}

<cite>// after the operator clicks the “OK” button, grab the Winform</cite>
<cite>// screen inputs and commence the data extraction process.</cite>
<var>void</var>
TBalEndDlg::CmOk()
{
  <cite>// declare variables for this function.</cite>
  <var>int</var>          a,PickVar,CountVar_,KountVar,fileinfo,f,r,date_compare,b,ff;
  <var>long</var> <var>int</var>   fileoffset, sizeofdatafile,accum,accum2,startbal,convert_to_number[MAXSELL],endbal, enddate_month;
  <var>long</var> <var>int</var>   enddate_day, enddate_year, transdate_month, transdate_day, transdate_year;
  <var>char</var>       kh,ch,dh,eh,transaction_date[MAXDAT],ExtractedAmt[MAXSELL];
  ldiv_t     n;
  streambuf  *inn = cin.rdbuf();

  <cite>// set the cursor to a hourglass.</cite>
  SetCursor(0, IDC_WAIT);


  <var>for</var>(a=0; a&lt;MAXSELL; a++) StartingAmt[a] = 32;
  <var>for</var>(a=0; a&lt;MAXDAT; a++) EndDate[a] = 32;

  <cite>// grab data from the Winform screen controls.</cite>
  GetDlgItemText(IDC_STARTINGBAL, StartingAmt, MAXSELL);
  GetDlgItemText(IDC_ENDDATE, EndDate, MAXDAT);


	          <cite>// format the retrieved starting amount so it is right justified.</cite>
		  <var>for</var>(a=0; a&lt;MAXSELL; a++) {
			  <var>if</var>(StartingAmt[a] &lt; 46 || StartingAmt[a] &gt; 57) StartingAmt[a] = 32;
		  }
			  r=0;
			  <var>do</var> {
				  <var>if</var>(StartingAmt[9] &lt; 48 || StartingAmt[9] &gt; 57) {
					  <var>for</var>(f=9; f&gt;0; f--) StartingAmt[f] = StartingAmt[f-1];
					  StartingAmt[0] = 32;
			  	  }
			  r++;
			  } <var>while</var>(r &lt; 10);


  <cite>// parse the retrieved ending date into month, day and year numerical</cite>
  <cite>// components for further processing.</cite>
  a=0;
  <var>do</var> {

	  <var>if</var>(a==0) b = 0;
	  <var>if</var>(a==1) b = 3;
	  <var>if</var>(a==2) b = 6;

  <var>for</var>(ff=0; ff&lt;2; ff++) {
  convert_to_number[ff] = 0;
  <var>if</var>(EndDate[b+ff] == 48) convert_to_number[ff] = 0;
  <var>if</var>(EndDate[b+ff] == 49) convert_to_number[ff] = 1;
  <var>if</var>(EndDate[b+ff] == 50) convert_to_number[ff] = 2;
  <var>if</var>(EndDate[b+ff] == 51) convert_to_number[ff] = 3;
  <var>if</var>(EndDate[b+ff] == 52) convert_to_number[ff] = 4;
  <var>if</var>(EndDate[b+ff] == 53) convert_to_number[ff] = 5;
  <var>if</var>(EndDate[b+ff] == 54) convert_to_number[ff] = 6;
  <var>if</var>(EndDate[b+ff] == 55) convert_to_number[ff] = 7;
  <var>if</var>(EndDate[b+ff] == 56) convert_to_number[ff] = 8;
  <var>if</var>(EndDate[b+ff] == 57) convert_to_number[ff] = 9;
  }
  <var>if</var>(a == 0) enddate_month = (convert_to_number[0] * 10) + (convert_to_number[1] * 1);
  <var>if</var>(a == 1) enddate_day = (convert_to_number[0] * 10) + (convert_to_number[1] * 1);
  <var>if</var>(a == 2) {
  enddate_year = (convert_to_number[0] * 10) + (convert_to_number[1] * 1);
  <cite>// include y2k adjustment.</cite>
  <var>if</var>(enddate_year &gt;= 80) enddate_year = enddate_year + 1900;
  <var>if</var>(enddate_year &lt; 80) enddate_year = enddate_year + 2000;
  }

  a++;
  } <var>while</var>(a &lt; 3);

  <cite>// convert the starting amount to a numerical value.</cite>
  <var>for</var>(a=0; a&lt;MAXSELL; a++) Sellvarq_[a]=StartingAmt[a];
	  <var>for</var>(a=0; a&lt;MAXSELL-1; a++) {
	  hold[a]=0;
	  <var>if</var>(StartingAmt[a] == 48) convert_to_number[a]=0;
	  <var>if</var>(StartingAmt[a] == 49) convert_to_number[a]=1;
	  <var>if</var>(StartingAmt[a] == 50) convert_to_number[a]=2;
	  <var>if</var>(StartingAmt[a] == 51) convert_to_number[a]=3;
	  <var>if</var>(StartingAmt[a] == 52) convert_to_number[a]=4;
	  <var>if</var>(StartingAmt[a] == 53) convert_to_number[a]=5;
  	  <var>if</var>(StartingAmt[a] == 54) convert_to_number[a]=6;
	  <var>if</var>(StartingAmt[a] == 55) convert_to_number[a]=7;
	  <var>if</var>(StartingAmt[a] == 56) convert_to_number[a]=8;
	  <var>if</var>(StartingAmt[a] == 57) convert_to_number[a]=9;
	  }
  startbal = ( (convert_to_number[0] * 100000000) + (convert_to_number[1] * 10000000) + (convert_to_number[2] * 1000000) +
  (convert_to_number[3] * 100000) + (convert_to_number[4] * 10000) + (convert_to_number[5] * 1000) + (convert_to_number[6] * 100) + (convert_to_number[8] * 10) + (convert_to_number[9] * 1) );

  <cite>// now, let’s prepare for data extraction from the check register</cite>
  <cite>// by purging the last used extracted data file and opening a new </cite>
  <cite>// stream to a file of the same name that is set for append record</cite>
  <cite>// mode. we will also open a stream to the check register fixed width</cite>
  <cite>// binary data file to read needed data from.</cite>
  remove(<kbd>"test_x.txt"</kbd>);

  PickVar = 0;

  fileinfo = open(<kbd>"cbook.txt"</kbd>, ios::in | ios::binary);
  sizeofdatafile = filelength(fileinfo);
  close(fileinfo);

  ifpstream ifile;
  ifile.open(<kbd>"cbook.txt"</kbd>, ios::in | ios::binary);
  inn = ifile.rdbuf();

  ofpstream ofile;
  ofile.open(<kbd>"test_x.txt"</kbd>, ios::ate | ios::app | ios::binary);
  fileoffset = 0;
  <var>do</var> {

<cite>// get the first 2 characters of the transaction type designator.</cite>
inn -&gt; seekpos(fileoffset+MAXDAT+MAXINVNO+MAXSELL+MAXNOTE2+MAXSELL+MAXSELL+MAXSELL+MAXCCODE+MAXCOMPANY2-9, ios::in);
	kh = ifile.readByte();
	eh = ifile.readByte();
		<cite>// get the first character of the transaction cleared designator.</cite>
  		inn -&gt; seekpos(fileoffset+CHECKBLEN-5-(MAXANS-1), ios::in);
	   	ch = ifile.readByte();
			<cite>// get the first character of the transaction paid designator.</cite>
                        inn -&gt; seekpos(fileoffset    +MAXDAT+MAXINVNO+MAXSELL+MAXNOTE2+MAXSELL+MAXSELL+MAXSELL+MAXCCODE+MAXCOMPANY2+MAXSELL+MAXANS-11, ios::in);
			dh = ifile.readByte();

  <cite>// parse the check register transaction date into month, day and</cite>
  <cite>// year numerical components for further processing.</cite>
  inn -&gt; seekpos(fileoffset+CHECKBLEN-5-(MAXDAT+MAXANS-2), ios::in);
  <var>for</var>(a=0; a&lt;MAXDAT-1; a++) transaction_date[a] = ifile.readByte();

  a = 0;
  <var>do</var> {

	  <var>if</var>(a == 0) b = 0;
	  <var>if</var>(a == 1) b = 3;
	  <var>if</var>(a == 2) b = 6;

  <var>for</var>(ff=0; ff&lt;2; ff++) {
  convert_to_number[ff] = 0;
  <var>if</var>(transaction_date [b+ff] == 48) convert_to_number[ff] = 0;
  <var>if</var>(transaction_date [b+ff] == 49) convert_to_number[ff] = 1;
  <var>if</var>(transaction_date [b+ff] == 50) convert_to_number[ff] = 2;
  <var>if</var>(transaction_date [b+ff] == 51) convert_to_number[ff] = 3;
  <var>if</var>(transaction_date [b+ff] == 52) convert_to_number[ff] = 4;
  <var>if</var>(transaction_date [b+ff] == 53) convert_to_number[ff] = 5;
  <var>if</var>(transaction_date [b+ff] == 54) convert_to_number[ff] = 6;
  <var>if</var>(transaction_date [b+ff] == 55) convert_to_number[ff] = 7;
  <var>if</var>(transaction_date [b+ff] == 56) convert_to_number[ff] = 8;
  <var>if</var>(transaction_date [b+ff] == 57) convert_to_number[ff] = 9;
  }
  <var>if</var>(a == 0) transdate_month = convert_to_number[0]*10 + convert_to_number[1]*1;
  <var>if</var>(a == 1) transdate_day = convert_to_number[0]*10 + convert_to_number[1]*1;
  <var>if</var>(a == 2) {
  transdate_year = (convert_to_number[0] * 10) + (convert_to_number[1] * 1);
  <cite>// include y2k adjustment.</cite>
  <var>if</var>(transdate_year &gt;= 80) transdate_year = transdate_year + 1900;
  <var>if</var>(transdate_year &lt; 80) transdate_year = transdate_year + 2000;
  }

  a++;
  } <var>while</var>(a &lt; 3);

  <cite>// now, check to see if the check register transaction date is</cite>
  <cite>// less than or equal to the ending date from the Winform.</cite>
  date_compare = 1;
  <var>if</var>(transdate_year &lt; enddate_year) date_compare = 0;

	  <var>if</var>(transdate_year == enddate_year &amp;&amp; transdate_month &lt; enddate_month) date_compare = 0;

		  <var>if</var>(transdate_year == enddate_year &amp;&amp; transdate_month == enddate_month) {
			  <var>if</var>(transdate_day &lt;= enddate_day) date_compare = 0;
		  }

  <cite>// if this transaction is a deposit that has not cleared the bank</cite>
  <cite>// and has not been paid and the check register transaction date is</cite>
  <cite>// less than or equal to the inputted ending date, then append a ‘D’ and</cite>
  <cite>// the check register credit amount to the extracted data file and</cite>
  <cite>// increment the line counter “PickVar” by 1.</cite>
  <var>if</var> ( kh == <kbd>'D'</kbd> &amp;&amp; eh == <kbd>'E'</kbd> &amp;&amp; ch == <kbd>'N'</kbd> &amp;&amp; dh == <kbd>'N'</kbd> &amp;&amp; date_compare == 0 ) {
	inn -&gt; seekpos(fileoffset+MAXDAT+MAXINVNO+MAXSELL+MAXNOTE2+MAXSELL+MAXSELL
	+MAXSELL+MAXCCODE+MAXCOMPANY2+MAXSELL+MAXANS+MAXANS-12, ios::in);
			  <var>for</var>(a=0; a&lt;MAXSELL-1; a++) ofile.writeByte(ifile.readByte());
			  ofile.writeByte(<kbd>'D'</kbd>);
			  PickVar++;
  }

  <cite>// if this transaction is not a deposit that has not cleared the bank</cite>
  <cite>// and has not been paid and the check register transaction date is</cite>
  <cite>// less than or equal to the inputted ending date, then append a ‘W’ and</cite>
  <cite>// the check register debit amount to the extracted data file and</cite>
  <cite>// increment the line counter “PickVar” by 1.</cite>
  <var>if</var> ( kh != <kbd>'D'</kbd> &amp;&amp; eh != <kbd>'E'</kbd> &amp;&amp; ch == <kbd>'N'</kbd> &amp;&amp; dh == <kbd>'N'</kbd> &amp;&amp; date_compare == 0 ) {
  inn -&gt; seekpos(fileoffset+MAXDAT+MAXINVNO+MAXSELL+MAXNOTE2+MAXSELL-5, ios::in);
			  <var>for</var>(a=0; a&lt;MAXSELL-1; a++) ofile.writeByte(ifile.readByte());
			  ofile.writeByte(<kbd>'W'</kbd>);
			  PickVar++;
  }

  <cite>// advance to the next fixed width record in the check register.</cite>
  fileoffset = fileoffset + CHECKBLEN;

  } <var>while</var>(fileoffset &lt; sizeofdatafile);
  ifile.close();
  ofile.close();

  <cite>// initialize the 2 2-dimensional char arrays to prepare for</cite>
  <cite>// loading the first 50 rows of the extracted check register data.</cite>
  <var>for</var>(a=0; a&lt;50; a++) {
  <var>for</var>(f=0; f&lt;MAXSELL-1; f++) Xvault2_[f][a] = 32;
  <var>for</var>(f=0; f&lt;MAXSELL-1; f++) Xvault4_[f][a] = 32;
  }

  <cite>// loop around the extracted data file "test_x.txt" to load</cite>
  <cite>// the first 50 rows of data into 2 2-dimensional char arrays</cite>
  <cite>// that will later populate the print preview window. also,</cite>
  <cite>// sum deposits and withdrawals with looping.</cite>
  fileinfo = open(<kbd>"test_x.txt"</kbd>, ios::binary);
  sizeofdatafile = filelength(fileinfo);
  close(fileinfo);

  ifile.open(<kbd>"test_x.txt"</kbd>, ios::in | ios::binary);
  inn = ifile.rdbuf();
  CountVar_ = 0;
  KountVar = 0;
  fileoffset = 0;
  accum = 0;
  accum2 = 0;
  <var>do</var> {

  <cite>// read the amount from the current file offset and convert</cite>
  <cite>// this to a numerical amount for further processing.</cite>
  inn -&gt; seekpos(fileoffset+MAXSELL-1, ios::in);
  kh = ifile.readByte();
  inn -&gt; seekpos(fileoffset, ios::in);
  <var>for</var>(a=0; a&lt;MAXSELL; a++) ExtractedAmt[a] = ifile.readByte();

  <var>for</var>(a=0; a&lt;MAXSELL; a++) {
	  <var>if</var>(StartingAmt[a] &lt; 46 || StartingAmt[a] &gt; 57) StartingAmt[a] = 32;
  }

  r = 0;
  <var>do</var> {
  		<var>if</var>(StartingAmt[9] &lt; 48 || StartingAmt[9] &gt; 57) {
				<var>for</var>(f=9; f&gt;0; f--) StartingAmt[f] = StartingAmt[f-1];
			   StartingAmt[0] = 32;
	  	}
  r++;
  } <var>while</var>(r &lt; 10);

  <var>for</var>(a=0; a&lt;MAXSELL-1; a++) {
  convert_to_number[a]=0;
  <var>if</var>(StartingAmt[a] == 48) convert_to_number[a] = 0;
  <var>if</var>(StartingAmt[a] == 49) convert_to_number[a] = 1;
  <var>if</var>(StartingAmt[a] == 50) convert_to_number[a] = 2;
  <var>if</var>(StartingAmt[a] == 51) convert_to_number[a] = 3;
  <var>if</var>(StartingAmt[a] == 52) convert_to_number[a] = 4;
  <var>if</var>(StartingAmt[a] == 53) convert_to_number[a] = 5;
  <var>if</var>(StartingAmt[a] == 54) convert_to_number[a] = 6;
  <var>if</var>(StartingAmt[a] == 55) convert_to_number[a] = 7;
  <var>if</var>(StartingAmt[a] == 56) convert_to_number[a] = 8;
  <var>if</var>(StartingAmt[a] == 57) convert_to_number[a] = 9;
  }
  <cite>// accumulate for deposit transactions into the variable “accum”.</cite>
  <var>if</var> ( kh == <kbd>'D'</kbd> ) accum = accum + ( (convert_to_number[0] * 100000000) + (convert_to_number[1] * 10000000) + (convert_to_number[2] * 1000000) +
  (convert_to_number[3] * 100000) + (convert_to_number[4] * 10000) + (convert_to_number[5] * 1000) + (convert_to_number[6] * 100) + (convert_to_number[8] * 10) + (convert_to_number[9] * 1) );
  <cite>// accumulate for withdrawal transactions into the variable “accum2”.</cite>
  <var>if</var> ( kh == <kbd>'W'</kbd> ) accum2 = accum2 + ( (convert_to_number[0] * 100000000) + (convert_to_number[1] * 10000000) + (convert_to_number[2] * 1000000) +
  (convert_to_number[3] * 100000) + (convert_to_number[4] * 10000) + (convert_to_number[5] * 1000) + (convert_to_number[6] * 100) + (convert_to_number[8] * 10) + (convert_to_number[9] * 1) );
	     <cite>// if the transaction is a deposit and all 50 rows of the</cite>
             <cite>// 2-dimensional char array “Xvault2_” have not been filled,</cite>
             <cite>// then add the amount to the current slot in the char array</cite>
             <cite>// “Xvault2_” and then increment the row counter “CountVar_” by 1.</cite>
             <var>if</var> ( kh == <kbd>'D'</kbd> &amp;&amp; CountVar_ &lt; 50 ) {
		  inn -&gt; seekpos(fileoffset, ios::in);
		      <var>for</var>(r=0; r&lt;MAXSELL-1; r++) Xvault2_[r][CountVar_] = ifile.readByte();
		      CountVar_++;
	     }
	          <cite>// if the transaction is a withdrawal and all 50 rows of the</cite>
                  <cite>// 2-dimensional char array “Xvault4_” have not been filled,</cite>
                  <cite>// then add the amount to the current slot in the char array</cite>
                  <cite>// “Xvault4_” and then increment the row counter “KountVar” by 1.</cite>
    		  <var>if</var> ( kh == <kbd>'W'</kbd> &amp;&amp; KountVar &lt; 50 ) {
			  inn -&gt; seekpos(fileoffset, ios::in);
				  	<var>for</var>(r=0; r&lt;MAXSELL-1; r++) Xvault4_[r][KountVar] = ifile.readByte();
				  	KountVar++;
		  }

  <cite>// advance to the next fixed width record in the extracted check book data file.</cite>
  fileoffset = fileoffset + MAXSELL;

  } <var>while</var>(fileoffset &lt; sizeofdatafile);
  ifile.close();

  <cite>// calculate the ending balance that will appear on the check</cite>
  <cite>// register reconciliation. this is the starting balance less</cite>
  <cite>// deposits plus withdrawals.</cite>
  endbal = startbal - accum + accum2;

  <cite>// take the numerical ending balance amount and convert it to</cite>
  <cite>// chars to be stored in the char array “totpay”.	</cite>
  <var>for</var>(a=0; a&lt;MAXSELL; a++) totpay[a] = 32;
	  <var>if</var>(endbal &lt; 0) {
	  totpay[0] = <kbd>'-'</kbd>;
	  endbal = -endbal;
	  }
  totpay[9] = 48;
  totpay[8] = 48;
  totpay[7] = 46;
  totpay[6] = 48;
  r=9;
  <var>do</var> {
  n=ldiv(endbal,10L);
  endbal=n.quot;
  <var>if</var>(n.rem==0) totpay[r] = 48;
  <var>if</var>(n.rem==1) totpay[r] = 49;
  <var>if</var>(n.rem==2) totpay[r] = 50;
  <var>if</var>(n.rem==3) totpay[r] = 51;
  <var>if</var>(n.rem==4) totpay[r] = 52;
  <var>if</var>(n.rem==5) totpay[r] = 53;
  <var>if</var>(n.rem==6) totpay[r] = 54;
  <var>if</var>(n.rem==7) totpay[r] = 55;
  <var>if</var>(n.rem==8) totpay[r] = 56;
  <var>if</var>(n.rem==9) totpay[r] = 57;
  r--;
  <var>if</var>(r == 7) r--;
  } <var>while</var>(endbal &gt; 0);

  r=0;
  <var>do</var> {
  r++;
  } <var>while</var>(totpay[r] == 32 &amp;&amp; r &lt; MAXSELL-1);
  totpay[r-1] = <kbd>'$'</kbd>;
  
  <cite>// set the cursor to an arrow.</cite>
  SetCursor(0, IDC_ARROW);

		<cite>// this code will calculate the number of pages in the</cite>
		<cite>// print preview assuming there are 50 lines per page.</cite>
		mPage2 = 0;
		<var>do</var> {
		mPage2++;
		PickVar = PickVar - 50;
		} <var>while</var>( PickVar &gt;= 50 );
			<var>if</var> ( PickVar &gt; 0 ) mPage2++;

<cite>// this code snippet will initialize the trappings of a "TDecoratedFrame"</cite>
<cite>// object, “frame_d”. it will incorporate the “TPrevWindow” class as well</cite>
<cite>// as the bitmaps associated with each member function of the class into</cite>
<cite>// the "TDecoratedFrame" object. a control bar object, “ControlBar”, is</cite>
<cite>// constructed from "TMyControlBar". the buttons for the member functions</cite>
<cite>// are embedded into this control bar. the dimensions of the "TDecoratedFrame"</cite>
<cite>// window are set as well as the page count and the file stream offset,</cite>
<cite>// “fileoffset”. finally, the decorated print preview window is brought to life</cite>
<cite>// with the directive, “frame_d-&gt;Create()”.</cite>
TDecoratedFrame* frame_d = <var>new</var> TDecoratedFrame(0, <kbd>"Reconciliation Preview"</kbd>, <var>new</var> TPrevWindow, <var>false</var>);
hndl = <var>this</var>-&gt;GetHandle();
TMyControlBar* ControlBar;
ControlBar = <var>new</var> TMyControlBar(frame_d);
frame_d-&gt;Insert(*ControlBar, TDecoratedFrame::Top);
G1 = <var>new</var> TButtonGadget(IDB_BITMAP1, IDB_BITMAP1);
ControlBar-&gt;Insert(*G1);
Ge1 = <var>new</var> TButtonGadgetEnabler(frame_d-&gt;GetHandle(), G1);
ControlBar-&gt;Insert(*<var>new</var> TSeparatorGadget);
G2 = <var>new</var> TButtonGadget(IDB_BITMAP2, IDB_BITMAP2);
ControlBar-&gt;Insert(*G2);
Ge2 = <var>new</var> TButtonGadgetEnabler(frame_d-&gt;GetHandle(), G2);
ControlBar-&gt;Insert(*<var>new</var> TSeparatorGadget);
ControlBar-&gt;Insert(*<var>new</var> TButtonGadget(IDB_BITMAP3, IDB_BITMAP3, 0, <var>true</var>));
ControlBar-&gt;Insert(*<var>new</var> TSeparatorGadget);
PageCount = 1;
fileoffset = 0;
frame_d-&gt;Attr.X = 10;
frame_d-&gt;Attr.Y = 10;
frame_d-&gt;Attr.W = 630;
frame_d-&gt;Attr.H = 440;
	<cite>// the page navigation buttons are initially enabled and/or</cite>
        <cite>// disabled based on the number of pages in the print preview</cite>
        <cite>// operation for cases where the total number of pages is 1 or</cite>
        <cite>// there are at least 2 or more pages.</cite>
	<var>if</var> ( mPage2 == 1 ) {
	Ge1-&gt;Enable(<var>false</var>);
	Ge2-&gt;Enable(<var>false</var>);
	}
		<var>if</var> ( mPage2 &gt;= 2 ) {
		Ge1-&gt;Enable(<var>true</var>);
		Ge2-&gt;Enable(<var>false</var>);
		}
			frame_d-&gt;Create();

}

<cite>// the page navigation buttons are enabled and disabled based on the number</cite>
<cite>// of pages in the print preview and also at what page number in the preview</cite>
<cite>// operation is currently being viewed. the variable “PageCount” holds the</cite>
<cite>// number of the currently displayed page in the preview screen. this member</cite>
<cite>// function, "TBalEndDlg::WMChar(WPARAM cmd, LPARAM cmd2)", will be sent to</cite>
<cite>// the handle of the decorated print preview window to use the current page</cite>
<cite>// number as well as the total number of pages in the print preview operation</cite>
<cite>// to update which navigation buttons on the decorated window are enabled</cite>
<cite>// and/or disabled.</cite>
LRESULT
TBalEndDlg::WMChar(WPARAM cmd, LPARAM cmd2)
{

 <var>if</var> ( mPage2 &gt;= 2 &amp;&amp; PageCount &lt; mPage2 &amp;&amp; PageCount &gt; 1 ) {
 Ge1-&gt;Enable(<var>true</var>);
 Ge2-&gt;Enable(<var>true</var>);
 }

 	<var>if</var> ( mPage2 &gt;= 2 &amp;&amp; PageCount == mPage2 ) {
Ge1-&gt;Enable(<var>false</var>);
Ge2-&gt;Enable(<var>true</var>);
}

 <var>if</var> ( mPage2 &gt;= 2 &amp;&amp; PageCount == 1 ) {
 Ge1-&gt;Enable(<var>true</var>);
 Ge2-&gt;Enable(<var>false</var>);
 }

}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>CODE THE PRINT PREVIEW OUTPUT TO THE SCREEN</b><br>
<br>
Below is the code under the “Paint(TDC& dc, bool erase, TRect& rect)” member component of the “TPrevWindow” class that will paint the print preview information in the decorated window frame that appears after the data extraction processing is complete.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br></code></pre></td>
<td class="source"><pre><code>
<var>void</var>
TPrevWindow::Paint(TDC&amp; dc, <var>bool</var> erase, TRect&amp; rect)
{
  <cite>// declare variables for this function.</cite>
  <var>long</var> <var>int</var>   datecomponent,monthvar,dayvar,yearvar, pagevar;
  <var>int</var>          exta,a,b,f,r,t,ext1,ext2,ext3,ext4,ext44,MarkVar1,MarkVar2,ext5,ext6,ext7;
  <var>float</var>       linecounter;
  <var>char</var>       var[3],Date_[MAXDAT],var2[5];
  <var>char</var>       Idate[MAXDAT],Ino[MAXINVNO],Inamt[MAXSELL],Idescr[MAXNOTE2],Icomp[MAXCOMPANY2];
  <var>char</var>       Indescr[MAXNOTE2],Indisc[MAXSELL],Inpay[MAXSELL],Idr[MAXSELL],Ie_desc[MAXNOTE];
  <var>char</var>       Ivalue[MAXSELL2],Icr[MAXSELL],Ibal[MAXSELL],Ivend[MAXCOMPANY2],Icode[MAXCCODE];
  <var>char</var>       Ipd[MAXDAT],Iinv[MAXDAT],Icrx[13],Ibalx[13],Idrx[13];
  <var>struct</var>     dosdate_t d;
  ldiv_t      n;
  TSize     extent;


  <cite>// take the current page number of the print preview and</cite>
  <cite>// convert to chars to be stored in the char array “var2”.	</cite>
  Pagevar = PageCount;
  <var>for</var>(a=0; a&lt;5; a++) var2[a] = 32;
  var2[4] = 48;
  b=4;
  <var>do</var> {
  n = ldiv(pagevar,10L);
  pagevar = n.quot;
  <var>if</var>(n.rem==0) var2[b] = 48;
  <var>if</var>(n.rem==1) var2[b] = 49;
  <var>if</var>(n.rem==2) var2[b] = 50;
  <var>if</var>(n.rem==3) var2[b] = 51;
  <var>if</var>(n.rem==4) var2[b] = 52;
  <var>if</var>(n.rem==5) var2[b] = 53;
  <var>if</var>(n.rem==6) var2[b] = 54;
  <var>if</var>(n.rem==7) var2[b] = 55;
  <var>if</var>(n.rem==8) var2[b] = 56;
  <var>if</var>(n.rem==9) var2[b] = 57;
  b--;
  } <var>while</var>(pagevar &gt; 0);
  var2[5]=0;


  <cite>// take the current date components month, day and year and</cite>
  <cite>// convert to chars to be stored in the char array “Date_”.	</cite>
  _dos_getdate(&amp;d);
  monthvar = d.month;
  dayvar = d.day;
  yearvar = d.year;

  <cite>// take the current date components month, day and year and</cite>
  <cite>// convert to chars to be stored in the char array “Date_”.	</cite>
  <var>for</var>(a=0; a&lt;MAXDAT; a++) Date_[a] = 32;
	  Date_[2] = 47;
	  Date_[5] = 47;
	  t=0;
		  <var>do</var> {

			  <var>if</var>(t == 0) datecomponent = monthvar;
			  <var>if</var>(t == 1) datecomponent = dayvar;
			  <var>if</var>(t == 2) {
			  datecomponent = yearvar;
				  <cite>// y2k adjustment.	</cite>
				  <var>if</var> (datecomponent &lt; 2000 )
				  datecomponent = datecomponent - 1900;
				  <var>else</var>
				  datecomponent = datecomponent - 2000;
				      }

  var[0] = 48;
  var[1] = 48;
  var[2] = 32;
  b=1;
  <var>do</var> {
  n=ldiv(datecomponent,10L);
  datecomponent =n.quot;
		<var>if</var>(n.rem==0) var[b] = 48;
	  	<var>if</var>(n.rem==1) var[b] = 49;
		<var>if</var>(n.rem==2) var[b] = 50;
		<var>if</var>(n.rem==3) var[b] = 51;
		<var>if</var>(n.rem==4) var[b] = 52;
		<var>if</var>(n.rem==5) var[b] = 53;
		<var>if</var>(n.rem==6) var[b] = 54;
  		<var>if</var>(n.rem==7) var[b] = 55;
	  	<var>if</var>(n.rem==8) var[b] = 56;
		<var>if</var>(n.rem==9) var[b] = 57;
  b--;
  } <var>while</var>(datecomponent &gt; 0);

  <var>if</var>(t==0) <var>for</var>(a=0; a&lt;2; a++) Date_[a] = var[a];
  <var>if</var>(t==1) <var>for</var>(a=0; a&lt;2; a++) Date_[3+a] = var[a];
  <var>if</var>(t==2) <var>for</var>(a=0; a&lt;2; a++) Date_[6+a] = var[a];

  t++;
  } <var>while</var>(t &lt; 3);
  Date_[MAXDAT-1] = 0;


  <cite>// set the print preview to scale 100 logical units per</cite>
  <cite>// inch of screen width. set the mapping mode to “MM_LOENGLISH”</cite>
  <cite>// and save the current device context.</cite>
  <var>const</var> UnitsPerInch = 100;
  dc.SaveDC();
  dc.SetMapMode(MM_LOENGLISH);
  <var>int</var> x1 = 0;
  <var>int</var> y1 = 0;

  <cite>// using a bold "Times New Roman" font, paint the heading</cite>
  <cite>// and column labels of the print preview.</cite>
  TFont fontBold2(<kbd>"Times New Roman"</kbd>, 20, 8, 0, 0, FW_BOLD);

  dc.SelectObject(fontBold2);

  dc.TextOut(x1 + ( 0.40 * UnitsPerInch ), y1 - ( 0.20 * UnitsPerInch ), <kbd>"Page:"</kbd>, 5);

  extent = dc.GetTextExtent(<kbd>"Page:"</kbd>, 5);
  ext1 = extent.cx;

  dc.TextOut(x1 + ( 0.40 * UnitsPerInch ), y1 - ( 0.40 * UnitsPerInch ), <kbd>"Date:"</kbd>, 5);

  extent = dc.GetTextExtent(<kbd>"Date:"</kbd>, 5);
  ext2 = extent.cx;

  dc.TextOut(x1 + ( 5.65 * UnitsPerInch ), y1 - ( 0.20 * UnitsPerInch ), <kbd>"Acme Company"</kbd>, 12);
  dc.TextOut(x1 + ( 5.65 * UnitsPerInch ), y1 - ( 0.40 * UnitsPerInch ), <kbd>"123 Acme Blvd."</kbd>, 14);
  dc.TextOut(x1 + ( 5.65 * UnitsPerInch ), y1 - ( 0.60 * UnitsPerInch ), <kbd>"Anywhere, Anystate 44444"</kbd>, 24);

  dc.TextOut(x1 + ( 2.55 * UnitsPerInch ), y1 - ( 0.85 * UnitsPerInch ), <kbd>"Reconciliation"</kbd>, 14);

  dc.TextOut(x1 + ( 0.15 * UnitsPerInch ), y1 - ( 1.15 * UnitsPerInch ), <kbd>"Starting Balance"</kbd>, 16);
  dc.TextOut(x1 + ( 1.75 * UnitsPerInch ), y1 - ( 1.15 * UnitsPerInch ), <kbd>"Deposits"</kbd>, 8);
  dc.TextOut(x1 + ( 3.00 * UnitsPerInch ), y1 - ( 1.15 * UnitsPerInch ), <kbd>"Checks/Withdrawals"</kbd>, 18);
  dc.TextOut(x1 + ( 6.00 * UnitsPerInch ), y1 - ( 1.15 * UnitsPerInch ), <kbd>"Ending Balance"</kbd>, 14);

  <cite>// using a normal "Times New Roman" font, paint the extracted</cite>
  <cite>// check register data previously stored in the 2 2-dimensional</cite>
  <cite>// char arrays “Xvault2_” and “Xvault4_”.</cite>
  TFont fontNorm2(<kbd>"Courier"</kbd>, 20, 8, 0, 0, FW_NORMAL);

  dc.SelectObject(fontNorm2);

  linecounter = 1.35;
  f = 0;
  MarkVar1 = 0;
  MarkVar2 = 0;
  <var>do</var> {

	  <var>for</var>(r=0; r&lt;MAXSELL-1; r++) Idr[r] = Xvault2_[r][f];
		  <var>for</var>(r=0; r&lt;MAXSELL-1; r++) Icr[r] = Xvault4_[r][f];

			  <var>for</var>(r=0; r&lt;MAXSELL; r++) {
				  <var>if</var>(Sellvarq_[r] &lt; 33 || Sellvarq_[r] &gt; 126) Sellvarq_[r] = 32;
					  <var>if</var>(Idr[r] &lt; 33 || Idr[r] &gt; 126) Idr[r] = 32;
						  <var>if</var>(Icr[r] &lt; 33 || Icr[r] &gt; 126) Icr[r] = 32;
							  <var>if</var>(totpay[r] &lt; 33 || totpay[r] &gt; 126) totpay[r] = 32;
			  }

  Sellvarq_[MAXSELL-1] = 0;
  Idr[MAXSELL-1] = 0;
  Icr[MAXSELL-1] = 0;
  totpay[MAXSELL-1] = 0;

  	<var>if</var> ( PageCount == 1 &amp;&amp; MarkVar1 == 0 ) {
dc.TextOut(x1 + ( 0.15 * UnitsPerInch ), y1 - ( rr * UnitsPerInch ), Sellvarq_, MAXSELL-1);
	MarkVar1 = 1;
	}
  	dc.TextOut(x1 + ( 1.75 * UnitsPerInch ), y1 - ( rr * UnitsPerInch ), Idr, MAXSELL-1);
	dc.TextOut(x1 + ( 3.00 * UnitsPerInch ), y1 - ( rr * UnitsPerInch ), Icr, MAXSELL-1);
  		<var>if</var> ( PageCount == mPage2 &amp;&amp; MarkVar2 == 0 &amp;&amp; Xvault4_[MAXSELL-2][f+1] == 32 ) {
dc.TextOut(x1 + ( 6.00 * UnitsPerInch ), y1 - ( rr * UnitsPerInch ), totpay, MAXSELL-1);
		MarkVar2 = 1;
		}
  		linecounter = linecounter + 0.20;
  		f++;

  } <var>while</var>(f &lt; 50);

  var2[5] = 0;
	  dc.TextOut(x1 + ( 0.46 * UnitsPerInch ) + ext1, y1 - ( 0.20 * UnitsPerInch ), var2, 5);
		  Date_[MAXDAT-1] = 0;
dc.TextOut(x1 + ( 0.46 * UnitsPerInch ) + ext2, y1 - ( 0.40 * UnitsPerInch ), Date_,    MAXDAT-1);

dc.RestoreObjects();
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
This is what the print preview screen looks like.	<br>
<br>
<br><IMG SRC="secondpreview.jpg" alt=""><br>
<br>
<b>HERE’S THE CODE FOR THE NAVIGATION AND PRINT BUTTONS</b><br>
<br>
This next section will explore the coding used for the member functions of the “TPrevWindow” class. Immediately below I have included C++ code for navigating to the next page in the print preview window after the operator has clicked its “right arrow” button. As previously mentioned, it will move the file offset of the extracted check register binary data file “test_x.txt”, forward by 50 rows of check register transactions. <br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br></code></pre></td>
<td class="source"><pre><code>
<cite>// this “PrnNext” member function of the “TPrevWindow”</cite>
<cite>// class will advance to the next page in the print preview window.</cite>
<var>void</var>
TPrevWindow::PrnNext()
{
  <cite>// declare variables for this function.</cite>
  <var>int</var>          fileinfo,a,f,CountVar_,r,KountVar,b;
  <var>long</var> <var>int</var>   sizeofdatafile,fileoffset_local, convert_to_number[13],accum,accum2;
  <var>char</var>       Runbal[MAXSELL],kh;
  streambuf *inn = cin.rdbuf();
  ifpstream ifile;
  ldiv_t      n;

  <cite>// if the current page is less than the total number of pages in the print preview </cite>
  <cite>// operation, then increment the file stream offset by an amount equivalent to 50 rows</cite>
  <cite>// of extracted check register data. also, blank out the 2 2-dimensional char arrays</cite>
  <cite>// used to populate the print preview window.</cite>
  <var>if</var> ( PageCount &lt; mPage2 ) {
  PageCount++;
  fileoffset = fileoffset + ( 50 * MAXSELL );
  <var>for</var>(a=0; a&lt;50; a++) {
  <var>for</var>(f=0; f&lt;MAXSELL-1; f++) Xvault2_[f][a] = 32;
  <var>for</var>(f=0; f&lt;MAXSELL-1; f++) Xvault4_[f][a] = 32;
  }

  <cite>// get the length of the extracted check register data file and open a file stream to it. also,</cite>
  <cite>// initialize the variables used before commencing the "do-while" loop.</cite>
  fileinfo = open(<kbd>"test_x.txt"</kbd>, ios::binary);
  sizeofdatafile = filelength(fileinfo);
  close(fileinfo);

  ifile.open(<kbd>"test_x.txt"</kbd>, ios::in | ios::binary);
  inn = ifile.rdbuf();
  CountVar_ = 0;
  KountVar = 0;
  fileoffset_local = fileoffset;

  <cite>// loop around and fill the 2 2-dimensional char arrays with the next 50 rows of</cite>
  <cite>// extracted check register data or to the end of the data file, whichever comes first.</cite>
  <var>do</var> {

  inn -&gt; seekpos(fileoffset_local+MAXSELL-1, ios::in);
  kh = ifile.readByte();

          <cite>// if it is a deposit transaction, then</cite>
          <cite>// add the amount to the char array, “Xvault2_”</cite>
          <cite>// and increment the row counter "CountVar_" by 1.</cite>
	  <var>if</var> ( kh == <kbd>'D'</kbd> ) {
	  inn -&gt; seekpos(fileoffset_local, ios::in);
		  <var>for</var>(r=0; r&lt;MAXSELL-1; r++) Xvault2_[r][CountVar_] = ifile.readByte();
		  CountVar_++;
	  }

                  <cite>// if it is a withdrawal transaction, then</cite>
                  <cite>// add the amount to the char array, “Xvault4_”</cite>
                  <cite>// and increment the row counter "KountVar" by 1.</cite>
		  <var>if</var> ( kh == <kbd>'W'</kbd> ) {
		  inn -&gt; seekpos(fileoffset_local, ios::in);
			  <var>for</var>(r=0; r&lt;MAXSELL-1; r++) Xvault4_[r][KountVar] = ifile.readByte();
			  KountVar++;
		  }
 <cite>// advance to the next fixed width record in the extracted check book data file.</cite>
 fileoffset_local = fileoffset_local + MAXSELL;

  } <var>while</var>(CountVar_&lt; 50 &amp;&amp; KountVar &lt; 50 &amp;&amp; fileoffset_local &lt; sizeofdatafile);
  ifile.close();

  <cite>// update the scroller on the print preview window. then fire a message,</cite>
  <cite>// "WM_CHAR", which is a member function of the "TBalEndDlg" dialog class</cite>
  <cite>// to the handle of the decorated print preview window to update the left</cite>
  <cite>// and right navigation keys so they enable and/or disable based on the</cite>
  <cite>// current page number and the total pages in the print preview operation.</cite>
  Scroller-&gt;ScrollBy(100, 100);
  Scroller-&gt;ScrollBy(-100, -100);
  GetWindowPtr(hndl)-&gt;SendMessage(WM_CHAR, 0, 0);

  }

}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Here is the programming for navigating to the previous page in the print preview window after the operator has clicked the “left arrow” button.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br></code></pre></td>
<td class="source"><pre><code>
<cite>// this “PrnPrevious” member function of the “TPrevWindow”</cite>
<cite>// class will advance to the previous page in the print preview window.</cite>
<var>void</var>
TPrevWindow::PrnPrevious()
{
  <cite>// declare variables for this function.</cite>
  <var>int</var>          fileinfo,a,f,CountVar_,r,KountVar,b;
  <var>long</var> <var>int</var>   sizeofdatafile,fileoffset_local, convert_to_number[13],accum,accum2;
  <var>char</var>       Runbal[MAXSELL],kh;
  streambuf *inn = cin.rdbuf();
  ifpstream ifile;
  ldiv_t      n;

  <cite>// if the current page is greater than one, then decrement the file stream offset by</cite>
  <cite>// an amount equivalent to 50 rows of extracted check register data. also,</cite>
  <cite>// blank out the 2 2-dimensional char arrays used to populate the print preview  window.</cite>
  <var>if</var> ( PageCount &gt; 1 ) {
  PageCount--;
  fileoffset = fileoffset - ( 50 * MAXSELL );
  <var>for</var>(a=0; a&lt;50; a++) {
  <var>for</var>(f=0; f&lt;MAXSELL-1; f++) Xvault2_[f][a] = 32;
  <var>for</var>(f=0; f&lt;MAXSELL-1; f++) Xvault4_[f][a] = 32;
  }

 <cite>// get the length of the extracted check register data file and open a file stream to it. also,</cite>
 <cite>// initialize the variables used before commencing the "do-while" loop.</cite>
 fileinfo = open(<kbd>"test_x.txt"</kbd>, ios::binary);
 sizeofdatafile = filelength(fileinfo);
 close(fileinfo);

  ifile.open(<kbd>"test_x.txt"</kbd>, ios::in | ios::binary);
  inn = ifile.rdbuf();
  CountVar_ = 0;
  KountVar = 0;
  fileoffset_local = fileoffset;

  <cite>// loop around and fill the 2 2-dimensional char arrays with the next 50 rows of</cite>
  <cite>// extracted check register data or to the end of the data file, whichever comes first.</cite>
  <var>do</var> {

  inn -&gt; seekpos(fileoffset_local+MAXSELL-1, ios::in);
  kh = ifile.readByte();

          <cite>// if it is a deposit transaction, then</cite>
          <cite>// add the amount to the char array, “Xvault2_”</cite>
          <cite>// and increment the row counter "CountVar_" by 1.</cite>
	  <var>if</var> ( kh == <kbd>'D'</kbd> ) {
	  inn -&gt; seekpos(fileoffset_local, ios::in);
		  <var>for</var>(r=0; r&lt;MAXSELL-1; r++) Xvault2_[r][CountVar_] = ifile.readByte();
		  CountVar_++;
	  }

                  <cite>// if it is a withdrawal transaction, then</cite>
                  <cite>// add the amount to the char array, “Xvault4_”</cite>
                  <cite>// and increment the row counter "KountVar" by 1.</cite>
		  <var>if</var> ( kh == <kbd>'W'</kbd> ) {
		  inn -&gt; seekpos(fileoffset_local, ios::in);
			  <var>for</var>(r=0; r&lt;MAXSELL-1; r++) Xvault4_[r][KountVar] = ifile.readByte();
			  KountVar++;
		  }

 <cite>// advance to the next fixed width record in the extracted check book data file.</cite>
 fileoffset_local = fileoffset_local + MAXSELL;

  } <var>while</var>(CountVar_&lt; 50 &amp;&amp; KountVar &lt; 50 &amp;&amp; fileoffset_local &lt; sizeofdatafile);
  ifile.close();

  <cite>// update the scroller on the print preview window. then fire a message,</cite>
  <cite>// "WM_CHAR", which is a member function of the "TBalEndDlg" dialog class</cite>
  <cite>// to the handle of the decorated print preview window to update the left</cite>
  <cite>// and right navigation keys so they enable and/or disable based on the</cite>
  <cite>// current page number and the total pages in the print preview operation.</cite>
  Scroller-&gt;ScrollBy(100, 100);
  Scroller-&gt;ScrollBy(-100, -100);
  GetWindowPtr(hndl)-&gt;SendMessage(WM_CHAR, 0, 0);

  }

}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The patch of code below fires after the operator has clicked the “printer” button on the print preview window. It will show a standard windows printer dialog box for selecting the needed printer. The operator can also specify the number of copies desired.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br></code></pre></td>
<td class="source"><pre><code>
<cite>// this “PrnImage” member function of the “TPrevWindow” class will display a print dialog on top of the print</cite>
<cite>// preview screen. it allows the operator to select the desired printer to render print preview output to.</cite>
<cite>// the operator can also set the number of copies for the print operation via the</cite>
<cite>// “mData.GetDevMode()-&gt;dmCopies” directive. The other parameters of the print dialog could be processed,</cite>
<cite>// but the customer had no need for this added functionality.</cite>
<var>void</var>
TPrevWindow::PrnImage()
{
  <cite>// declare variables for this function.</cite>
  <var>int</var>          totcopies,numberofcopies,pcounter;

  <cite>// set the “Printer” object to null and construct the “mData” object from “TPrintDialog::TData”.</cite>
  <cite>// then set the “mPageDoc” variable to the number of pages in the print preview operation.</cite>
  Printer = 0;
  TPrintDialog::TData mData;
  mPageDoc = mPage2;

	  <cite>// upon clicking the “OK” button in the printer dialog screen, proceed with as follows.</cite>
	  <var>if</var> ( TPrintDialog(<var>this</var>, mData).Execute() == IDOK ) {

		  <cite>// get the number of copies desired from the printer dialog and multiply that by the </cite>
		  <cite>// number of pages in the print preview operation.	</cite>
		  totcopies = mData.GetDevMode()-&gt;dmCopies;
		  mPage2 = mPage2 * totcopies;
		  <cite>// if the current print preview page is greater than 1, then scroll back the </cite>
		  <cite>// print preview by 1 page until you are viewing the first page of the print preview.		</cite>
		  <var>if</var> ( PageCount &gt; 1 ) {
			  <var>do</var> {
			  TPrevWindow::PrnPrevious();
			  } <var>while</var>(PageCount &gt; 1);
		  }

			  <cite>// next, intialize a couple of variables and then render the print preview to the selected</cite>
			  <cite>// printer for the total number of printed copies desired.				</cite>
			  fileoffset = 0;
			  pcounter = 0;
			  <var>do</var> {
			  numberofcopies = 0;
				  <var>do</var> {
				  Printer = <var>new</var> TPrinter; 
				  T2Printout   printout(<kbd>"Reconciliation"</kbd>, <var>this</var>);
				  Printer-&gt;SetData(&amp;mData);
				  Printer-&gt;Print(<var>this</var>, printout, <var>false</var>);
				  Printer = 0;
				  numberofcopies++;
				  } <var>while</var>(numberofcopies &lt; totcopies);
					  <var>if</var> ( PageCount &lt; mPageDoc) TPrevWindow::PrnNext();
			  pcounter++;
			  } <var>while</var>(PageCount &lt;= mPageDoc &amp;&amp; pcounter &lt; mPageDoc);

  }

}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This is what appears after the “print” button has been clicked.<br>
<br>
<br><IMG SRC="thirdpreview.jpg" alt=""><br>
<br>
<b>CODE FOR THE PRINT PREVIEW RENDERING TO A SELECTED PRINTER</b><br>
<br>
After clicking the “Print” button on the printer dialog box, the output is rendered to the selected printer using the code below.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br></code></pre></td>
<td class="source"><pre><code>
<cite>// this is the class declaration for the “T2Printout” class, which</cite>
<cite>// handles the rendering of what appears in the print preview window</cite>
<cite>// to a selected printer from the printer dialog.</cite>
<cite>//</cite>
<cite>// class T2Printout</cite>
<cite>// ~~~~~ ~~~~~~~~~~~~~</cite>
<var>class</var> T2Printout : <var>public</var> TPrintout {
  <var>public</var>:
	 T2Printout(<var>const</var> <var>char</var>* title, TWindow* window);
    
    <var>void</var> GetDialogInfo(<var>int</var>&amp; minPage, <var>int</var>&amp; maxPage, <var>int</var>&amp; selFromPage, <var>int</var>&amp; selToPage);
    <var>void</var> PrintPage(<var>int</var> page, TRect&amp; rect, <var>unsigned</var> flags);
    <var>void</var> SetBanding(<var>bool</var> b) {Banding = b;}
    <var>bool</var> HasPage(<var>int</var> pageNumber) {<var>return</var> pageNumber == 1;}

  <var>protected</var>:
	 TWindow* Window;
	 BOOL     Scale;
};

<cite>// instantiate the “T2Printout” class.</cite>
T2Printout::T2Printout(<var>const</var> <var>char</var>* title, TWindow* window)
  : TPrintout(title)
{
  Window = window;
  Scale = TRUE;
}

<cite>// initialize the default parameters for the minimum and</cite>
<cite>// the maximum number of pages as well as the selected</cite>
<cite>// number of pages to print. these range from 1 to the</cite>
<cite>// number of pages in the print preview. there is no</cite>
<cite>// additional programming to change these parameters</cite>
<cite>// in this case.</cite>
<var>void</var>
T2Printout::GetDialogInfo(<var>int</var>&amp; minPage, <var>int</var>&amp; maxPage, <var>int</var>&amp; selFromPage, <var>int</var>&amp; selToPage)
{
  minPage = 1;
  maxPage = mPage2;
  selFromPage = 1;
  selToPage = mPage2;
}

<cite>// this will render the print preview output onto the selected printer.</cite>
<var>void</var>
T2Printout::PrintPage(<var>int</var> page, TRect&amp; rect, <var>unsigned</var> flags)
{
  <cite>// scale the DC (device context) to the window so the</cite>
  <cite>// printout will mirror the print preview window. notice</cite>
  <cite>// that the mapping mode is calibrated in “LOENGLISH”</cite>
  <cite>// units. this unit of measure equates 100 logical device</cite>
  <cite>// units to one inch of screen width.</cite>
  <cite>//</cite>
  <cite>// declare variables for this function.</cite>
  <var>int</var>    prevMode;
  TSize  oldVExt, oldWExt;

  <var>if</var> (Scale) {
    prevMode = DC-&gt;SetMapMode(MM_LOENGLISH);
    TRect windowSize = Window-&gt;GetClientRect();
    DC-&gt;SetWindowExt(windowSize.Size(), &amp;oldWExt);
    DC-&gt;SetViewportExt(PageSize, &amp;oldVExt);
    DC-&gt;DPtoLP(rect, 2);
  }

  <cite>// call the window to paint itself.</cite>
  Window-&gt;Paint(*DC, FALSE, rect);

  <cite>// restore changes made to the DC (device context).</cite>
  <var>if</var> (Scale) {
    DC-&gt;SetWindowExt(oldWExt);
    DC-&gt;SetViewportExt(oldVExt);
    DC-&gt;SetMapMode(prevMode);
  }

}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<b>CONCLUSION</b><br>
<br>
This print preview code has proven itself to work reliably in Windows ME, XP, Vista and 7. If you are coding in the Borland C++ 5.02 platform, it will serve as a decent framework for facilitating a print preview operation. Some of my <a href="../../../www.analyzohiosoftware.com/best-developer-cleveland-ohio.html">best</a> customers have used this for years. Aside from my <a href="../../../www.analyzohiosoftware.com/programming-article-archive-cleveland-ohio.html">programming</a> services, please visit my website to learn more about my <a  href="../../../www.analyzohiosoftware.com/computer-repair-cleveland-ohio.html">computer repair</a> services and my <a href="../../../www.analyzohiosoftware.com/tektip-archive-cleveland-ohio.html">"fix my computer"</a> technical tips.<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','y7Mf92yv');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~60.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='yvkjE3v7')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiay7mf92yv'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiay7mf92yv'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
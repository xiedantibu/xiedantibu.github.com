<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/z3wturfi/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>C++0x Suffix Return Types - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">C++0x Suffix Return Types</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/xander314/default.htm" rel="author">Xander314</a></b></div>
<div id="I_date">Jun 15, 2011 (last update: Jun 23, 2011)</div>
<h1>C++0x Suffix Return Types</h1>
<div id="I_score">Score: 3.7/5 (83 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
This is an article I have written on the C++0x suffix return type. It is also posted on <a href="../../../sfmlcoder.wordpress.com/default.htm">my blog</a> (SFML Coder). If you have any suggestions for correction or improvement, PM me or <a href="mailto:sfmlcoder@gmail.com">email me</a>! Thanks to <b>jsmith</b> who suggested a more apt example than my original.<br>
<br>
<HR>
<br>
Time for another little C++0x feature. Like <i>auto</i>, it is supported by Microsoft Visual C++ 2010 and MinGW. If you have a different compiler, then you can't go wrong by trying it anyway. Just remember that if you get compiler errors, it could mean the feature isn't supported by your compiler.<br>
<br>
Let's get straight to it with an example. Consider the following example of how we would normally code a function:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>bool</var> Init()
{
	<cite>// etc</cite>
	<var>return</var> <var>true</var>;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
And here is the way using trailing return types:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>auto</var> Init() -&gt; <var>bool</var>
{
	<cite>// etc</cite>
	<var>return</var> <var>true</var>;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Why would we want to do this? It's more work after all. Well yes, it is more work in this case, but now consider a real world example. In my game engine's log, I have a function which takes a string, applies some formatting to it and returns it. The string type is a <span class="auto"><code class="source"><var>typedef</var></code></span>'d <span class="auto"><code class="source">std::string</code></span> called <span class="auto"><code class="source">String</code></span> in the <span class="auto"><code class="source">Icanos::System</code></span> namespace.<br>
<br>
This is how I had written the function before I took advantage of this C++0x feature.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code>Icanos::System::String Icanos::System::FormattedLog::ApplyIndent(<var>const</var> String&amp; message, <var>const</var> String&amp; source)
{
  <cite>// etc</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
I have to qualify the <span class="auto"><code class="source">String</code></span> return type in full. But if I could put the return type after, the String type would already be in scope as we've qualified the function's scope, thus simplifying notation.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>auto</var> Icanos::System::FormattedLog::ApplyIndent(<var>const</var> String&amp; message, <var>const</var> String&amp; source) -&gt; String
{
  <cite>// etc</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
After the function name, everything in <span class="auto"><code class="source">Icanos::System</code></span> is already in scope, so we don't need to qualify the namespaces on <span class="auto"><code class="source">String</code></span> again.<br>
<br>
Now then, we might also want to use suffix return types if our return type depends on the argument types (in a template function). <i>Thanks to <b>jsmith</b> for this addition.</i>
<br>
Naively, we should like to do this:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> S, <var>class</var> T&gt;
<var>decltype</var>(s + t) Add(<var>const</var> S&amp; s, <var>const</var> T&amp; t) </code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
but of course, it will not compile, as <i>s</i> and <i>t</i> are not in scope. But they are in scope after the parameter list:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> S, <var>class</var> T&gt;
<var>auto</var> Add(<var>const</var> S&amp; s, <var>const</var> T&amp; t) -&gt; <var>decltype</var>(s + t)</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This is a neat way of solving this problem, and just for your reference, here is the version Stroustrup presents as the lesser of evils in the absense of suffix return types. It is clearly inferior.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> S, <var>class</var> T&gt;
<var>decltype</var>(*(S*)(0) + *(T*)(0)) Add(<var>const</var> S&amp; s, <var>const</var> T&amp; t)</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Well I hope you've enjoyed my introduction to suffix return types - which you may also see referred to as trailing return types. If you'd like to read more about them, check out Dr. Stroustrup's FAQ:<br>
<a href="../../../www2.research.att.com/~bs/c0xfaq.html#suffix-return">http://www2.research.att.com/~bs/C++0xFAQ.html#suffix-return</a>
<br>
(Coincidentally, it was originally suggested (as noted in Stroustrup's FAQ) that suffix return types be signified using [] rather than auto. However, due to controversy, auto is suggested as an alternative. Both MinGW and Microsoft Visual C++ generate a compiler error if [] is used.)</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','z3wTURfi');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~66.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='jT48T05o')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaz3wturfi.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaz3wturfi'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
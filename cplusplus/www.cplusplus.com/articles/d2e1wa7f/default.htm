<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/d2e1wa7f/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>QxOrm : Persistence (ORM), Serialization - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">QxOrm : Persistence (ORM), Serialization</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/qxorm/default.htm" rel="author">QxOrm</a></b></div>
<div id="I_date">May 11, 2010 (last update: May 12, 2010)</div>
<h1>QxOrm : Persistence (ORM), Serialization, Reflection</h1>
<div id="I_score">Score: 3.7/5 (4 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
Hello,<br>
<br>
<b>QxOrm</b> is a new open source ORM (<i>Object Relational Mapping</i>) C++ library designed to provide :<br>
* <b><u>Persistence</u></b> (based on <b>QtSql Qt module</b>)<br>
* <b><u>Serialization</u></b> (xml and binary, based on <b>boost::serialization</b>)<br>
* <b><u>Reflection</u></b> (invoke class methods and access to properties)<br>
<br>
QxOrm has been tested on <b>Windows</b> (<b>Visual C++ 2008 and 2010</b>) and <b>Linux</b> (<b>GCC 4.4.1</b>).<br>
QxOrm is based on a simple and non intrusive '<b><u>setting function</u></b>' (that can be compared with <i>Hibernate xml mapping file</i>).<br>
<br>
A quick sample (and a tutorial) is available on this web site (only in french, an english translation is in progress...) : <b><a href="../../../www.qxorm.com/default.htm">http://www.qxorm.com</a></b>
<br>
PS: Sorry for my poor english<br>
<br>
________<br>
<br>
<b>Quick sample using QxOrm :</b>
* 1- 'drug.h' file : drug class definition with 3 properties : 'id', 'name' and 'description'<br>
* 2- 'drug.cpp' file : setting function 'void qx::register_class()'<br>
* 3- 'main.cpp' file : using QxOrm with drug class<br>
* 4- Execute test program and print log output<br>
* 5- 'export_drugs.xml' file created by test program<br>
<br>
* -----------------------------------------------------------------------------------------------------<br>
* 1- 'drug.h' file : drug class definition with 3 properties : 'id', 'name' and 'description'<br>
* -----------------------------------------------------------------------------------------------------<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><dfn>#ifndef _CLASS_DRUG_H_</dfn>
<dfn>#define _CLASS_DRUG_H_</dfn>

<var>class</var> drug
{
<var>public</var>:
   <var>long</var> id;
   QString name;
   QString description;

   drug() : id(0) { ; }
   <var>virtual</var> ~drug() { ; }
};

QX_REGISTER_HPP_MY_TEST_EXE(drug, qx::trait::no_base_class_defined, 1)

<cite>/* This macro is necessary to register 'drug' class in QxOrm context */</cite>
<cite>/* param 1 : the current class to register =&gt; 'drug' */</cite>
<cite>/* param 2 : the base class, if no base class, use the qx trait =&gt; 'qx::trait::no_base_class_defined' */</cite>
<cite>/* param 3 : the class version used by serialization to provide 'ascendant compatibility' */</cite>

<dfn>#endif </dfn><cite>// _CLASS_DRUG_H_ </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
* -----------------------------------------------------------------------------------------------------<br>
* 2- 'drug.cpp' file : setting function 'void qx::register_class()'<br>
* -----------------------------------------------------------------------------------------------------<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "precompiled.h"   </dfn><cite>// Precompiled-header with '#include &lt;QxOrm.h&gt;' and '#include "export.h"'</cite>
<dfn>#include "drug.h"          </dfn><cite>// Class definition 'drug'</cite>
<dfn>#include &lt;QxMemLeak.h&gt;     </dfn><cite>// Automatic memory leak detection</cite>

QX_REGISTER_CPP_MY_TEST_EXE(drug)   <cite>// This macro is necessary to register 'drug' class in QxOrm context</cite>

<var>namespace</var> qx {
<var>template</var> &lt;&gt; <var>void</var> register_class(QxClass&lt;drug&gt; &amp; t)
{
  t.id(&amp; drug::id, <kbd>"id"</kbd>);               <cite>// Register 'drug::id' &lt;=&gt; primary key in your database</cite>
  t.data(&amp; drug::name, <kbd>"name"</kbd>, 1);      <cite>// Register 'drug::name' property with key 'name' and version '1'</cite>
  t.data(&amp; drug::description, <kbd>"desc"</kbd>);  <cite>// Register 'drug::description' property with key 'desc'</cite>
}}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
* -----------------------------------------------------------------------------------------------------<br>
* 3- 'main.cpp' file : using QxOrm with drug class<br>
* -----------------------------------------------------------------------------------------------------<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br></code></pre></td>
<td class="source"><pre><code><dfn>#include "precompiled.h"</dfn>
<dfn>#include "drug.h"</dfn>
<dfn>#include &lt;QxMemLeak.h&gt;</dfn>

<var>int</var> main(<var>int</var> argc, <var>char</var> * argv[])
{
   QApplication app(argc, argv); <cite>// Qt application</cite>

   <cite>// Create 3 new drugs</cite>
   <cite>// It is possible to use 'boost' and 'Qt' smart pointer : 'boost::shared_ptr', 'QSharedPointer', etc...</cite>
   <var>typedef</var> boost::shared_ptr&lt;drug&gt; drug_ptr;
   drug_ptr d1; d1.reset(<var>new</var> drug()); d1-&gt;name = <kbd>"name1"</kbd>; d1-&gt;description = <kbd>"desc1"</kbd>;
   drug_ptr d2; d2.reset(<var>new</var> drug()); d2-&gt;name = <kbd>"name2"</kbd>; d2-&gt;description = <kbd>"desc2"</kbd>;
   drug_ptr d3; d3.reset(<var>new</var> drug()); d3-&gt;name = <kbd>"name3"</kbd>; d3-&gt;description = <kbd>"desc3"</kbd>;

   <cite>// Insert drugs into container</cite>
   <cite>// It is possible to use a lot of containers from 'std', 'boost', 'Qt' and 'qx::QxCollection&lt;Key, Value&gt;'</cite>
   <var>typedef</var> std::vector&lt;drug_ptr&gt; type_lst_drug;
   type_lst_drug lst_drug;
   lst_drug.push_back(d1);
   lst_drug.push_back(d2);
   lst_drug.push_back(d3);

   <cite>// Init parameters to communicate with a database</cite>
   qx::QxSqlDatabase::getSingleton()-&gt;setDriverName(<kbd>"QSQLITE"</kbd>);
   qx::QxSqlDatabase::getSingleton()-&gt;setDatabaseName(<kbd>"./test_qxorm.db"</kbd>);
   qx::QxSqlDatabase::getSingleton()-&gt;setHostName(<kbd>"localhost"</kbd>);
   qx::QxSqlDatabase::getSingleton()-&gt;setUserName(<kbd>"root"</kbd>);
   qx::QxSqlDatabase::getSingleton()-&gt;setPassword(<kbd>""</kbd>);

   <cite>// Create table 'drug' into database to store drugs</cite>
   QSqlError daoError = qx::dao::create_table&lt;drug&gt;();

   <cite>// Insert drugs from container to database</cite>
   <cite>// 'id' property of 'd1', 'd2' and 'd3' are auto-updated</cite>
   daoError = qx::dao::insert(lst_drug);

   <cite>// Modify and update the second drug into database</cite>
   d2-&gt;name = <kbd>"name2 modified"</kbd>;
   d2-&gt;description = <kbd>"desc2 modified"</kbd>;
   daoError = qx::dao::update(d2);

   <cite>// Delete the first drug from database</cite>
   daoError = qx::dao::delete_by_id(d1);

   <cite>// Count drugs into database</cite>
   <var>long</var> lDrugCount = qx::dao::count&lt;drug&gt;();

   <cite>// Fetch drug with id '3' into a new variable</cite>
   drug_ptr d_tmp; d_tmp.reset(<var>new</var> drug());
   d_tmp-&gt;id = 3;
   daoError = qx::dao::fetch_by_id(d_tmp);

   <cite>// Export drugs from container to a file under xml format (serialization)</cite>
   qx::serialization::xml::to_file(lst_drug, <kbd>"./export_drugs.xml"</kbd>);

   <cite>// Import drugs from xml file into a new container</cite>
   type_lst_drug lst_drug_tmp;
   qx::serialization::xml::from_file(lst_drug_tmp, <kbd>"./export_drugs.xml"</kbd>);

   <cite>// Clone a drug</cite>
   drug_ptr d_clone = qx::clone(* d1);

   <cite>// Create a new drug by class name (factory)</cite>
   boost::any d_any = qx::create(<kbd>"drug"</kbd>);

   <cite>// Insert drugs container into 'qx::cache'</cite>
   qx::cache::set(<kbd>"drugs"</kbd>, lst_drug);

   <cite>// Remove all elements from 'qx::cache'</cite>
   qx::cache::clear();

   <cite>// Create a dummy memory leak</cite>
   drug * pDummy = <var>new</var> drug();

   <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
* -----------------------------------------------------------------------------------------------------<br>
* 4- Execute test program and print log output<br>
* -----------------------------------------------------------------------------------------------------<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>[QxOrm] qx::QxSqlDatabase : create new database connection in thread '3616' with key '{d315250c-b5c9-46e0-9402-f800368a6673}'
[QxOrm] sql query (78 ms) : CREATE TABLE drug (id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, name TEXT, desc TEXT)
[QxOrm] sql query (63 ms) : INSERT INTO drug (name, desc) VALUES (:name, :desc)
[QxOrm] sql query (62 ms) : UPDATE drug SET id = :id, name = :name, desc = :desc WHERE id = :id_bis
[QxOrm] sql query (63 ms) : DELETE FROM drug WHERE id = :id
[QxOrm] sql query (0 ms) : SELECT COUNT(*) FROM drug
[QxOrm] sql query (0 ms) : SELECT drug.id AS drug_id_0, drug.name AS drug_name_0, drug.desc AS drug_desc_0 FROM drug WHERE drug_id_0 = :id
[QxOrm] Leaked object at 0xf52ad8 (size 16, src\main.cpp:74)
[QxOrm] **** 1 memory leaks found ****</samp></pre></td></tr></table></div>
<br>
* -----------------------------------------------------------------------------------------------------<br>
* 5- 'export_drugs.xml' file created by test program<br>
* -----------------------------------------------------------------------------------------------------<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code>&lt;std.vector-boost.shared_ptr-drug-- class_id=<kbd>"0"</kbd> tracking_level=<kbd>"0"</kbd> version=<kbd>"0"</kbd>&gt;
	&lt;count&gt;3&lt;/count&gt;
	&lt;item_version&gt;1&lt;/item_version&gt;
	&lt;item class_id=<kbd>"1"</kbd> tracking_level=<kbd>"0"</kbd> version=<kbd>"1"</kbd>&gt;
		&lt;px class_id=<kbd>"2"</kbd> tracking_level=<kbd>"1"</kbd> version=<kbd>"1"</kbd> object_id=<kbd>"_0"</kbd>&gt;
			&lt;id&gt;1&lt;/id&gt;
			&lt;name class_id=<kbd>"3"</kbd> tracking_level=<kbd>"0"</kbd> version=<kbd>"0"</kbd>&gt;name1&lt;/name&gt;
			&lt;desc&gt;desc1&lt;/desc&gt;
		&lt;/px&gt;
	&lt;/item&gt;
	&lt;item&gt;
		&lt;px class_id_reference=<kbd>"2"</kbd> object_id=<kbd>"_1"</kbd>&gt;
			&lt;id&gt;2&lt;/id&gt;
			&lt;name&gt;name2 modified&lt;/name&gt;
			&lt;desc&gt;desc2 modified&lt;/desc&gt;
		&lt;/px&gt;
	&lt;/item&gt;
	&lt;item&gt;
		&lt;px class_id_reference=<kbd>"2"</kbd> object_id=<kbd>"_2"</kbd>&gt;
			&lt;id&gt;3&lt;/id&gt;
			&lt;name&gt;name3&lt;/name&gt;
			&lt;desc&gt;desc3&lt;/desc&gt;
		&lt;/px&gt;
	&lt;/item&gt;
&lt;/std.vector-boost.shared_ptr-drug--&gt;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','D2E1wA7f');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~99.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='D1vMDjzh')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiad2e1wa7f'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiad2e1wa7f'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
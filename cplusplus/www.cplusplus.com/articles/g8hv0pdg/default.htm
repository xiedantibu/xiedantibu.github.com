<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/g8hv0pdg/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Multidimentional arrays are evil - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Multidimentional arrays are evil</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/disch/default.htm" rel="author">Disch</a></b></div>
<div id="I_date">Dec 5, 2009</div>
<h1>Multidimentional arrays are evil</h1>
<div id="I_score">Score: 4.2/5 (62 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<div class="center"><b>Multidimentional arrays are evil.</b></div>
<br>
<br>
I see a lot of noobs get sucked into the vortex that is multidimentional (hereon MD) arrays.  MD arrays are a "feature" of C/C++ which allow you to use multiple indeces when looking up things in an array.  A typical use is to have a 2D array to represent a grid or a game map with 1 index for X coords and another for Y coords.  Another common usage is for a 'Matrix' class or somesuch.<br>
<br>
The thing these coders don't know (or don't realize) is that MD arrays suck.  They're syntax poison.  They're confusing, hard to work with, and (depending on the implementation) may actually consume more memory and yield worse performance.<br>
<br>
After seeing more and more posts about MD arrays pop up on these forums, I've decided to sketch out this article to shine some light on MD arrays, and provide a reasonable alternative.<br>
<br>
-----------------------------------<br>
<br>
<b>MD Array Flavor 1:  Straight</b>
<br>
The most obvious way to make an MD array is just a straight allocation:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>int</var> evil[5][7];

evil[3][2] = 5;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Seems harmless enough.  And it is, for the most part.  This is the friendliest flavor of MD arrays.<br>
<br>
However even with this form, problems creep up.  What if you need to pass this array to another function?  The way you'd do it is like so:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>int</var> func(<var>int</var> p[][7])
{
  p[2][3] = 1;
}

<cite>//...</cite>

func(evil);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This will pass 'evil' by pointer to the 'func' function.  This isn't all that horrible... but one of its limitations is that it will only accept an array of [x][7].  What if you want to call the function with an MD array of a different size... like <span class="auto"><code class="source"><var>int</var> evil[4][5];</code></span>?  Bottom line is you can't.  You'd have to take the MD array out of the function completely and turn it into a 1D array and pass the width as a seperate parameter:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code><var>int</var> func2(<var>int</var> p[], <var>int</var> width)
{
  <cite>// p[2][3] = 1;         // no good anymore, 1D array</cite>
  p[ (2*width) + 3] = 1;  <cite>// the 1D apprach to do the same thing</cite>

<cite>/*  It's worth noting here that the above (y*width)+x calculation is basically what
    MD arrays compile to anyway.  The compiler just hides it from you with MD arrays.
     Or at least it's true with Straight Flavor MD arrays.  Other flavors are more sinister.
*/</cite>
}

<cite>//...</cite>
<var>int</var> evil[4][5];
func2(evil[0],5);  <cite>// ugly </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
You might notice I marked that last line as ugly.  It's because it is.  It is confusing, has unclear syntax, and it is very easy to make a mistake and pass the wrong value as the width.<br>
<br>
The other problem with this flavor is that <i>it is completely incompatible with other MD flavors</i>.  As you'll soon see.<br>
<br>
<br>
<b>MD Array Flavor 2:  Nested New (dynamic)</b>
<br>
Once people graduate from straight MD arrays, they'll start wondering how to make the size of their arrays dynamic.  This is where the dreaded "nested new" technique comes in:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><cite>// let's say we want to dynamically make int[Y][X]:</cite>
<var>int</var>** superevil = <var>new</var> <var>int</var>*[Y];
<var>for</var>(<var>int</var> i = 0; i &lt; Y; ++i)
  superevil&lt;i&gt; = <var>new</var> <var>int</var>[X];

<cite>// now we can do this:</cite>
superevil[2][3] = 1;

<cite>// but cleanup is just as ugly as allocation:</cite>
<var>for</var>(<var>int</var> i = 0; i &lt; Y; ++i)
  <var>delete</var>[] superevil&lt;i&gt;;
<var>delete</var>[] superevil;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Note that this actually makes a pointer to a pointer, and not really a straight 2D array.  And while "superevil" and "evil" (from the previous section) are both accessed with [double][brakets], they both function very differently under the hood.<br>
<br>
Nested New MD arrays are inefficient.  In addition to allocating all the space for the normal 2D array, you're also allocating space for POINTERS.  Not only that, but in order to access any element in the array, you have to dereference <i>two</i> pointers!<br>
<br>
And really... look at the messy allocation/destruction code that's required.<br>
<br>
And let's go back to calling functions... let's take our two functions from the previous section:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>int</var> func(<var>int</var> p[][7]);
<var>int</var> func2(<var>int</var> p[], <var>int</var> width);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
How would you call those functions with 'superevil'?<br>
<br>
Guess what.  You <i>can't</i>.  That's right... you're hosed.  Nested New arrays are not really 2D arrays in the same sense that straight arrays are.  Straight MD arrays only require 1 dereference, but nested new requires 2 dereferences.  In order to pass this to a function, you'd need to make another one:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>int</var> func3(<var>int</var>** p,<var>int</var> width);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
But now you might notice that func3 doesn't work with straight arrays.  They're just totally incompatible.<br>
<br>
The one saving grace to the nested new approach is that it doesn't require the entire MD array to be contiguous, which means you have a better chance of getting the memory you need if memory is badly fragmented.  But this mild benefit is seldom applicable, and is overshadowed by its faults.<br>
<br>
<b>MD Array Flavor 3:  Vectors of Vectors</b>
<br>
The more STL savvy coder will opt for a vector-of-a-vector approach to MD arrays, rather than Nested New:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><cite>// to make a [5][6] array:</cite>
vector&lt; vector&lt;<var>int</var>&gt; &gt; stillevil( 5, vector&lt;<var>int</var>&gt;(6) );

stillevil[2][3] = 1;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Not a lot to say about this one.  Like Nested New it's incompatible with other MD array flavors.  If you need to pass this array to a function, none of the above functions will work.<br>
<br>
Also, like Nested New, it's inefficent in that is requires additional memory and has double indirection.<br>
<br>
On the plus side, you don't need cleanup code, and the allocation code is not as ugly (but still pretty ugly!)<br>
<br>
<br>
<b>Killing MD:  1D Mimics</b>
<br>
An MD array can be simulated in a 1D array as long as you know the dims.  For example, if you want a 2x3 array, it would conceptually look like the following:<br>
<br>
<tt>
0 1<br>
2 3<br>
4 5<br>
</tt>
<br>
This array has 6 elements (2 * 3).  And you'll notice that each row starts with a multiple of the width (2).  Therefore you can simulate a 2D array in a 1D array like so:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><cite>// int evil[5][6];      // desired 2D array</cite>
<var>int</var> mimic[5*6];         <cite>// mimicing 1D array</cite>

<cite>// evil[2][3] = 1;      // desired [2][3] index</cite>
mimic[ (2*6) + 3] = 1;  <cite>// mimiced [2][3] index </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
All that math looks kind of dumb and inefficient.  Really, though, the compiler does all that math for MD arrays too, so this isn't any less efficient.  It is pretty ugly though, granted.<br>
<br>
So you might be asking yourself... "what is the benefit of this?"<br>
<br>
Well, unlike MD array flavors which are all different and totally incompatible, the respective <i>1D</i> flavors are all compatible!<br>
<br>
Consider the following:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><var>int</var> func2(<var>int</var> p[], <var>int</var> width);  <cite>// remember this function?</cite>
                                <cite>// it'll work with all flavors of mimicing 1D arrays!</cite>

<var>int</var> a[ 5 * 6 ];
func2( a, 6 );  <cite>// works</cite>
<cite>//---</cite>

<var>int</var>* b = <var>new</var> <var>int</var>[5*6];
func2( b, 6 );  <cite>// works</cite>
<cite>//---</cite>

vector&lt;<var>int</var>&gt; c(5*6);
func2( &amp;c[0], 6 );  <cite>// works (but is a little ugly, granted) </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
See how graceful it all is?  Aside from the ugly math in the indexing, everything flows together so much nicer.  This is the first step to killing MD arrays.  The next step is even more fantastic.<br>
<br>
<b>Killing MD:  Abstracted array classes</b>
<br>
So while 1D arrays are easier to work with, They do suffer from a few problems:<br>
<br>
- look up requires you to know the dims of the array (can't do <span class="auto"><code class="source">y*width</code></span> without knowing the width).<br>
- look up syntax is ugly and easy to botch.  It only gets worse as you get into larger dimensions.  Imagine a mimiced 3D array:  <span class="auto"><code class="source">z*width*height + y*width + x</code></span>.<br>
<br>
C++ provides an excellent solution to this problem:  <i>classes</i>.  Just make an Array2D/Matrix/whatever class to wrap all of this behavior.<br>
<br>
(Or don't -- there are probably many premade ones available online that you can use, I never actually bothered looking.  Boost probably has one, I'd imagine -- I'll have to research this more some day.  If you are reading further in this article I'm going to assume you don't have / don't want to use such a library and want to write your own)<br>
<br>
While you can't overload the [bracket] operator to take two parameters*, you <i>can</i> overload the parenthesis operator.  So syntax is a little different:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><cite>// int bad[4][5];</cite>
Array2D&lt;<var>int</var>&gt; good(4,5);

<cite>// bad[1][2] = 3;</cite>
good(1,2) = 3;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
(* Yes you can overload the brakets and return a weird type to make double brakets work, but it causes all sorts of problems and defeats all the elegance of using a fully contained class)<br>
<br>
<br>
So how do you make this Array2D class?  As long as you don't want bells and whistles, it can be very simple.<br>
<br>
Here is a very simple class with no bells or whistles:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>typename</var> T&gt;
<var>class</var> Array2D
{
<var>public</var>:
  <cite>// constructor</cite>
  Array2D(<var>unsigned</var> wd,<var>unsigned</var> ht)
    : nWd(wd), nHt(ht), pAr(0)
  {
    <var>if</var>(wd &gt; 0 &amp;&amp; ht &gt; 0)
      pAr = <var>new</var> T[wd * ht];
  }

  <cite>// destructor</cite>
  ~Array2D()
  {
    <var>delete</var>[] pAr;
  }

  <cite>// indexing (parenthesis operator)</cite>
  <cite>//  two of them (for const correctness)</cite>

  <var>const</var> T&amp; <var>operator</var> () (<var>unsigned</var> x,<var>unsigned</var> y) <var>const</var>
  {  <var>return</var> pAr[ y*nWd + x ];   }

  T&amp; <var>operator</var> () (<var>unsigned</var> x,<var>unsigned</var> y)
  {  <var>return</var> pAr[ y*nWd + x ];   }

  <cite>// get dims</cite>
  <var>unsigned</var> GetWd() <var>const</var> { <var>return</var> nWd; }
  <var>unsigned</var> GetHt() <var>const</var> { <var>return</var> nHt; }


  <cite>// private data members</cite>
<var>private</var>:
  <var>unsigned</var> nWd;
  <var>unsigned</var> nHt;
  T*       pAr;

  <cite>// to prevent unwanted copying:</cite>
  Array2D(<var>const</var> Array2D&lt;T&gt;&amp;);
  Array2D&amp; <var>operator</var> = (<var>const</var> Array2D&lt;T&gt;&amp;);
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
That's all there is to it!<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','G8hv0pDG');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~127.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='2TRDSL3A')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiag8hv0pdg'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiag8hv0pdg'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
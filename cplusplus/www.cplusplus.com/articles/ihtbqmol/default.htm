<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/ihtbqmol/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>The Pointer - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">The Pointer</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/graham/default.htm" rel="author">Graham</a></b></div>
<div id="I_date">Feb 19, 2008 (last update: Feb 19, 2008)</div>
<h1>The Pointer</h1>
<div id="I_score">Score: 4.0/5 (17 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
NOTE: This is just because a lot of beginners need a grasp on this concept.<br>
<br>
WHAT IT IS<br>
----------<br>
<br>
Pointers are addresses. The can be assigned, or made to "point to" another memory location. They are a powerful concept that is not well understood by many users of C. Their use can make code more efficient, more readable, and more functional.<br>
<br>
HOW TO USE IT<br>
-------------<br>
<br>
Pointers are declared by using the following template (assuming T is a type):<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>T *var;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Of course, some prefer the convention of:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>T* var;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
but these modifications are in the personal opinion of the user, since the compiler ignores the whitespaces in a declaration (that don't seperate a type and the first variable).<br>
<br>
The address of a normal variable can be assigned to a pointer as follows:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>T *ptr;
T var;
ptr=&amp;var;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
This works because the ampersand (&) will take the address of var, and assign the value to the pointer, which itself holds an address.<br>
<br>
Pointers to pointers can be made. And so can pointers to those, but they are hardly useful.<br>
<br>
The asterisk (*) can dereference a pointer.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code>T *ptr;
T var, var2;
ptr=&amp;var;

var2=*ptr;
*ptr+=var2;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The last two statements effectively assign var2 the value of var (because the dereference operator tells the machine to follow the pointer to the variable), then adds var2 to var (the same as doubling var). Since the pointer was dereferenced to the same location as var, all operations on the dereferenced pointer will take effect on the variable it points to.<br>
<br>
Often, to signify the state of not pointing to anything, a pointer will be assigned the value of 0. This pointer is the null pointer. It is illegal to dereference a null pointer.<br>
<br>
Pointers can be declared constant by putting the keyword const before the asterisk in the declaration:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>T <var>const</var> *var;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Do NOT confuse this with<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>const</var> T *var;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
which defines var to point to a type of constant T. Constant pointers must be initialized. Arrays, in fact, are constant pointers.<br>
<br>
The space allocated for pointers is the space necessary to hold a memory address. This is usually an unsigned long.<br>
<br>
Pointers can be redirected to multiple targets. For example:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code>T *ptr;
T var, var2;

ptr=&amp;var;
<cite>//Do some stuff with var</cite>

ptr=&amp;var2;
<cite>//Do some stuff with var2 </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Pointers have their own kind of arithmetic: adding or subtracting values (let's say X) actually causes a shift in the address equal to X*sizeof(T). This is how arrays dereference (the expression a[x] is really *(a+x), which works because arrays are constant pointers). Multiplication and division are not allowed.<br>
<br>
A pointer to any arbitrary type T must have the declaration T * OR one of the special types, void *. Void pointers (not to be confused with null pointers) can be assigned an address to any value. Because of this, pointer arithmetic on void pointers is illegal, as is dereferencing them. You can dereference and perform arithmetic on a casted void pointer, though.<br>
<br>
A pointer definition doesn't implicitly span to each member in a declaration, you need an asterisk before each pointer variable.<br>
<br>
WHY YOU NEED THEM<br>
-----------------<br>
<br>
ARRAYS, ARRAYS, ARRAYS!!! Every array is a constant pointer, so it is pretty crucial to have this feature.<br>
<br>
Functions normally are passed copies of their parameters. By passing addresses (and defining the function to receive a pointer), the caller's value can be modified. Passing of this type is called pass by reference.<br>
<br>
Pointers are crucial to the processing of strings. Every C String is a character array, and hence a constant pointer to a character.<br>
<br>
They are also necessary when making linked lists and using dynamic memory allocation. Using pointers for dynamic memory allocation means you can:<br>
-use the same pointer for multiple seperate memory spaces.<br>
-assign this value to any other pointer with the same type or a void *.<br>
-Define an arbitrarily long range to be put under a single pointer. This is the basis of arrays.<br>
<br>
GOING FARTHER<br>
-------------<br>
<br>
Go ahead, try a few pointings. Remember, you have to cast a void pointer to use it.<br>
<br>
Pointers are used internally on several occasions. Not a program doesn't have a pointer in it, because functions are pointers to the compiled code for that function in their data segment (yes, even main). Find other such uses.<br>
<br>
Your reply is valued! Please give questions and comments below!<br>
Thank you,<br>
Graham Northup</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','ihTbqMoL');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../ovr0/contact.doreferrerwww.cplusplus.com_252farticles_25~10.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='jT0pX9L8')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiaihtbqmol.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaihtbqmol'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
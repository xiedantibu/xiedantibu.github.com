<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/d4sgz8ar/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Template parameter deduction from array  - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Template parameter deduction from array </li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/rob_desbois/default.htm" rel="author">Rob Desbois</a></b></div>
<div id="I_date">Aug 26, 2011 (last update: Aug 26, 2011)</div>
<h1>Template parameter deduction from array dimensions</h1>
<div id="I_score">Score: 3.8/5 (53 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
The template facility in C++ doesn't only allow you to parameterise with types (such as the <code>int</code> in <code>std::vector&lt;int&gt;</code>), but also with values. Non-type template parameters can be of the following types<a href="#footnote-1"><sup>[1]</sup></a>:<br>
<ul>
	<li>Integral (or enum) value</li>
	<li>Pointer to object/function</li>
	<li>Reference to object/function</li>
	<li>Pointer to member</li>
</ul>
<br>
I'm going to look at the first of these types - integers - and how template parameter deduction behaves with arrays.<br>
<br>
Template parameter deduction is the facility whereby the compiler determines how to instantiate a template when a template parameter is unspecified, e.g:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>std::vector&lt;<var>int</var>&gt; vi;
std::sort(vi.begin(), vi.end());</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Although we aren't specifying the type of iterator for <code>std::sort()</code> to use, the compiler works it out from the parameters we provide.<br>
<br>
<h3>Array dimensions as template parameters</h3>
We can create a function that is templated on an array's dimensions:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>template</var>&lt;<var>int</var> N&gt;
<var>void</var> fun(std::string s[N])
{
   <var>for</var> (<var>int</var> i(0); i &lt; N; ++i)
      std::cout &lt;&lt; i &lt;&lt; <kbd>": "</kbd> &lt;&lt; s[i] &lt;&lt; std::endl;
}

<var>int</var> main()
{
   std::string s[2] = {<kbd>"hello"</kbd>, <kbd>"world"</kbd>};
   fun&lt;2&gt;(s);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>$&gt; ./a.out
0: hello
1: world
</samp></pre></td></tr></table></div>
<br>
Note that omitting the explicit template parameter in this implementation, calling in <code>fun(s)</code> instead, will yield a build error:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>$&gt; g++ broken.cpp 
broken.cpp: In function ‘int main()’:
broken.cpp:14:9: error: no matching function for call to ‘fun(std::string [2])’</samp></pre></td></tr></table></div>
<br>
This confused me for some time, since I was under the impression that the template parameter was deducible from the array dimension.<br>
<br>
<em>(NB: as an aside, the above would also work if you wrote</em> <code>fun&lt;500&gt;(s)</code><em>; I think this is down to the array decaying to a pointer, which can then readily initialise the array parameter.)</em>
<br>
<br>
<h3>Deduction of template parameters from array dimensions</h3>
Stroustrup's TCPL states that<a href="#footnote-2"><sup>[2]</sup></a> "<em>a compiler can deduce..a non-type template argument, <code>I</code>, from a template function argument with a type..</em><code>type[<em>I</em>]</code>", which implies to me that the above should work fine.<br>
I puzzled for a while over why the parameter couldn't be deduced, and eventually hit on the answer. The standard states that a value of type "array of <code>N T</code>" (e.g. "array of 5 <code>int</code>") can be converted to an rvalue of type "pointer to <code>T</code>".<a href="#footnote-3"><sup>[3]</sup></a> This means that the array size is lost in the instantiation, and as such the value of <code>N</code> cannot be deduced, the template instantiation fails, and - in our example above - <code>fun()</code> cannot be resolved.<br>
<br>
The way to prevent this conversion (known as 'decay') is to declare the function parameter as a <em>reference</em> to an array by changing <code>fun(string s[N])</code> to <code>fun(string (&amp;s)[N])</code>:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>int</var> N&gt;
<var>void</var> fun(string (&amp;s)[N])
{
   <var>for</var> (<var>int</var> i(0); i &lt; N; ++i)
      cout &lt;&lt; i &lt;&lt; <kbd>": "</kbd> &lt;&lt; s[i] &lt;&lt; endl;
}

<var>int</var> main()
{
   string s[2] = {<kbd>"hello"</kbd>, <kbd>"world"</kbd>};
   fun(s);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
And it works!<br>
<br>
<br>
<h3>Multi-dimensional arrays</h3>
Interestingly, although I haven't declared a reference to an array in this alternate implementation with a multidimensional array, it still works fine:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>int</var> N&gt;
<var>void</var> fun(string s[1][N])
{
   <var>for</var> (<var>int</var> i(0); i &lt; N; ++i)
      cout &lt;&lt; i &lt;&lt; <kbd>": "</kbd> &lt;&lt; s[0][i] &lt;&lt; endl;
}

<var>int</var> main()
{
   string s[1][2] = {{<kbd>"hello"</kbd>, <kbd>"world"</kbd>}};
   fun(s);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The reason for this is that array decay does not happen recursively, so in the call to <code>fun()</code>, <code>int[1][2]</code> decays to a pointer to an array of 2 ints, and no further, therefore still carries the size information. <em>(NB: I could not find authoritative evidence of this; it may be implicit in that the standard doesn't state that it should happen recursively.)</em>
<br>
This article originally appeared at <a href="../../../theotherbranch.wordpress.com/2011/08/24/template-parameter-deduction-from-array-dimensions/default.htm">The other branch</a>.<br>
<br>
<h3>Footnotes</h3>
<ul>
	<li><a id="footnote-1"><sup>1</sup></a> This is the list as specified for C++98 and 03 (cf. ISO C++ standard 14882 14.1.4); C++11 has a few additions.</li>
	<li><a id="footnote-2"><sup>2</sup></a> Stroustrup - The C++ Programming Language, Special Edition; Appendix C.13.4 - Deducing Function Template Arguments</li>
	<li><a id="footnote-3"><sup>3</sup></a> ISO C++ standard 14882 4.2.1.</li>
</ul></div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','D4SGz8AR');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus~92.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='y6fwvCM9')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiad4sgz8ar'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiad4sgz8ar'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/articles/e6vu7k9e/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Masking password input - C++ Articles</title>
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Articles</a></li>
<li class="here">Masking password input</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div id="I_content">
<div class="C_art">
<div id="I_author">Published by <b><a href="../../user/null/default.htm" rel="author">Null</a></b></div>
<div id="I_date">Nov 7, 2009 (last update: Jan 29, 2012)</div>
<h1>Masking password input</h1>
<div id="I_score">Score: 3.9/5 (57 votes)</div>
<div id="I_stars"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star.png" width="16" height="16" alt="*"><img src="../../ico/16star-half.png" width="16" height="16" alt="*"><img src="../../ico/16star-empty.png" width="16" height="16" alt="*"></div>
<div id="I_content">
<h3> Contents </h3>
<ul>
  <li> <a href="#UNIX"> <b>Unix/Linux</b> </a>
       <ul>
         <li> <a href="#UNIX-e1">Example 1</a> </li>
         <li> <a href="#UNIX-e2">Example 2</a> </li>
       </ul>
  </li>
  <li> <a href="#WIN"> <b>Windows</b> </a> <br>
       <ul>
         <li> <a href="#WIN-e1"> Example 1 </a> </li>
         <li> <a href="#WIN-e2"> Example 2 </a> </li>
       </ul>
  </li>
  <li> <b> <a href="#CURSES">Using curses library </a></b>
       <ul>
         <li> <a href="#CURSES-e1"> Example 1 </a> </li>
         <li> <a href="#CURSES-e2"> Example 2 </a> </li>
       </ul>  <br>
  </li>
<br>
</ul>
<br>
<br>
<h3> <a name="UNIX"> Unix/Linux </a> </h3>
<h4> <a name="UNIX-e1"> Example 1 </a> </h4>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;termios.h&gt;</dfn>
<dfn>#include &lt;unistd.h&gt;</dfn>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> getch() {
    <var>int</var> ch;
    <var>struct</var> termios t_old, t_new;

    tcgetattr(STDIN_FILENO, &amp;t_old);
    t_new = t_old;
    t_new.c_lflag &amp;= ~(ICANON | ECHO);
    tcsetattr(STDIN_FILENO, TCSANOW, &amp;t_new);

    ch = getchar();

    tcsetattr(STDIN_FILENO, TCSANOW, &amp;t_old);
    <var>return</var> ch;
}





string getpass(<var>const</var> <var>char</var> *prompt, <var>bool</var> show_asterisk=<var>true</var>)
{
  <var>const</var> <var>char</var> BACKSPACE=127;
  <var>const</var> <var>char</var> RETURN=10;

  string password;
  <var>unsigned</var> <var>char</var> ch=0;

  cout &lt;&lt;prompt&lt;&lt;endl;

  <var>while</var>((ch=getch())!=RETURN)
    {
       <var>if</var>(ch==BACKSPACE)
         {
            <var>if</var>(password.length()!=0)
              {
                 <var>if</var>(show_asterisk)
                 cout &lt;&lt;<kbd>"\b \b"</kbd>;
                 password.resize(password.length()-1);
              }
         }
       <var>else</var>
         {
             password+=ch;
             <var>if</var>(show_asterisk)
                 cout &lt;&lt;<kbd>'*'</kbd>;
         }
    }
  cout &lt;&lt;endl;
  <var>return</var> password;
}


<var>int</var> main()
{
  <var>const</var> <var>char</var> *correct_password=<kbd>"null"</kbd>;

  string password=getpass(<kbd>"Please enter the password: "</kbd>,<var>true</var>); <cite>// Show asterisks</cite>
  <var>if</var>(password==correct_password)
      cout &lt;&lt;<kbd>"Correct password"</kbd>&lt;&lt;endl;
  <var>else</var>
      cout &lt;&lt;<kbd>"Incorrect password. Try again"</kbd>&lt;&lt;endl;


  password=getpass(<kbd>"Please enter the password: "</kbd>,<var>false</var>); <cite>// Do not show asterisks</cite>
  <var>if</var>(password==correct_password)
      cout &lt;&lt;<kbd>"Correct password"</kbd>&lt;&lt;endl;
  <var>else</var>
      cout &lt;&lt;<kbd>"Incorrect password. Try again"</kbd>&lt;&lt;endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h4> <a name="UNIX-e2"> Example 2 - using getpass() function </a> </h4>
According to the Linux programmers's manual, this function is obsolete, so avoid it when possible.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;cstdlib&gt;</dfn>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>const</var> <var>char</var> *mypass=<kbd>"null"</kbd>;

<var>int</var> main()
{
<var>char</var> *password=getpass(<kbd>"Enter password: "</kbd>);

<var>if</var>(strcmp(password,mypass)==0) cout &lt;&lt;<kbd>"Correct password!\n"</kbd>;
<var>else</var> cout &lt;&lt;<kbd>"Incorrect password!\n"</kbd>;


<var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<br>
<br>
<br>
<h3> <a name="WIN"> Windows </a> </h3>
<h4> <a name="WIN-e1"> Example 1 - using WinAPI </a> </h4>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;windows.h&gt;</dfn>
<var>using</var> <var>namespace</var> std;


string getpass(<var>const</var> <var>char</var> *prompt, <var>bool</var> show_asterisk=<var>true</var>)
{
  <var>const</var> <var>char</var> BACKSPACE=8;
  <var>const</var> <var>char</var> RETURN=13;

  string password;
  <var>unsigned</var> <var>char</var> ch=0;

  cout &lt;&lt;prompt&lt;&lt;endl;

  DWORD con_mode;
  DWORD dwRead;

  HANDLE hIn=GetStdHandle(STD_INPUT_HANDLE);

  GetConsoleMode( hIn, &amp;con_mode );
  SetConsoleMode( hIn, con_mode &amp; ~(ENABLE_ECHO_INPUT | ENABLE_LINE_INPUT) );

  <var>while</var>(ReadConsoleA( hIn, &amp;ch, 1, &amp;dwRead, NULL) &amp;&amp; ch !=RETURN)
    {
       <var>if</var>(ch==BACKSPACE)
         {
            <var>if</var>(password.length()!=0)
              {
                 <var>if</var>(show_asterisk)
                     cout &lt;&lt;<kbd>"\b \b"</kbd>;
                 password.resize(password.length()-1);
              }
         }
       <var>else</var>
         {
             password+=ch;
             <var>if</var>(show_asterisk)
                 cout &lt;&lt;<kbd>'*'</kbd>;
         }
    }
  cout &lt;&lt;endl;
  <var>return</var> password;
}



<var>int</var> main()
{
  <var>const</var> <var>char</var> *correct_password=<kbd>"null"</kbd>;

  cout &lt;&lt;<kbd>"Test 1: echoing enabled"</kbd>&lt;&lt;endl;
  string password=getpass(<kbd>"Please enter the password: "</kbd>,<var>true</var>); <cite>// Show asterisks</cite>
  <var>if</var>(password==correct_password)
      cout &lt;&lt;<kbd>"Correct password"</kbd>&lt;&lt;endl;
  <var>else</var>
      cout &lt;&lt;<kbd>"Incorrect password. Try again"</kbd>&lt;&lt;endl;

  cout &lt;&lt;<kbd>"\nTest 2: echoing disabled"</kbd>&lt;&lt;endl;
  password=getpass(<kbd>"Please enter the password: "</kbd>,<var>false</var>); <cite>// Do not show asterisks</cite>
  <var>if</var>(password==correct_password)
      cout &lt;&lt;<kbd>"Correct password"</kbd>&lt;&lt;endl;
  <var>else</var>
      cout &lt;&lt;<kbd>"Incorrect password. Try again"</kbd>&lt;&lt;endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<br>
<br>
<br>
<h4> <a name="WIN-e2"> Example 2 - using conio.h </a> </h4>
This code is analogous to the previous example but uses getch() function from conio.h header to get unbuffered console input. Note that conio.h is a Borland-specific header, so avoid it when possible.<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;conio.h&gt;</dfn>
<var>using</var> <var>namespace</var> std;


string getpass(<var>const</var> <var>char</var> *prompt, <var>bool</var> show_asterisk=<var>true</var>)
{
  <var>const</var> <var>char</var> BACKSPACE=8;
  <var>const</var> <var>char</var> RETURN=13;

  string password;
  <var>unsigned</var> <var>char</var> ch=0;

  cout &lt;&lt;prompt&lt;&lt;endl;

  <var>while</var>((ch=getch())!=RETURN)
    {
       <var>if</var>(ch==BACKSPACE)
         {
            <var>if</var>(password.length()!=0)
              {
                 <var>if</var>(show_asterisk)
                 cout &lt;&lt;<kbd>"\b \b"</kbd>;
                 password.resize(password.length()-1);
              }
         }
       <var>else</var> <var>if</var>(ch==0 || ch==224) <cite>// handle escape sequences</cite>
         {
             getch(); <cite>// ignore non printable chars</cite>
             <var>continue</var>;
         }
       <var>else</var>
         {
             password+=ch;
             <var>if</var>(show_asterisk)
                 cout &lt;&lt;<kbd>'*'</kbd>;
         }
    }
  cout &lt;&lt;endl;
  <var>return</var> password;
}


<var>int</var> main()
{
  <var>const</var> <var>char</var> *correct_password=<kbd>"null"</kbd>;

  string password=getpass(<kbd>"Please enter the password: "</kbd>,<var>true</var>); <cite>// Show asterisks</cite>
  <var>if</var>(password==correct_password)
      cout &lt;&lt;<kbd>"Correct password"</kbd>&lt;&lt;endl;
  <var>else</var>
      cout &lt;&lt;<kbd>"Incorrect password. Try again"</kbd>&lt;&lt;endl;


  password=getpass(<kbd>"Please enter the password: "</kbd>,<var>false</var>); <cite>// Do not show asterisks</cite>
  <var>if</var>(password==correct_password)
      cout &lt;&lt;<kbd>"Correct password"</kbd>&lt;&lt;endl;
  <var>else</var>
      cout &lt;&lt;<kbd>"Incorrect password. Try again"</kbd>&lt;&lt;endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Note that if the password is longer that the console width (80 characters) backspace will not delete asterisks from the previous line.<br>
<br>
<br>
<br>
<br>
<br>
<h3> <a name="CURSES">Using curses library </a> </h3>
Curses library is one of the best choices for cross-platform console manipulation. Keep in mind that this library has been designed for C programming language, so you won't be able to use C++ iostream's with it.<br>
<br>
<br>
<h4> <a name="CURSES-e1">Example 1 </a> </h4>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;curses.h&gt;</dfn>
<var>using</var> <var>namespace</var> std;


string getpass(<var>const</var> <var>char</var> *prompt)
{
  printw(prompt);
  noecho();  <cite>// disable character echoing</cite>

  <var>char</var> buff[64];
  getnstr(buff,<var>sizeof</var>(buff));

  echo(); <cite>// enable character echoing again</cite>
  <var>return</var> buff;
}

<var>int</var> main()
{
   <var>const</var> string correct_password=<kbd>"null"</kbd>;

   initscr(); <cite>// enable ncurses</cite>

   string pwd=getpass(<kbd>"Please enter the password: "</kbd>);

   <var>if</var>(correct_password==pwd)
       printw(<kbd>"\nCorrect password!"</kbd>);
   <var>else</var>
       printw(<kbd>"\nIncorrect password. Try again"</kbd>);


    getch(); <cite>// Wait for a keypress</cite>
    endwin(); <cite>// disable ncurses</cite>

    <var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<h4> <a name="CURSES-e2">Example 2 </a> </h4>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;curses.h&gt;</dfn>
<var>using</var> <var>namespace</var> std;


string getpass(<var>const</var> <var>char</var> *prompt, <var>bool</var> show_asterisk=<var>true</var>)
{
  <var>const</var> <var>char</var> BACKSPACE=8;
  <var>const</var> <var>char</var> RETURN=10; <cite>// Note: 10 for curses, 13 for conio</cite>

  string password;
  <var>unsigned</var> <var>char</var> ch=0;

  printw(prompt);
  printw(<kbd>"\n"</kbd>);

  noecho(); <cite>// Disable echoing</cite>

  <var>while</var>((ch=getch())!=RETURN)
    {
       <var>if</var>(ch==BACKSPACE)
         {
            <var>if</var>(password.length()!=0)
              {
                 <var>if</var>(show_asterisk)
                 printw(<kbd>"\b \b"</kbd>);
                 password.resize(password.length()-1);
              }
         }
       <var>else</var> <var>if</var>(ch!=27) <cite>// ignore 'escape' key</cite>
         {
             password+=ch;
             <var>if</var>(show_asterisk)
                 printw(<kbd>"*"</kbd>);
         }
    }

  echo();
  printw(<kbd>"\n"</kbd>);
  <var>return</var> password;
}





<var>int</var> main()
{
  initscr();

  <var>const</var> <var>char</var> *correct_password=<kbd>"null"</kbd>;

  printw(<kbd>"Test 1: echoing enabled\n"</kbd>);
  string password=getpass(<kbd>"Please enter the password: "</kbd>,<var>true</var>); <cite>// Show asterisks</cite>
  <var>if</var>(password==correct_password)
      printw(<kbd>"Correct password!\n"</kbd>);
  <var>else</var>
      printw(<kbd>"Incorrect password. Try again\n"</kbd>);

  printw(<kbd>"\nTest 2: echoing disabled\n"</kbd>);
  password=getpass(<kbd>"Please enter the password: "</kbd>,<var>false</var>); <cite>// Do not show asterisks</cite>
  <var>if</var>(password==correct_password)
      printw(<kbd>"Correct password"</kbd>);
  <var>else</var>
      printw(<kbd>"Incorrect password. Try again"</kbd>);

  printw(<kbd>"\n\nPress any key to continue..."</kbd>);
  getch();
  endwin();
  <var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<i>Notes:</i> <br>
1. <b>Download curses here:</b> <br>
<a href="../../../sourceforge.net/projects/pdcurses/files/default.htm">http://sourceforge.net/projects/pdcurses/files/</a> <br>
2. You must link your project with <i>pdcurses.lib</i> library.<br>
</div></div><div id="CH_bb"></div><div id="CH_scoreapp"></div><script type="text/javascript">new Score('CH_scoreapp','../score.cgi','E6vU7k9E');</script></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../reference/default.htm">Reference</a></li>
<li class="folder selected articles"><a href="../default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="sect">
<h3><b><a href="../default.htm">Articles</a></b></h3>
<ul>
<li><a href="../algorithms/default.htm">Algorithms</a></li><li><a href="../cpp11/default.htm">C++ 11</a></li><li><a href="../graphics/default.htm">Graphics and multimedia</a></li><li><a href="../howto/default.htm">How-To</a></li><li><a href="../language/default.htm">Language Features</a></li><li><a href="../linux/default.htm">Unix/Linux programming</a></li><li><a href="../sourcecode/default.htm">Source Code</a></li><li><a href="../standard_library/default.htm">Standard Library</a></li><li><a href="../tips/default.htm">Tips and Tricks</a></li><li><a href="../tools/default.htm">Tools and Libraries</a></li><li><a href="../visualcpp/default.htm">Visual C++</a></li><li><a href="../winapi/default.htm">Windows API</a></li></ul>
</div>
<div id="I_subnav"></div>
</div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252farticles_25~73.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
onSession(function(us) {
		document.getElementById('I_subnav').innerHTML=
			us.ok?
				'<div class="sect"><h3><b><a href="../../user/default.htm">'+us.user+'</a></b></h3><ul>'+
				'<li><a href="../myitems.cgi.htm">My items</a></li>'+
				(us.auth(32768)?'<li><a href="../adminitems.cgi.htm">Admin items</a></li>':'')+
				'</ul></div>'
			:'';
	}); onSession(function (us) {
		var el=document.getElementById('CH_bb'); el.innerHTML='';
		if ( (us.auth(32768)) || ((us.uniqid=='EAR4jE8b')&&(us.auth(128))) ) {
			el.appendChild(btn('Edit article','Edit this version of the article','edit','../edit.cgiae6vu7k9e.htm'));
	
			if (us.auth(32768)) {
				el.appendChild(btn('Delete article','Delete this article','delete','javascript:artdel()'));
			}
	
		}
	});
	function artdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiae6vu7k9e'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
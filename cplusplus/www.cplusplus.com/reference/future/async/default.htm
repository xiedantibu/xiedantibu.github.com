<!DOCTYPE html><!-- saved from url=(0059)http://www.cplusplus.com/reference/future/async/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>async - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Reference</a></li>
<li><a href="../default.htm">&lt;future&gt;</a></li>
<li class="here">async</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;future&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>async<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>unspecified policy (1)</th><td><pre>template &lt;class Fn, class... Args&gt;  future&lt;typename result_of&lt;Fn(Args...)&gt;::type&gt;    async (Fn&amp;&amp; fn, Args&amp;&amp;... args);</pre></td></tr><tr class="even"><th>specific policy (2)</th><td><pre>template &lt;class Fn, class... Args&gt;  future&lt;typename result_of&lt;Fn(Args...)&gt;::type&gt;    async (launch policy, Fn&amp;&amp; fn, Args&amp;&amp;... args);</pre></td></tr></table></div><div id="I_description">Call function asynchronously</div>
<section id="description">
Calls <var>fn</var> (with <var>args</var> as arguments) at some point, returning without waiting for the execution of <var>fn</var> to complete.<br>
<br>
The value returned by <var>fn</var> can be accessed through the <samp><a href="../future/default.htm">future</a></samp> object returned (by calling its member <samp><a href="../../../future_3a_3aget">future::get</a></samp>).<br>
<br>
The second version <i>(2)</i> lets the caller select a specific launching policy, while the first version <i>(1)</i> uses automatic selection, as if calling <i>(2)</i> with <code><a href="../../../launch">launch::async</a>|<a href="../../../launch">launch::deferred</a></code> as <var>policy</var>.<br>
<br>
The function temporarily stores in the <i>shared state</i> either the threading handler used or <i><a href="../../../decay">decay copies</a></i> of <var>fn</var> and <var>args</var> (as a <i>deferred function</i>) without making it <i>ready</i>. Once the execution of <var>fn</var> is completed, the <i>shared state</i> contains the value returned by <var>fn</var> and is made <i>ready</i>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>policy</dt>
<dd>A bitmask value of type <samp><a href="../../../launch">launch</a></samp> indicating the launching policy:<br>
<table class="boxed"><tr><th>policy</th><th>description</th></tr>
<tr><td><samp><a href="../../../launch">launch::async</a></samp></td><td><b>Asynchronous:</b> Launches a new thread to call <var>fn</var> (as if a <samp><a href="../../thread/thread/default.htm">thread</a></samp> object is constructed with <var>fn</var> and <var>args</var> as arguments, and accessing the <i>shared state</i> of the returned <samp><a href="../future/default.htm">future</a></samp> joins it).</td></tr>
<tr><td><samp><a href="../../../launch">launch::deferred</a></samp></td><td><b>Deferred:</b> The call to <var>fn</var> is deferred until the <i>shared state</i> of the returned <samp><a href="../future/default.htm">future</a></samp> is accessed (with <samp><a href="../../../future_3a_3await">wait</a></samp> or <samp><a href="../../../future_3a_3aget">get</a></samp>). At that point, <var>fn</var> is called and the function is no longer considered deferred. When this call returns, the <i>shared state</i> of the returned <samp><a href="../future/default.htm">future</a></samp> is made <i>ready</i>.</td></tr>
<tr><td><code><a href="../../../launch">launch::async</a>|<a href="../../../launch">launch::deferred</a></code></td><td><b>Automatic:</b> The function chooses the policy automatically (at some point). This depends on the system and library implementation, which generally optimizes for the current availability of concurrency in the system.</td></tr>
</table>
Particular library implementations may support additional <i>launching policies</i>, with the proper label defined in type <samp><a href="../../../launch">launch</a></samp>. Combining multiple values is possible, in which case, the function automatically chooses one among them.<br>
</dd>
<dt>fn</dt>
<dd>A pointer to function, pointer to member, or any kind of <i><a href="../../../is_move_constructible">move-constructible</a></i> function object (i.e., an object whose class defines <samp>operator()</samp>, including <i>closures</i> and <samp><a href="../../functional/function/default.htm">function</a></samp> objects).<br>
The function uses a <i><a href="../../../decay">decay copy</a></i> of this argument.<br>
The return value of <var>fn</var> is stored as the <i>shared state</i> to be retrieved by the <samp><a href="../future/default.htm">future</a></samp> object returned by <samp>async</samp>.<br>
If <var>fn</var> throws, the exception is set in the <i>shared state</i> to be retrieved by the <samp><a href="../future/default.htm">future</a></samp> object.<br>
</dd>
<dt>args...</dt>
<dd>Arguments passed to the call to <var>fn</var> (if any). Their types shall be <i><a href="../../../is_move_constructible">move-constructible</a></i>.<br>
If <var>fn</var> is a <i><a href="../../type_traits/is_member_pointer/default.htm">member pointer</a></i>, the first argument shall be an object for which that member is defined (or a reference, or a pointer to it).<br>
The function uses <i><a href="../../../decay">decay copies</a></i> of these arguments.<br>
</dd>
</dl>
<code>Fn</code> and <code>Args...</code> are template parameters: if implicitly deduced, these are the proper <i>lvalue</i> or <i>rvalue</i> reference types of the arguments. Note though, that the function uses <i><a href="../../../decay">decay copies</a></i> of <var>fn</var> and <var>args...</var> (see <samp><a href="../../../ref">std::ref</a></samp> for a wrapper class that makes references copyable).<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
A <samp><a href="../future/default.htm">future</a></samp> object whose <i>shared state</i> is made ready when the execution of <var>fn</var> ends. The value retrieved by its member <samp><a href="../../../future_3a_3aget">future::get</a></samp> is the value returned by <var>fn</var> (if any).<br>
<br>
When <samp><a href="../../../launch">launch::async</a></samp> is selected, the <samp><a href="../future/default.htm">future</a></samp> returned is linked to the end of the thread created, even if its <i>shared state</i> is never accessed: in this case, its destructor synchronizes with the return of <var>fn</var>. Therefore, the return value shall not be disregarded for asynchronous behavior, even when <var>fn</var> returns <code>void</code>.<br>
<br>
<samp><a href="../../../result_of">result_of::type</a></samp> is the type returned by <samp>Fn</samp> when called with arguments of the types in <samp>Args</samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br></code></pre></td>
<td class="source"><pre><code><cite>// async example</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cout</cite>
<dfn>#include &lt;future&gt;         </dfn><cite>// std::async, std::future</cite>

<cite>// a non-optimized way of checking for prime numbers:</cite>
<var>bool</var> is_prime (<var>int</var> x) {
  std::cout &lt;&lt; <kbd>"Calculating. Please, wait...\n"</kbd>;
  <var>for</var> (<var>int</var> i=2; i&lt;x; ++i) <var>if</var> (x%i==0) <var>return</var> <var>false</var>;
  <var>return</var> <var>true</var>;
}

<var>int</var> main ()
{
  <cite>// call is_prime(313222313) asynchronously:</cite>
  std::future&lt;<var>bool</var>&gt; fut = std::async (is_prime,313222313);

  std::cout &lt;&lt; <kbd>"Checking whether 313222313 is prime.\n"</kbd>;
  <cite>// ...</cite>

  <var>bool</var> ret = fut.get();      <cite>// waits for is_prime to return</cite>

  <var>if</var> (ret) std::cout &lt;&lt; <kbd>"It is prime!\n"</kbd>;
  <var>else</var> std::cout &lt;&lt; <kbd>"It is not prime.\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output (the first two lines may be in a different order, or scrambled):<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Checking whether 313222313 is prime.
Calculating. Please, wait...
It is prime!
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The arguments are accessed to create <i><a href="../../../decay">decay copies</a></i>.<br>
All visible side effects are synchronized between the call to <samp>async</samp> and the call to <var>fn</var>, and between its return point and the access to the returned <samp><a href="../future/default.htm">future</a></samp>'s <i>share state</i>.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, all objects involved are left in a valid state.<br>
<br>
This member function throws an exception on the following conditions:<br>
<table class="boxed">
<tr><th>exception type</th><th>error condition</th><th>description</th></tr>
<tr><td><samp><a href="../../system_error/system_error/default.htm">system_error</a></samp></td><td><samp><a href="../../../errc">errc::resource_unavailable_try_again</a></samp></td><td>The system is unable to start a new thread</td></tr>
</table>
Depending on the library implementation, this member function may also throw exceptions to report other situations.<br>
<br>
If <var>fn</var> throws an exception, it is caught and stored in the <i>shared state</i> accessed by the returned <samp><a href="../future/default.htm">future</a></samp>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "../../thread/thread/default.htm"><b>thread</b></a></dt><dd>Thread <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "../packaged_task/default.htm"><b>packaged_task</b></a></dt><dd>Packaged task <span class="typ">(class template)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 selected folder"><a href="../default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iterator/default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="future_box">
<h3><b><a href="../default.htm">&lt;future&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>classes:</h4><ul>
<li class="cpp11 folder"><a href="../future/default.htm"><span>future</span></a></li>
<li class="cpp11 folder"><a href="../future_error/default.htm"><span>future_error</span></a></li>
<li class="cpp11 folder"><a href="../packaged_task/default.htm"><span>packaged_task</span></a></li>
<li class="cpp11 folder"><a href="../promise/default.htm"><span>promise</span></a></li>
<li class="cpp11 folder"><a href="../shared_future/default.htm"><span>shared_future</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>enum classes:</h4><ul>
<li class="cpp11 folder"><a href="../future_errc/default.htm"><span>future_errc</span></a></li>
<li class="cpp11"><a href="../future_status/default.htm"><span>future_status</span></a></li>
<li class="cpp11"><a href="../launch/default.htm"><span>launch</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp11 selected"><a href="default.htm"><span>async</span></a></li>
<li class="cpp11"><a href="../future_category/default.htm"><span>future_category</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~1482.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiafutureasync'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiafutureasync'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
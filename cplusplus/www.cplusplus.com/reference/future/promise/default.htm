<!DOCTYPE html><!-- saved from url=(0061)http://www.cplusplus.com/reference/future/promise/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>promise - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Reference</a></li>
<li><a href="../default.htm">&lt;future&gt;</a></li>
<li class="here">promise</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;future&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>promise<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class T&gt;  promise;template &lt;class R&amp;&gt; promise&lt;R&amp;&gt;;     // specialization : T is a reference type (R&amp;)template &lt;&gt;         promise&lt;void&gt;;   // specialization : T is void</pre></div><div id="I_description">Promise</div>
<section id="description">
A <samp>promise</samp> is an object that can store a value of type <samp>T</samp> to be retrieved by a <samp><a href="../future/default.htm">future</a></samp> object (possibly in another thread), offering a synchronization point.<br>
<br>
On construction, <samp><a href="default.htm">promise</a></samp> objects are associated to a new <i>shared state</i> on which they can store either a value of type <samp>T</samp> or an exception derived from <samp><a href="../../exception/exception/default.htm">std::exception</a></samp>.<br>
<br>
This <i>shared state</i> can be associated to a <samp><a href="../future/default.htm">future</a></samp> object by calling member <samp><a href="../../../promise_3a_3aget_future">get_future</a></samp>. After the call, both objects share the same <i>shared state</i>:<br>
- The <samp><a href="default.htm">promise</a></samp> object is the <i>asynchronous provider</i> and is expected to set a value for the <i>shared state</i> at some point.<br>
- The <samp><a href="../future/default.htm">future</a></samp> object is an <i>asynchronous return object</i> that can retrieve the value of the <i>shared state</i>, waiting for it to be ready, if necessary.<br>
<br>
The lifetime of the <i>shared state</i> lasts at least until the last object with which it is associated releases it or is destroyed. Therefore it can survive the <samp>promise</samp> object that obtained it in the first place if associated also to a <samp><a href="../future/default.htm">future</a></samp>.<br>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "promise/default.htm"><b>(constructor)</b></a></dt><dd>Construct promise <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "~promise/default.htm"><b>(destructor)</b></a></dt><dd>Destroy promise <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator/default.htm"><b>operator=</b></a></dt><dd>Move-assign promise <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "get_future/default.htm"><b>get_future</b></a></dt><dd>Get future <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "set_value/default.htm"><b>set_value</b></a></dt><dd>Set value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "set_exception/default.htm"><b>set_exception</b></a></dt><dd>Set exception <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "set_value_at_thread_exit/default.htm"><b>set_value_at_thread_exit</b></a></dt><dd>Set value at thread exit <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "set_exception_at_thread_exit/default.htm"><b>set_exception_at_thread_exit</b></a></dt><dd>Set exception at thread exit <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "swap/default.htm"><b>swap</b></a></dt><dd>Swap shared states <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Non-member function overaloas</h3>
<dl class="links"><dt><a href= "swap-free/default.htm"><b>swap (promise)</b></a></dt><dd>Swap promises <span class="typ">(function template)</span></dd></dl>
<br>
<h3>Non-member class specializations</h3>
<dl class="links"><dt><a href= "uses_allocator/default.htm"><b>uses_allocator&lt;promise&gt;</b></a></dt><dd>Uses allocator for promise <span class="typ">(class template)</span></dd></dl>
</section>
<br>
<section id="specializations">
<h3>Template specializations</h3>
Two specific <samp><a href="default.htm">promise</a></samp> specializations are declared in <samp><a href="../../../_5f3cfuturegt">&lt;future&gt;</a></samp>:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> R&amp;&gt; promise&lt;R&amp;&gt;;     <cite>// specialization : T is a reference type (R&amp;)</cite>
<var>template</var> &lt;&gt;         promise&lt;<var>void</var>&gt;;   <cite>// specialization : T is void </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
They operate in the same way as the unspecialized template, except for the argument their <samp><a href="../../../promise_3a_3aset_value">set_value</a></samp> and <samp><a href="../../../promise_3a_3aset_value_at_thread_exit">set_value_at_thread_exit</a></samp> member functions take.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// promise example</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cout</cite>
<dfn>#include &lt;functional&gt;     </dfn><cite>// std::ref</cite>
<dfn>#include &lt;thread&gt;         </dfn><cite>// std::thread</cite>
<dfn>#include &lt;future&gt;         </dfn><cite>// std::promise, std::future</cite>

<var>void</var> print_int (std::future&lt;<var>int</var>&gt;&amp; fut) {
  <var>int</var> x = fut.get();
  std::cout &lt;&lt; <kbd>"value: "</kbd> &lt;&lt; x &lt;&lt; <kbd>'\n'</kbd>;
}

<var>int</var> main ()
{
  std::promise&lt;<var>int</var>&gt; prom;                      <cite>// create promise</cite>

  std::future&lt;<var>int</var>&gt; fut = prom.get_future();    <cite>// engagement with future</cite>

  std::thread th1 (print_int, std::ref(fut));  <cite>// send future to new thread</cite>

  prom.set_value (10);                         <cite>// fulfill promise</cite>
                                               <cite>// (synchronizes with getting the future)</cite>
  th1.join();
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
value: 10
</samp></pre></td></tr></table></div>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 selected folder"><a href="../default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iterator/default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="future_box">
<h3><b><a href="../default.htm">&lt;future&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>classes:</h4><ul>
<li class="cpp11 folder"><a href="../future/default.htm"><span>future</span></a></li>
<li class="cpp11 folder"><a href="../future_error/default.htm"><span>future_error</span></a></li>
<li class="cpp11 folder"><a href="../packaged_task/default.htm"><span>packaged_task</span></a></li>
<li class="cpp11 selected folder"><a href="default.htm"><span>promise</span></a></li>
<li class="cpp11 folder"><a href="../shared_future/default.htm"><span>shared_future</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>enum classes:</h4><ul>
<li class="cpp11 folder"><a href="../future_errc/default.htm"><span>future_errc</span></a></li>
<li class="cpp11"><a href="../future_status/default.htm"><span>future_status</span></a></li>
<li class="cpp11"><a href="../launch/default.htm"><span>launch</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp11"><a href="../async/default.htm"><span>async</span></a></li>
<li class="cpp11"><a href="../future_category/default.htm"><span>future_category</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="promise_box">
<h3><b><a href="default.htm">promise</a></b></h3>
<ul>
<li class="cpp11"><a href="promise/default.htm"><span>promise::promise</span></a></li>
<li class="cpp11"><a href="~promise/default.htm"><span>promise::~promise</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="get_future/default.htm"><span>promise::get_future</span></a></li>
<li class="cpp11"><a href="operator/default.htm"><span>promise::operator=</span></a></li>
<li class="cpp11"><a href="set_exception/default.htm"><span>promise::set_exception</span></a></li>
<li class="cpp11"><a href="set_exception_at_thread_exit/default.htm"><span>promise::set_exception_at_thread_exit</span></a></li>
<li class="cpp11"><a href="set_value/default.htm"><span>promise::set_value</span></a></li>
<li class="cpp11"><a href="set_value_at_thread_exit/default.htm"><span>promise::set_value_at_thread_exit</span></a></li>
<li class="cpp11"><a href="swap/default.htm"><span>promise::swap</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp11"><a href="swap-free/default.htm"><span>swap (promise)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member specializations:</h4><ul>
<li class="cpp11"><a href="uses_allocator/default.htm"><span>uses_allocator&lt;promise&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~1484.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','../../new.cgiafuturepromise'));
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiafuturepromise'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiafuturepromise'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
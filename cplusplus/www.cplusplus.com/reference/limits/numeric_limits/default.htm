<!DOCTYPE html><!-- saved from url=(0068)http://www.cplusplus.com/reference/limits/numeric_limits/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>numeric_limits - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Reference</a></li>
<li><a href="../default.htm">&lt;limits&gt;</a></li>
<li class="here">numeric_limits</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;limits&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>numeric_limits</h1>
<div class="C_prototype"><pre>template &lt;class T&gt; numeric_limits;</pre></div><div id="I_description">Numeric limits type</div>
<section id="description">
Provides information about the properties of <a href="../../type_traits/is_arithmetic/default.htm">arithmetic types</a>  (either integral or floating-point) in the specific platform for which the library compiles.<br>
<br>
This class template is specialized for every <i>fundamental arithmetic type</i>, with its members describing the properties of type <samp>T</samp>. This template shall not be specialized for any other type.<br>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>T</dt>
<dd>A type.<br>
If this is a <i>fundamental arithmetic type</i>, the members of the class describe its properties.<br>
</dd>
</dl>
</section>
<br>
<section id="instantiations">
<h3>Template instantiations</h3>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th colspan="2">fundamental arithmetic types</th></tr>
<tr><td rowspan="11">integral types</td><td><code>bool</code></td></tr>
<tr><td><code>char</code></td></tr>
<tr><td><code>wchar_t</code></td></tr>
<tr><td><code>signed char</code></td></tr>
<tr><td><code>short int</code></td></tr>
<tr><td><code>int</code></td></tr>
<tr><td><code>long int</code></td></tr>
<tr><td><code>unsigned char</code></td></tr>
<tr><td><code>unsigned short int</code></td></tr>
<tr><td><code>unsigned int</code></td></tr>
<tr><td><code>unsigned long int</code></td></tr>
<tr><td rowspan="3">floating point types</td><td><code>float</code></td></tr>
<tr><td><code>double</code></td></tr>
<tr><td><code>long double</code></td></tr>
</table>
For any other type, its default definition is used.<br>
</div>
<div title="C++11">
<table class="boxed">
<tr><th colspan="2">fundamental arithmetic types</th></tr>
<tr><td rowspan="15">integral types</td><td><code>bool</code></td></tr>
<tr><td><code>char</code></td></tr>
<tr><td><code>char16_t</code></td></tr>
<tr><td><code>char32_t</code></td></tr>
<tr><td><code>wchar_t</code></td></tr>
<tr><td><code>signed char</code></td></tr>
<tr><td><code>short int</code></td></tr>
<tr><td><code>int</code></td></tr>
<tr><td><code>long int</code></td></tr>
<tr><td><code>long long int</code></td></tr>
<tr><td><code>unsigned char</code></td></tr>
<tr><td><code>unsigned short int</code></td></tr>
<tr><td><code>unsigned int</code></td></tr>
<tr><td><code>unsigned long int</code></td></tr>
<tr><td><code>unsigned long long int</code></td></tr>
<tr><td rowspan="3">floating point types</td><td><code>float</code></td></tr>
<tr><td><code>double</code></td></tr>
<tr><td><code>long double</code></td></tr>
</table>
This template is also specialized for all <code>const</code> and/or <code>volatile</code> qualifications of these types, with the same values as their unqualified specializations.<br>
<br>
For any other type, its default definition is used.<br>
</div>
</div>
</section>
<br>
<section id="constants">
Members that produce a value of type <samp>T</samp> are member functions, while members of specific types are static member constants:<br>
<h3>Members</h3>
<table class="boxed">
<tr><th>member</th><th>type</th><th>property</th></tr>
<tr><td><samp>is_specialized</samp></td><td><code>bool</code></td><td><code>true</code> for all <a href="../../type_traits/is_arithmetic/default.htm">arithmetic types</a> (i.e., those for which <samp>numeric_limits</samp> is specialized).<br>
<code>false</code> for all other types.</td></tr>
<tr><td><samp>min()</samp></td><td><samp>T</samp></td><td>Minimum finite value.<br>
For floating types with denormalization (variable number of exponent bits): minimum positive normalized value.<br>
Equivalent to <samp><a href="../../climits/default.htm">CHAR_MIN</a></samp>, <samp><a href="../../climits/default.htm">SCHAR_MIN</a></samp>, <samp><a href="../../climits/default.htm">SHRT_MIN</a></samp>, <samp><a href="../../climits/default.htm">INT_MIN</a></samp>, <samp><a href="../../climits/default.htm">LONG_MIN</a></samp>, <samp><a href="../../climits/default.htm">LLONG_MIN</a></samp>, <samp><a href="../../../cfloat">FLT_MIN</a></samp>, <samp><a href="../../../cfloat">DBL_MIN</a></samp>, <samp><a href="../../../cfloat">LDBL_MIN</a></samp> or <code>0</code>, depending on type. </td></tr>
<tr><td><samp>max()</samp></td><td><samp>T</samp></td><td>Maximum finite value.<br>
Equivalent to <samp><a href="../../climits/default.htm">CHAR_MAX</a></samp>, <samp><a href="../../climits/default.htm">SCHAR_MAX</a></samp>, <samp><a href="../../climits/default.htm">UCHAR_MAX</a></samp>, <samp><a href="../../climits/default.htm">SHRT_MAX</a></samp>, <samp><a href="../../climits/default.htm">USHRT_MAX</a></samp>, <samp><a href="../../climits/default.htm">INT_MAX</a></samp>, <samp><a href="../../climits/default.htm">UINT_MAX</a></samp>, <samp><a href="../../climits/default.htm">LONG_MAX</a></samp>, <samp><a href="../../climits/default.htm">ULONG_MAX</a></samp>, <samp><a href="../../climits/default.htm">LLONG_MAX</a></samp>, <samp><a href="../../climits/default.htm">ULLONG_MAX</a></samp>, <samp><a href="../../cstdint/default.htm">UINT_LEAST16_MAX</a></samp>, <samp><a href="../../cstdint/default.htm">UINT_LEAST32_MAX</a></samp>, <samp><a href="../../../cfloat">FLT_MAX</a></samp>, <samp><a href="../../../cfloat">DBL_MAX</a></samp> or <samp><a href="../../../cfloat">LDBL_MAX</a></samp>, depending on type.</td></tr>
<tr class="cpp11"><td><samp>lowest()</samp></td><td><samp>T</samp></td><td>Minimum finite value. (since C++11)<br>
For integral types: the same as <samp>min()</samp>.<br>
For floating-point types: implementation-dependent; generally, the negative of <samp>max()</samp>.</td></tr>
<tr><td><samp>digits</samp></td><td><samp>int</samp></td><td>For integer types: number of non-sign bits (<var>radix</var> base digits) in the representation.<br>
For floating types: number of digits (in <var>radix</var> base) in the mantissa (equivalent to <samp><a href="../../../cfloat">FLT_MANT_DIG</a></samp>, <samp><a href="../../../cfloat">DBL_MANT_DIG</a></samp> or <samp><a href="../../../cfloat">LDBL_MANT_DIG</a></samp>).</td></tr>
<tr><td><samp>digits10</samp></td><td><code>int</code></td><td>Number of digits (in decimal base) that can be represented without change.<br>
Equivalent to <samp><a href="../../../cfloat">FLT_DIG</a></samp>, <samp><a href="../../../cfloat">DBL_DIG</a></samp> or <samp><a href="../../../cfloat">LDBL_DIG</a></samp> for floating types.</td></tr>
<tr class="cpp11"><td><samp>max_digits10</samp></td><td><code>int</code></td><td>Number of digits (in decimal base) required to ensure that values that differ are always differentiated.</td></tr>
<tr><td><samp>is_signed</samp></td><td><code>bool</code></td><td><code>true</code> if type is signed.</td></tr>
<tr><td><samp>is_integer</samp></td><td><code>bool</code></td><td><code>true</code> if type is integer.</td></tr>
<tr><td><samp>is_exact</samp></td><td><code>bool</code></td><td><code>true</code> if type uses exact representations.</td></tr>
<tr><td><samp>radix</samp></td><td><code>int</code></td><td>For integer types: base of the representation.<br>
For floating types: base of the exponent of the representation (equivalent to <samp><a href="../../../cfloat">FLT_RADIX</a></samp>).</td></tr>
<tr><td><samp>epsilon()</samp></td><td><samp>T</samp></td><td>Machine epsilon (the difference between 1 and the least value greater than 1 that is representable).<br>
Equivalent to <samp><a href="../../../cfloat">FLT_EPSILON</a></samp>, <samp><a href="../../../cfloat">DBL_EPSILON</a></samp> or <samp><a href="../../../cfloat">LDBL_EPSILON</a></samp> for floating types.</td></tr>
<tr><td><samp>round_error()</samp></td><td><samp>T</samp></td><td>Measure of the maximum rounding error.</td></tr>
<tr><td><samp>min_exponent</samp></td><td><code>int</code></td><td>Minimum negative integer value such that <var>radix</var> raised to <code>(min_exponent-1)</code> generates a normalized floating-point number.<br>
Equivalent to <samp><a href="../../../cfloat">FLT_MIN_EXP</a></samp>, <samp><a href="../../../cfloat">DBL_MIN_EXP</a></samp> or <samp><a href="../../../cfloat">LDBL_MIN_EXP</a></samp> for floating types.</td></tr>
<tr><td><samp>min_exponent10</samp></td><td><code>int</code></td><td>Minimum negative integer value such that 10 raised to that power generates a normalized floating-point number.<br>
Equivalent to <samp><a href="../../../cfloat">FLT_MIN_10_EXP</a></samp>, <samp><a href="../../../cfloat">DBL_MIN_10_EXP</a></samp> or <samp><a href="../../../cfloat">LDBL_MIN_10_EXP</a></samp> for floating types.</td></tr>
<tr><td><samp>max_exponent</samp></td><td><code>int</code></td><td>Maximum integer value such that <var>radix</var> raised to <code>(max_exponent-1)</code> generates a representable finite floating-point number.<br>
Equivalent to <samp><a href="../../../cfloat">FLT_MAX_EXP</a></samp>, <samp><a href="../../../cfloat">DBL_MAX_EXP</a></samp> or <samp><a href="../../../cfloat">LDBL_MAX_EXP</a></samp> for floating types.</td></tr>
<tr><td><samp>max_exponent10</samp></td><td><code>int</code></td><td>Maximum integer value such that 10 raised to that power generates a normalized finite floating-point number.<br>
Equivalent to <samp><a href="../../../cfloat">FLT_MAX_10_EXP</a></samp>, <samp><a href="../../../cfloat">DBL_MAX_10_EXP</a></samp> or <samp><a href="../../../cfloat">LDBL_MAX_10_EXP</a></samp> for floating types.</td></tr>
<tr><td><samp>has_infinity</samp></td><td><code>bool</code></td><td><code>true</code> if the type has a representation for positive infinity.</td></tr>
<tr><td><samp>has_quiet_NaN</samp></td><td><code>bool</code></td><td><code>true</code> if the type has a representation for a quiet (non-signaling) "Not-a-Number".</td></tr>
<tr><td><samp>has_signaling_NaN</samp></td><td><code>bool</code></td><td><code>true</code> if the type has a representation for a signaling "Not-a-Number".</td></tr>
<tr><td><samp>has_denorm</samp></td><td><samp><a href="../../../float_denorm_style">float_denorm_style</a></samp></td><td>Denormalized values (representations with a variable number of exponent bits). A type may have any of the following enum values:<br>
<samp><a href="../../../float_denorm_style">denorm_absent</a></samp>, if it does not allow denormalized values.<br>
<samp><a href="../../../float_denorm_style">denorm_present</a></samp>, if it allows denormalized values.<br>
<samp><a href="../../../float_denorm_style">denorm_indeterminate</a></samp>, if indeterminate at compile time.<br>
</td></tr>
<tr><td><samp>has_denorm_loss</samp></td><td><code>bool</code></td><td><code>true</code> if a <i>loss of accuracy</i> is detected as a denormalization loss, rather than an inexact result.</td></tr>
<tr><td><samp>infinity()</samp></td><td><samp>T</samp></td><td>Representation of <i>positive infinity</i>, if available.</td></tr>
<tr><td><samp>quiet_NaN()</samp></td><td><samp>T</samp></td><td>Representation of <i>quiet</i> (non-signaling) <i>"Not-a-Number"</i>, if available.</td></tr>
<tr><td><samp>signaling_NaN()</samp></td><td><samp>T</samp></td><td>Representation of <i>signaling "Not-a-Number"</i>, if available.</td></tr>
<tr><td><samp>denorm_min()</samp></td><td><samp>T</samp></td><td>Minimum positive denormalized value.<br>
For types not allowing denormalized values: same as <code>min()</code>.</td></tr>
<tr><td><samp>is_iec559</samp></td><td><code>bool</code></td><td><code>true</code> if the type adheres to IEC-559 / IEEE-754 standard.<br>
An IEC-559 type always has <samp>has_infinity</samp>, <samp>has_quiet_NaN</samp> and <samp>has_signaling_NaN</samp> set to <code>true</code>; And <samp>infinity</samp>, <samp>quiet_NaN</samp> and <samp>signaling_NaN</samp> return some non-zero value.</td></tr>
<tr><td><samp>is_bounded</samp></td><td><code>bool</code></td><td><code>true</code> if the set of values represented by the type is finite.</td></tr>
<tr><td><samp>is_modulo</samp></td><td><code>bool</code></td><td><code>true</code> if the type is modulo. A type is <i>modulo</i> if it is possible to add two positive numbers and have a result that wraps around to a third number that is less.</td></tr>
<tr><td><samp>traps</samp></td><td><code>bool</code></td><td><code>true</code> if trapping is implemented for the type.</td></tr>
<tr><td><samp>tinyness_before</samp></td><td><code>bool</code></td><td><code>true</code> if tinyness is detected before rounding.</td></tr>
<tr><td><samp>round_style</samp></td><td><samp><a href="../../../float_round_style">float_round_style</a></samp></td><td>Rounding style. A type may have any of the following enum values:<br>
<samp><a href="../../../float_round_style">round_toward_zero</a></samp>, if it rounds toward zero.<br>
<samp><a href="../../../float_round_style">round_to_nearest</a></samp>, if it rounds to the nearest representable value.<br>
<samp><a href="../../../float_round_style">round_toward_infinity</a></samp>, if it rounds toward infinity.<br>
<samp><a href="../../../float_round_style">round_toward_neg_infinity</a></samp>, if it rounds toward negative infinity.<br>
<samp><a href="../../../float_round_style">round_indeterminate</a></samp>, if the rounding style is indeterminable at compile time.</td></tr>
</table>
<br>
For all types that are not <i>fundamental arithmetic types</i>, the default template definition is used:<br>
<div class="C_SwitchCases">
<div title="C++98">
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> T&gt; <var>class</var> numeric_limits {
<var>public</var>:
  <var>static</var> <var>const</var> <var>bool</var> is_specialized = <var>false</var>;
  <var>static</var> T min() <var>throw</var>();
  <var>static</var> T max() <var>throw</var>();
  <var>static</var> <var>const</var> <var>int</var>  digits = 0;
  <var>static</var> <var>const</var> <var>int</var>  digits10 = 0;
  <var>static</var> <var>const</var> <var>bool</var> is_signed = <var>false</var>;
  <var>static</var> <var>const</var> <var>bool</var> is_integer = <var>false</var>;
  <var>static</var> <var>const</var> <var>bool</var> is_exact = <var>false</var>;
  <var>static</var> <var>const</var> <var>int</var> radix = 0;
  <var>static</var> T epsilon() <var>throw</var>();
  <var>static</var> T round_error() <var>throw</var>();

  <var>static</var> <var>const</var> <var>int</var>  min_exponent = 0;
  <var>static</var> <var>const</var> <var>int</var>  min_exponent10 = 0;
  <var>static</var> <var>const</var> <var>int</var>  max_exponent = 0;
  <var>static</var> <var>const</var> <var>int</var>  max_exponent10 = 0;

  <var>static</var> <var>const</var> <var>bool</var> has_infinity = <var>false</var>;
  <var>static</var> <var>const</var> <var>bool</var> has_quiet_NaN = <var>false</var>;
  <var>static</var> <var>const</var> <var>bool</var> has_signaling_NaN = <var>false</var>;
  <var>static</var> <var>const</var> float_denorm_style has_denorm = denorm_absent;
  <var>static</var> <var>const</var> <var>bool</var> has_denorm_loss = <var>false</var>;
  <var>static</var> T infinity() <var>throw</var>();
  <var>static</var> T quiet_NaN() <var>throw</var>();
  <var>static</var> T signaling_NaN() <var>throw</var>();
  <var>static</var> T denorm_min() <var>throw</var>();

  <var>static</var> <var>const</var> <var>bool</var> is_iec559 = <var>false</var>;
  <var>static</var> <var>const</var> <var>bool</var> is_bounded = <var>false</var>;
  <var>static</var> <var>const</var> <var>bool</var> is_modulo = <var>false</var>;

  <var>static</var> <var>const</var> <var>bool</var> traps = <var>false</var>;
  <var>static</var> <var>const</var> <var>bool</var> tinyness_before = <var>false</var>;
  <var>static</var> <var>const</var> float_round_style round_style = round_toward_zero;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</div>
<div title="C++11">
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> T&gt; <var>class</var> numeric_limits {
<var>public</var>:
  <var>static</var> <var>constexpr</var> <var>bool</var> is_specialized = <var>false</var>;
  <var>static</var> <var>constexpr</var> T min() <var>noexcept</var> { <var>return</var> T(); }
  <var>static</var> <var>constexpr</var> T max() <var>noexcept</var> { <var>return</var> T(); }
  <var>static</var> <var>constexpr</var> T lowest() <var>noexcept</var> { <var>return</var> T(); }
  <var>static</var> <var>constexpr</var> <var>int</var>  digits = 0;
  <var>static</var> <var>constexpr</var> <var>int</var>  digits10 = 0;
  <var>static</var> <var>constexpr</var> <var>bool</var> is_signed = <var>false</var>;
  <var>static</var> <var>constexpr</var> <var>bool</var> is_integer = <var>false</var>;
  <var>static</var> <var>constexpr</var> <var>bool</var> is_exact = <var>false</var>;
  <var>static</var> <var>constexpr</var> <var>int</var> radix = 0;
  <var>static</var> <var>constexpr</var> T epsilon() <var>noexcept</var> { <var>return</var> T(); }
  <var>static</var> <var>constexpr</var> T round_error() <var>noexcept</var> { <var>return</var> T(); }

  <var>static</var> <var>constexpr</var> <var>int</var>  min_exponent = 0;
  <var>static</var> <var>constexpr</var> <var>int</var>  min_exponent10 = 0;
  <var>static</var> <var>constexpr</var> <var>int</var>  max_exponent = 0;
  <var>static</var> <var>constexpr</var> <var>int</var>  max_exponent10 = 0;

  <var>static</var> <var>constexpr</var> <var>bool</var> has_infinity = <var>false</var>;
  <var>static</var> <var>constexpr</var> <var>bool</var> has_quiet_NaN = <var>false</var>;
  <var>static</var> <var>constexpr</var> <var>bool</var> has_signaling_NaN = <var>false</var>;
  <var>static</var> <var>constexpr</var> float_denorm_style has_denorm = denorm_absent;
  <var>static</var> <var>constexpr</var> <var>bool</var> has_denorm_loss = <var>false</var>;
  <var>static</var> <var>constexpr</var> T infinity() <var>noexcept</var> { <var>return</var> T(); }
  <var>static</var> <var>constexpr</var> T quiet_NaN() <var>noexcept</var> { <var>return</var> T(); }
  <var>static</var> <var>constexpr</var> T signaling_NaN() <var>noexcept</var> { <var>return</var> T(); }
  <var>static</var> <var>constexpr</var> T denorm_min() <var>noexcept</var> { <var>return</var> T(); }

  <var>static</var> <var>constexpr</var> <var>bool</var> is_iec559 = <var>false</var>;
  <var>static</var> <var>constexpr</var> <var>bool</var> is_bounded = <var>false</var>;
  <var>static</var> <var>constexpr</var> <var>bool</var> is_modulo = <var>false</var>;

  <var>static</var> <var>constexpr</var> <var>bool</var> traps = <var>false</var>;
  <var>static</var> <var>constexpr</var> <var>bool</var> tinyness_before = <var>false</var>;
  <var>static</var> <var>constexpr</var> float_round_style round_style = round_toward_zero;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</div>
<br>
All specializations shall also provide these values as <i>constant expressions</i>.<br>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><cite>// numeric_limits example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;limits&gt;       </dfn><cite>// std::numeric_limits</cite>

<var>int</var> main () {
  std::cout &lt;&lt; std::boolalpha;
  std::cout &lt;&lt; <kbd>"Minimum value for int: "</kbd> &lt;&lt; std::numeric_limits&lt;<var>int</var>&gt;::min() &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"Maximum value for int: "</kbd> &lt;&lt; std::numeric_limits&lt;<var>int</var>&gt;::max() &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"int is signed: "</kbd> &lt;&lt; std::numeric_limits&lt;<var>int</var>&gt;::is_signed &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"Non-sign bits in int: "</kbd> &lt;&lt; std::numeric_limits&lt;<var>int</var>&gt;::digits &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"int has infinity: "</kbd> &lt;&lt; std::numeric_limits&lt;<var>int</var>&gt;::has_infinity &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Minimum value for int: -2147483648
Maximum value for int: 2147483647
int is signed: true
Non-sign bits in int: 31
int has infinity: false
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "../../climits/default.htm"><b>&lt;climits&gt; (limits.h)</b></a></dt><dd>Sizes of integral types <span class="typ">(header)</span></dd></dl><dl class="links"><dt><a href= "../../cfloat/default.htm"><b>&lt;cfloat&gt; (float.h)</b></a></dt><dd>Characteristics of floating-point types <span class="typ">(header)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iterator/default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="limits_box">
<h3><b><a href="../default.htm">&lt;limits&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="../float_denorm_style/default.htm"><span>float_denorm_style</span></a></li>
<li class="cpp98 cpp11"><a href="../float_round_style/default.htm"><span>float_round_style</span></a></li>
<li class="cpp98 cpp11 selected"><a href="default.htm"><span>numeric_limits</span></a></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~1668.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgialimitsnumeric_limits'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgialimitsnumeric_limits'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
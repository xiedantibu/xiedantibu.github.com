<!DOCTYPE html><!-- saved from url=(0054)http://www.cplusplus.com/reference/map/map/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>map - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Reference</a></li>
<li><a href="../default.htm">&lt;map&gt;</a></li>
<li class="here">map</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>map</h1>
<div class="C_prototype"><pre>template &lt; class Key,                                     // map::key_type           class T,                                       // map::mapped_type           class Compare = less&lt;Key&gt;,                     // map::key_compare           class Alloc = allocator&lt;pair&lt;const Key,T&gt; &gt;    // map::allocator_type           &gt; class map;</pre></div><div id="I_description">Map</div>
<section id="description">
Maps are associative containers that store elements formed by a combination of a <i>key value</i> and a <i>mapped value</i>, following a specific order.<br>
<br>
In a <tt>map</tt>, the <i>key values</i> are generally used to sort and uniquely identify the elements, while the <i>mapped values</i> store the content associated to this <i>key</i>. The types of <i>key</i> and <i>mapped value</i> may differ, and are grouped together in member type <tt>value_type</tt>, which is a <a href="../../utility/pair/default.htm">pair</a> type combining both:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>typedef</var> pair&lt;<var>const</var> Key, T&gt; value_type;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Internally, the elements in a <tt>map</tt> are always sorted by its <i>key</i> following a specific <i>strict weak ordering</i> criterion indicated by its internal <a href="key_comp/default.htm">comparison object</a> (of type <tt>Compare</tt>).<br>
<br>
<tt>map</tt> containers are generally slower than <a href="../../unordered_map/unordered_map/default.htm">unordered_map</a> containers to access individual elements by their <i>key</i>, but they allow the direct iteration on subsets based on their order.<br>
<br>
The mapped values in a <a href="default.htm">map</a> can be accessed directly by their corresponding key using the <i>bracket operator</i> ((<a href="operator/default.htm">operator[]</a>).<br>
<br>
Maps are typically implemented as <i>binary search trees</i>.<br>
</section>
<br>
<section id="properties">
<h3>Container properties</h3>
<dl>
<dt>Associative</dt>
<dd>Elements in associative containers are referenced by their <i>key</i> and not by their absolute position in the container.</dd>
<dt>Ordered</dt>
<dd>The elements in the container follow a strict order at all times. All inserted elements are given a position in this order.</dd>
<dt>Map</dt>
<dd>Each element associates a <i>key</i> to a <i>mapped value</i>: Keys are meant to identify the elements whose main content is the <i>mapped value</i>.</dd>
<dt>Unique keys</dt>
<dd>No two elements in the container can have equivalent <i>keys</i>.</dd>
<dt>Allocator-aware</dt>
<dd>The container uses an allocator object to dynamically handle its storage needs.</dd>
</dl>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>Key</dt>
<dd>Type of the <i>keys</i>. Each element in a <tt>map</tt> is uniquely identified by its key value.<br>
Aliased as member type <tt>map::key_type</tt>.</dd>
<dt>T</dt>
<dd>Type of the mapped value. Each element in a <tt>map</tt> stores some data as its mapped value.<br>
Aliased as member type <tt>map::mapped_type</tt>.</dd>
<dt>Compare</dt>
<dd>A binary predicate that takes two element keys as arguments and returns a <tt>bool</tt>. The expression <tt>comp(a,b)</tt>, where <i>comp</i> is an object of this type and <i>a</i> and <i>b</i> are key values, shall return <tt>true</tt> if <i>a</i> is considered to go before <i>b</i> in the <i>strict weak ordering</i> the function defines.<br>
The <tt>map</tt> object uses this expression to determine both the order the elements follow in the container and whether two element keys are equivalent (by comparing them reflexively: they are equivalent if <tt>!comp(a,b) && !comp(b,a)</tt>). No two elements in a <tt>map</tt> container can have equivalent keys.<br>
This can be a function pointer or a function object (see <a href="../../../map_3a_3amap">constructor</a> for an example). This defaults to <tt><a href="../../functional/less/default.htm">less</a>&lt;T&gt;</tt>, which returns the same as applying the <i>less-than operator</i> (<tt>a&lt;b</tt>).<br>
Aliased as member type <tt>map::key_compare</tt>.</dd>
<dt>Alloc</dt>
<dd>Type of the allocator object used to define the storage allocation model. By default, the <a href="../../memory/allocator/default.htm">allocator</a> class template is used, which defines the simplest memory allocation model and is value-independent.<br>
Aliased as member type <tt>map::allocator_type</tt>.</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>key_type</tt></td><td>The first template parameter (<tt>Key</tt>)</td><td></td></tr>
<tr><td><tt>mapped_type</tt></td><td>The second template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>value_type</tt></td><td><tt><a href="../../utility/pair/default.htm">pair</a>&lt;const key_type,mapped_type&gt;</tt></td><td></td></tr>
<tr><td><tt>key_compare</tt></td><td>The third template parameter (<tt>Compare</tt>)</td><td>defaults to: <tt><a href="../../functional/less/default.htm">less</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>value_compare</tt></td><td><i>Nested function class to compare elements</i></td><td>see <a href="value_comp/default.htm">value_comp</a></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The fourth template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="../../memory/allocator/default.htm">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>allocator_type::reference</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>value_type&</tt></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>allocator_type::const_reference</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>const value_type&</tt></td></tr>
<tr><td><tt>pointer</tt></td><td><tt>allocator_type::pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt>allocator_type::const_pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> to <tt>value_type</tt></td><td>convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type, identical to: <tt>iterator_traits&lt;iterator&gt;::difference_type</tt></td><td>usually the same as <a href="../../cstddef/ptrdiff_t/default.htm">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type that can represent any non-negative value of <tt>difference_type</tt></td><td>usually the same as <a href="../../cstddef/size_t/default.htm">size_t</a></td></tr>
</table>
</div>
<div title="C++11">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>key_type</tt></td><td>The first template parameter (<tt>Key</tt>)</td><td></td></tr>
<tr><td><tt>mapped_type</tt></td><td>The second template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>value_type</tt></td><td><tt><a href="../../utility/pair/default.htm">pair</a>&lt;const key_type,mapped_type&gt;</tt></td><td></td></tr>
<tr><td><tt>key_compare</tt></td><td>The third template parameter (<tt>Compare</tt>)</td><td>defaults to: <tt><a href="../../functional/less/default.htm">less</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>value_compare</tt></td><td><i>Nested function class to compare elements</i></td><td>see <a href="value_comp/default.htm">value_comp</a></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The fourth template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="../../memory/allocator/default.htm">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>value_type&</tt></td><td></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>const value_type&</tt></td><td></td></tr>
<tr><td><tt>pointer</tt></td><td><tt><a href="../../memory/allocator_traits/default.htm">allocator_traits</a>&lt;allocator_type&gt;::pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt><a href="../../memory/allocator_traits/default.htm">allocator_traits</a>&lt;allocator_type&gt;::const_pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> to <tt>value_type</tt></td><td>convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type, identical to:<br>
<tt>iterator_traits&lt;iterator&gt;::difference_type</tt></td><td>usually the same as <a href="../../cstddef/ptrdiff_t/default.htm">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type that can represent any non-negative value of <tt>difference_type</tt></td><td>usually the same as <a href="../../cstddef/size_t/default.htm">size_t</a></td></tr>
</table>
</div>
</div>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "map/default.htm"><b>(constructor)</b></a></dt><dd>Construct map <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "~map/default.htm"><b>(destructor)</b></a></dt><dd>Map destructor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator/default.htm"><b>operator=</b></a></dt><dd>Copy container content <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Iterators</b>:<br>
<dl class="links"><dt><a href= "begin/default.htm"><b>begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "end/default.htm"><b>end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "rbegin/default.htm"><b>rbegin</b></a></dt><dd>Return reverse iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "rend/default.htm"><b>rend</b></a></dt><dd>Return reverse iterator to reverse end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "cbegin/default.htm"><b>cbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "cend/default.htm"><b>cend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "crbegin/default.htm"><b>crbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "crend/default.htm"><b>crend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse end <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Capacity</b>:<br>
<dl class="links"><dt><a href= "empty/default.htm"><b>empty</b></a></dt><dd>Test whether container is empty <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "size/default.htm"><b>size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "max_size/default.htm"><b>max_size</b></a></dt><dd>Return maximum size <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Element access</b>:<br>
<dl class="links"><dt><a href= "operator/default.htm"><b>operator[]</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "at/default.htm"><b>at <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Modifiers</b>:<br>
<dl class="links"><dt><a href= "insert/default.htm"><b>insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "erase/default.htm"><b>erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "swap/default.htm"><b>swap</b></a></dt><dd>Swap content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "clear/default.htm"><b>clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "emplace/default.htm"><b>emplace <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "emplace_hint/default.htm"><b>emplace_hint <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element with hint <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Observers</b>:<br>
<dl class="links"><dt><a href= "key_comp/default.htm"><b>key_comp</b></a></dt><dd>Return key comparison object <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "value_comp/default.htm"><b>value_comp</b></a></dt><dd>Return value comparison object <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Operations</b>:<br>
<dl class="links"><dt><a href= "find/default.htm"><b>find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "count/default.htm"><b>count</b></a></dt><dd>Count elements with a specific key <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "lower_bound/default.htm"><b>lower_bound</b></a></dt><dd>Return iterator to lower bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "upper_bound/default.htm"><b>upper_bound</b></a></dt><dd>Return iterator to upper bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "equal_range/default.htm"><b>equal_range</b></a></dt><dd>Get range of equal elements <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Allocator</b>:<br>
<dl class="links"><dt><a href= "get_allocator/default.htm"><b>get_allocator</b></a></dt><dd>Get allocator <span class="typ">(public member function)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iterator/default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="map_box">
<h3><b><a href="../default.htm">&lt;map&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11 selected folder"><a href="default.htm"><span>map</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../multimap/default.htm"><span>multimap</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="map_box">
<h3><b><a href="default.htm">map</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="map/default.htm"><span>map::map</span></a></li>
<li class="cpp98 cpp11"><a href="~map/default.htm"><span>map::~map</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="at/default.htm"><span>map::at</span></a></li>
<li class="cpp98 cpp11"><a href="begin/default.htm"><span>map::begin</span></a></li>
<li class="cpp11"><a href="cbegin/default.htm"><span>map::cbegin</span></a></li>
<li class="cpp11"><a href="cend/default.htm"><span>map::cend</span></a></li>
<li class="cpp98 cpp11"><a href="clear/default.htm"><span>map::clear</span></a></li>
<li class="cpp98 cpp11"><a href="count/default.htm"><span>map::count</span></a></li>
<li class="cpp11"><a href="crbegin/default.htm"><span>map::crbegin</span></a></li>
<li class="cpp11"><a href="crend/default.htm"><span>map::crend</span></a></li>
<li class="cpp11"><a href="emplace/default.htm"><span>map::emplace</span></a></li>
<li class="cpp11"><a href="emplace_hint/default.htm"><span>map::emplace_hint</span></a></li>
<li class="cpp98 cpp11"><a href="empty/default.htm"><span>map::empty</span></a></li>
<li class="cpp98 cpp11"><a href="end/default.htm"><span>map::end</span></a></li>
<li class="cpp98 cpp11"><a href="equal_range/default.htm"><span>map::equal_range</span></a></li>
<li class="cpp98 cpp11"><a href="erase/default.htm"><span>map::erase</span></a></li>
<li class="cpp98 cpp11"><a href="find/default.htm"><span>map::find</span></a></li>
<li class="cpp98 cpp11"><a href="get_allocator/default.htm"><span>map::get_allocator</span></a></li>
<li class="cpp98 cpp11"><a href="insert/default.htm"><span>map::insert</span></a></li>
<li class="cpp98 cpp11"><a href="key_comp/default.htm"><span>map::key_comp</span></a></li>
<li class="cpp98 cpp11"><a href="lower_bound/default.htm"><span>map::lower_bound</span></a></li>
<li class="cpp98 cpp11"><a href="max_size/default.htm"><span>map::max_size</span></a></li>
<li class="cpp98 cpp11"><a href="operator/default.htm"><span>map::operator=</span></a></li>
<li class="cpp98 cpp11"><a href="operator/default.htm"><span>map::operator[]</span></a></li>
<li class="cpp98 cpp11"><a href="rbegin/default.htm"><span>map::rbegin</span></a></li>
<li class="cpp98 cpp11"><a href="rend/default.htm"><span>map::rend</span></a></li>
<li class="cpp98 cpp11"><a href="size/default.htm"><span>map::size</span></a></li>
<li class="cpp98 cpp11"><a href="swap/default.htm"><span>map::swap</span></a></li>
<li class="cpp98 cpp11"><a href="upper_bound/default.htm"><span>map::upper_bound</span></a></li>
<li class="cpp98 cpp11"><a href="value_comp/default.htm"><span>map::value_comp</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp98 cpp11"><a href="operators/default.htm"><span>relational operators (map)</span></a></li>
<li class="cpp98 cpp11"><a href="swap-free/default.htm"><span>swap (map)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../ovr0/contact.doreferrerwww.cplusplus.com_252freference_~193.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','../../new.cgiamapmap.htm'));
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiamapmap.htm'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiamapmap'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0081)http://www.cplusplus.com/reference/unordered_map/unordered_map/insert/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>unordered_map::insert - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../../v321/main.css">
<script src="../../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../../default.htm">Reference</a></li>
<li><a href="../../default.htm">&lt;unordered_map&gt;</a></li>
<li><a href="../default.htm">unordered_map</a></li>
<li class="here">insert</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="../default.htm">unordered_map</a>::insert<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>(1)</th><td><pre>pair&lt;iterator,bool&gt; insert ( const value_type&amp; val );</pre></td></tr><tr class="even"><th>(2)</th><td><pre>template &lt;class P&gt;    pair&lt;iterator,bool&gt; insert ( P&amp;&amp; val );</pre></td></tr><tr class="odd"><th>(3)</th><td><pre>iterator insert ( const_iterator hint, const value_type&amp; val );</pre></td></tr><tr class="even"><th>(4)</th><td><pre>template &lt;class P&gt;    iterator insert ( const_iterator hint, P&amp;&amp; val );</pre></td></tr><tr class="odd"><th>(5)</th><td><pre>template &lt;class InputIterator&gt;    void insert ( InputIterator first, InputIterator last );</pre></td></tr><tr class="even"><th>(6)</th><td><pre>void insert ( initializer_list&lt;value_type&gt; il );</pre></td></tr></table></div><div id="I_description">Insert elements</div>
<section id="description">
Inserts new elements in the <a href="../default.htm">unordered_map</a>.<br>
<br>
Each element is inserted only if its key is not equivalent to the key of any other element already in the container (keys in an <a href="../default.htm">unordered_map</a> are unique).<br>
<br>
This effectively increases the container <a href="../size/default.htm">size</a> by the number of elements inserted.<br>
<br>
The parameters determine how many elements are inserted and to which values they are initialized:<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>val</dt>
<dd>Object to be copied to (or moved as) the value of the new element.<br>
Versions (1) and (3) copy the element (i.e., <tt>val</tt> preserves its contents, the container keeps a copy).<br>
Versions (2) and (4) move the element (i.e., <tt>val</tt> loses its content, which is acquired by the new element in the container).<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="../default.htm">unordered_map</a> as <tt>pair&lt;const key_type,mapped_type&gt;</tt>, where member type <tt>key_type</tt> is an alias of the first template parameter (the key type), and <tt>mapped_type</tt> is an alias of the second template parameter (the mapped type, <tt>T</tt>).<br>
<div class="C_SwitchCases">
<div title="C++11">
The signatures taking an argument of type <code>P&&</code> are only called if <tt>P</tt> is a type implicitly convertible to <tt>value_type</tt>.<br>
</div>
<div title="C++14">
The signatures taking an argument of type <code>P&&</code> are only called if <code><a href="../../../type_traits/is_constructible/default.htm">std::is_constructible</a>&lt;value_type,P&&&gt;</code> is <code>true</code>.<br>
</div>
</div>
</dd>
<dt>hint</dt>
<dd>Iterator to a position suggested as a hint on where to start the search for the proper insertion point. This value may or may not be used by the container to optimize the operation. The element will be stored in its corresponding bucket, no matter what is passed as <tt>hint</tt>.<br>
Member type <tt>const_iterator</tt> is a <a href="../../../iterator/forwarditerator/default.htm">forward iterator</a> type.</dd>
<dt>first, last</dt>
<dd>Iterators specifying a range of elements. Copies of the elements in the range <tt>[first,last)</tt> are inserted in the <a href="../default.htm">unordered_map</a> container.<br>
Notice that the range includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the one pointed by <i>last</i>.<br>
Neither <tt>first</tt> nor <tt>last</tt> shall be iterators in the destination container.<br>
The template type can be any type of <a href="../../../iterator/inputiterator/default.htm">input iterator</a>.</dd>
<dt>il</dt>
<dd>An <a href="../../../initializer_list/initializer_list/default.htm">initializer_list</a> object. The compiler will automatically construct such objects from <i>initializer list</i> declarators.<br>
Member type <tt>value_type</tt> is the type of the elements contained in the container, defined in <a href="../default.htm">unordered_map</a> as <tt>pair&lt;const key_type,mapped_type&gt;</tt>, where member type <tt>key_type</tt> is an alias of the first template parameter (the key type), and <tt>mapped_type</tt> is an alias of the second template parameter (the mapped type, <tt>T</tt>).<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
In versions (1) and (2), the function returns a <a href="../../../utility/pair/default.htm">pair</a> object whose first element is an iterator pointing either to the newly inserted element in the container or to the element whose key is equivalent, and a <tt>bool</tt> value indicating whether the element was successfully inserted or not.<br>
<br>
In versions (3) and (4), the function returns an iterator pointing either to the newly inserted element in the container or to the element whose key is equivalent.<br>
<br>
Versions (5) and (6) return no value.<br>
<br>
Member type <tt>iterator</tt> is a <a href="../../../iterator/forwarditerator/default.htm">forward iterator</a> type.<br>
<br>
The storage for the new element is allocated using <tt>allocator_traits&lt;allocator_type&gt;::construct()</tt>, which may throw exceptions on failure (for the default <a href="../../../memory/allocator/default.htm">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_map::insert</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_map&lt;std::string,<var>double</var>&gt;
              myrecipe,
              mypantry = {{<kbd>"milk"</kbd>,2.0},{<kbd>"flour"</kbd>,1.5}};

  std::pair&lt;std::string,<var>double</var>&gt; myshopping (<kbd>"baking powder"</kbd>,0.3);

  myrecipe.insert (myshopping);                        <cite>// copy insertion</cite>
  myrecipe.insert (std::make_pair&lt;std::string,<var>double</var>&gt;(<kbd>"eggs"</kbd>,6.0)); <cite>// move insertion</cite>
  myrecipe.insert (mypantry.begin(), mypantry.end());  <cite>// range insertion</cite>
  myrecipe.insert ( {{<kbd>"sugar"</kbd>,0.8},{<kbd>"salt"</kbd>,0.1}} );    <cite>// initializer list insertion</cite>

  std::cout &lt;&lt; <kbd>"myrecipe contains:"</kbd> &lt;&lt; std::endl;
  <var>for</var> (<var>auto</var>&amp; x: myrecipe)
    std::cout &lt;&lt; x.first &lt;&lt; <kbd>": "</kbd> &lt;&lt; x.second &lt;&lt; std::endl;

  std::cout &lt;&lt; std::endl;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myrecipe contains:
salt: 0.1
eggs: 6
sugar: 0.8
baking powder: 0.3
flour: 1.5
milk: 2
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
<dl>
<dt>Single element insertions:</dt>
<dd>Average case: constant.<br>
Worst case: linear in container size.<br>
</dd>
<dt>Multiple elements insertion:</dt>
<dd>Average case: linear in the number of elements inserted.<br>
Worst case: <tt>N*(size+1)</tt>: number of elements inserted times the container size plus one.</dd>
</dl>
May trigger a <a href="../rehash/default.htm">rehash</a> (not included in the complexity above).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
On most cases, all iterators in the container remain valid after the insertion. The only exception being when the growth of the container forces a rehash. In this case, all iterators in the container are invalidated.<br>
<br>
A rehash is forced if the new container <a href="../size/default.htm">size</a> after the insertion operation would increase above its capacity threshold (calculated as the container's <a href="../bucket_count/default.htm">bucket_count</a> multiplied by its <a href="../max_load_factor/default.htm">max_load_factor</a>).<br>
<br>
References to elements in the <a href="../default.htm">unordered_map</a> container remain valid in all cases, even after a rehash.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "../emplace/default.htm"><b>unordered_map::emplace</b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "../emplace_hint/default.htm"><b>unordered_map::emplace_hint</b></a></dt><dd>Construct and insert element with hint <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "../operator/default.htm"><b>unordered_map::operator[]</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "../at/default.htm"><b>unordered_map::at</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl>
</section>
</div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 selected folder"><a href="../../default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../iterator/default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="unordered_map_box">
<h3><b><a href="../../default.htm">&lt;unordered_map&gt;</a></b></h3>
<ul>
<li class="cpp11 selected folder"><a href="../default.htm"><span>unordered_map</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_multimap/default.htm"><span>unordered_multimap</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="unordered_map_box">
<h3><b><a href="../default.htm">unordered_map</a></b></h3>
<ul>
<li class="cpp11"><a href="../unordered_map/default.htm"><span>unordered_map::unordered_map</span></a></li>
<li class="cpp11"><a href="../~unordered_map/default.htm"><span>unordered_map::~unordered_map</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="../at/default.htm"><span>unordered_map::at</span></a></li>
<li class="cpp11"><a href="../begin/default.htm"><span>unordered_map::begin</span></a></li>
<li class="cpp11"><a href="../bucket/default.htm"><span>unordered_map::bucket</span></a></li>
<li class="cpp11"><a href="../bucket_count/default.htm"><span>unordered_map::bucket_count</span></a></li>
<li class="cpp11"><a href="../bucket_size/default.htm"><span>unordered_map::bucket_size</span></a></li>
<li class="cpp11"><a href="../cbegin/default.htm"><span>unordered_map::cbegin</span></a></li>
<li class="cpp11"><a href="../cend/default.htm"><span>unordered_map::cend</span></a></li>
<li class="cpp11"><a href="../clear/default.htm"><span>unordered_map::clear</span></a></li>
<li class="cpp11"><a href="../count/default.htm"><span>unordered_map::count</span></a></li>
<li class="cpp11"><a href="../emplace/default.htm"><span>unordered_map::emplace</span></a></li>
<li class="cpp11"><a href="../emplace_hint/default.htm"><span>unordered_map::emplace_hint</span></a></li>
<li class="cpp11"><a href="../empty/default.htm"><span>unordered_map::empty</span></a></li>
<li class="cpp11"><a href="../end/default.htm"><span>unordered_map::end</span></a></li>
<li class="cpp11"><a href="../equal_range/default.htm"><span>unordered_map::equal_range</span></a></li>
<li class="cpp11"><a href="../erase/default.htm"><span>unordered_map::erase</span></a></li>
<li class="cpp11"><a href="../find/default.htm"><span>unordered_map::find</span></a></li>
<li class="cpp11"><a href="../get_allocator/default.htm"><span>unordered_map::get_allocator</span></a></li>
<li class="cpp11"><a href="../hash_function/default.htm"><span>unordered_map::hash_function</span></a></li>
<li class="cpp11 selected"><a href="default.htm"><span>unordered_map::insert</span></a></li>
<li class="cpp11"><a href="../key_eq/default.htm"><span>unordered_map::key_eq</span></a></li>
<li class="cpp11"><a href="../load_factor/default.htm"><span>unordered_map::load_factor</span></a></li>
<li class="cpp11"><a href="../max_bucket_count/default.htm"><span>unordered_map::max_bucket_count</span></a></li>
<li class="cpp11"><a href="../max_load_factor/default.htm"><span>unordered_map::max_load_factor</span></a></li>
<li class="cpp11"><a href="../max_size/default.htm"><span>unordered_map::max_size</span></a></li>
<li class="cpp11"><a href="../operator/default.htm"><span>unordered_map::operator=</span></a></li>
<li class="cpp11"><a href="../operator/default.htm"><span>unordered_map::operator[]</span></a></li>
<li class="cpp11"><a href="../rehash/default.htm"><span>unordered_map::rehash</span></a></li>
<li class="cpp11"><a href="../reserve/default.htm"><span>unordered_map::reserve</span></a></li>
<li class="cpp11"><a href="../size/default.htm"><span>unordered_map::size</span></a></li>
<li class="cpp11"><a href="../swap/default.htm"><span>unordered_map::swap</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp11"><a href="../operators/default.htm"><span>operators (unordered_map)</span></a></li>
<li class="cpp11"><a href="../swap%28global%29/default.htm"><span>swap (unordered_map)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../../default.htm">Home page</a> | <a href="../../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../../ovr0/contact.doreferrerwww.cplusplus.com_252freference_~349.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','../../../edit.cgiaunordered_mapunordered_mapinsert.htm'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../../delete.cgiaunordered_mapunordered_mapinsert'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../../httpsssl/default.htm' : '../../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0061)http://www.cplusplus.com/reference/set/set/insert/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>set::insert - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../../v321/main.css">
<script src="../../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../../default.htm">Reference</a></li>
<li><a href="../../default.htm">&lt;set&gt;</a></li>
<li><a href="../default.htm">set</a></li>
<li class="here">insert</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="../default.htm">set</a>::insert</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>single element (1)</th><td><pre>pair&lt;iterator,bool&gt; insert (const value_type&amp; val);</pre></td></tr><tr class="even"><th>with hint (2)</th><td><pre>iterator insert (iterator position, const value_type&amp; val);</pre></td></tr><tr class="odd"><th>range (3)</th><td><pre>template &lt;class InputIterator&gt;  void insert (InputIterator first, InputIterator last);</pre></td></tr></table></div>
<div title="C++11" class="off">
<table><tr class="even"><th>single element (1)</th><td><pre>pair&lt;iterator,bool&gt; insert (const value_type&amp; val);pair&lt;iterator,bool&gt; insert (value_type&amp;&amp; val);</pre></td></tr><tr class="odd"><th>with hint (2)</th><td><pre>iterator insert (const_iterator position, const value_type&amp; val);iterator insert (const_iterator position, value_type&amp;&amp; val);</pre></td></tr><tr class="even"><th>range (3)</th><td><pre>template &lt;class InputIterator&gt;  void insert (InputIterator first, InputIterator last);</pre></td></tr><tr class="odd"><th>initializer list (4)</th><td><pre>void insert (initializer_list&lt;value_type&gt; il);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Insert element</div>
<section id="description">
Extends the container by inserting new elements, effectively increasing the container <a href="../size/default.htm">size</a> by the number of elements inserted.<br>
<br>
Because elements in a <a href="../default.htm">set</a> are unique, the insertion operation checks whether each inserted element is equivalent to an element already in the container, and if so, the element is not inserted, returning an iterator to this existing element (if the function returns a value).<br>
<br>
For a similar container allowing for duplicate elements, see <a href="../../multiset/default.htm">multiset</a>.<br>
<br>
Internally, <a href="../default.htm">set</a> containers keep all their elements sorted following the criterion specified by its <a href="../key_comp/default.htm">comparison object</a>. The elements are always inserted in its respective position following this ordering.<br>
<br>
The parameters determine how many elements are inserted and to which values they are initialized:<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>val</dt>
<dd>Value to be copied (or moved) to the inserted elements.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="../default.htm">set</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
<dt>position</dt>
<dd>
Hint for the position where the element can be inserted.<br>
<div class="C_SwitchCases">
<div title="C++98">
The function optimizes its insertion time if <i>position</i> points to the element that will <b>precede</b> the inserted element.<br>
</div>
<div title="C++11">
The function optimizes its insertion time if <i>position</i> points to the element that will <b>follow</b> the inserted element (or to the <a href="../end/default.htm">end</a>, if it would be the last).<br>
</div>
</div>
Notice that this is just a hint and does not force the new element to be inserted at that position within the <a href="../default.htm">set</a> container (the elements in a <a href="../default.htm">set</a> always follow a specific order).<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are defined in <a href="../../../map/map/default.htm">map</a> as a <a href="../../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> type that point to elements.</dd>
<dt>first, last</dt>
<dd>Iterators specifying a range of elements. Copies of the elements in the range <tt>[first,last)</tt> are inserted in the container.<br>
Notice that the range includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the one pointed by <i>last</i>.<br>
The function template argument <tt>InputIterator</tt> shall be an <a href="../../../iterator/inputiterator/default.htm">input iterator</a> type that points to elements of a type from which <tt>value_type</tt> objects can be constructed.</dd>
<dt>il</dt>
<dd>An <a href="../../../initializer_list/initializer_list/default.htm">initializer_list</a> object. Copies of these elements are inserted.<br>
These objects are automatically constructed from <i>initializer list</i> declarators.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="../default.htm">set</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The single element versions (1) return a <a href="../../../utility/pair/default.htm">pair</a>, with its member <tt>pair::first</tt> set to an iterator pointing to either the newly inserted element or to the equivalent element already in the <a href="../default.htm">set</a>. The <tt>pair::second</tt> element in the <a href="../../../utility/pair/default.htm">pair</a> is set to <tt>true</tt> if a new element was inserted or <tt>false</tt> if an equivalent element already existed.<br>
<br>
The versions with a hint (2) return an iterator pointing to either the newly inserted element or to the element that already had its same value in the <a href="../default.htm">set</a>.<br>
<br>
Member type <tt>iterator</tt> is a <a href="../../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> type that points to elements.<br>
<a href="../../../utility/pair/default.htm">pair</a> is a class template declared in <a href="../../../../_5f3cutilitygt">&lt;utility&gt;</a> (see <a href="../../../utility/pair/default.htm">pair</a>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br></code></pre></td>
<td class="source"><pre><code><cite>// set::insert (C++98)</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>int</var> main ()
{
  std::set&lt;<var>int</var>&gt; myset;
  std::set&lt;<var>int</var>&gt;::iterator it;
  std::pair&lt;std::set&lt;<var>int</var>&gt;::iterator,<var>bool</var>&gt; ret;

  <cite>// set some initial values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;=5; ++i) myset.insert(i*10);    <cite>// set: 10 20 30 40 50</cite>

  ret = myset.insert(20);               <cite>// no new element inserted</cite>

  <var>if</var> (ret.second==<var>false</var>) it=ret.first;  <cite>// "it" now points to element 20</cite>

  myset.insert (it,25);                 <cite>// max efficiency inserting</cite>
  myset.insert (it,24);                 <cite>// max efficiency inserting</cite>
  myset.insert (it,26);                 <cite>// no max efficiency inserting</cite>

  <var>int</var> myints[]= {5,10,15};              <cite>// 10 already in set, not inserted</cite>
  myset.insert (myints,myints+3);

  std::cout &lt;&lt; <kbd>"myset contains:"</kbd>;
  <var>for</var> (it=myset.begin(); it!=myset.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myset contains: 5 10 15 20 24 25 26 30 40 50
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
If a single element is inserted, logarithmic in <a href="../size/default.htm">size</a> in general, but amortized constant if a hint is given and the <i>position</i> given is the optimal.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
If N elements are inserted, <tt>Nlog(<a href="../size/default.htm">size</a>+N)</tt> in general, but linear in <tt><a href="../size/default.htm">size</a>+N</tt> if the elements are already sorted according to the same ordering criterion used by the container.<br>
</div>
<div title="C++11">
If N elements are inserted, <tt>Nlog(<a href="../size/default.htm">size</a>+N)</tt>.<br>
Implementations may optimize if the range is already sorted.<br>
</div>
</div>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
Concurrently accessing existing elements is safe, although iterating ranges in the container is not.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If a single element is to be inserted, there are no changes in the container in case of exception (strong guarantee).<br>
Otherwise, the container is guaranteed to end in a valid state (basic guarantee).<br>
If <a href="../../../memory/allocator_traits/construct/default.htm">allocator_traits::construct</a> is not supported with the appropriate arguments for the element constructions, or if an invalid <i>position</i> is specified, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "../erase/default.htm"><b>set::erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "../find/default.htm"><b>set::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="../../default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../iterator/default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="set_box">
<h3><b><a href="../../default.htm">&lt;set&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11 folder"><a href="../../multiset/default.htm"><span>multiset</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>set</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="set_box">
<h3><b><a href="../default.htm">set</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="../set/default.htm"><span>set::set</span></a></li>
<li class="cpp98 cpp11"><a href="../~set/default.htm"><span>set::~set</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp98 cpp11"><a href="../begin/default.htm"><span>set::begin</span></a></li>
<li class="cpp11"><a href="../cbegin/default.htm"><span>set::cbegin</span></a></li>
<li class="cpp11"><a href="../cend/default.htm"><span>set::cend</span></a></li>
<li class="cpp98 cpp11"><a href="../clear/default.htm"><span>set::clear</span></a></li>
<li class="cpp98 cpp11"><a href="../count/default.htm"><span>set::count</span></a></li>
<li class="cpp11"><a href="../crbegin/default.htm"><span>set::crbegin</span></a></li>
<li class="cpp11"><a href="../crend/default.htm"><span>set::crend</span></a></li>
<li class="cpp11"><a href="../emplace/default.htm"><span>set::emplace</span></a></li>
<li class="cpp11"><a href="../emplace_hint/default.htm"><span>set::emplace_hint</span></a></li>
<li class="cpp98 cpp11"><a href="../empty/default.htm"><span>set::empty</span></a></li>
<li class="cpp98 cpp11"><a href="../end/default.htm"><span>set::end</span></a></li>
<li class="cpp98 cpp11"><a href="../equal_range/default.htm"><span>set::equal_range</span></a></li>
<li class="cpp98 cpp11"><a href="../erase/default.htm"><span>set::erase</span></a></li>
<li class="cpp98 cpp11"><a href="../find/default.htm"><span>set::find</span></a></li>
<li class="cpp98 cpp11"><a href="../get_allocator/default.htm"><span>set::get_allocator</span></a></li>
<li class="cpp98 cpp11 selected"><a href="default.htm"><span>set::insert</span></a></li>
<li class="cpp98 cpp11"><a href="../key_comp/default.htm"><span>set::key_comp</span></a></li>
<li class="cpp98 cpp11"><a href="../lower_bound/default.htm"><span>set::lower_bound</span></a></li>
<li class="cpp98 cpp11"><a href="../max_size/default.htm"><span>set::max_size</span></a></li>
<li class="cpp98 cpp11"><a href="../operator/default.htm"><span>set::operator=</span></a></li>
<li class="cpp98 cpp11"><a href="../rbegin/default.htm"><span>set::rbegin</span></a></li>
<li class="cpp98 cpp11"><a href="../rend/default.htm"><span>set::rend</span></a></li>
<li class="cpp98 cpp11"><a href="../size/default.htm"><span>set::size</span></a></li>
<li class="cpp98 cpp11"><a href="../swap/default.htm"><span>set::swap</span></a></li>
<li class="cpp98 cpp11"><a href="../upper_bound/default.htm"><span>set::upper_bound</span></a></li>
<li class="cpp98 cpp11"><a href="../value_comp/default.htm"><span>set::value_comp</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp98 cpp11"><a href="../operators/default.htm"><span>relational operators (set)</span></a></li>
<li class="cpp98 cpp11"><a href="../swap-free/default.htm"><span>swap (set)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../../default.htm">Home page</a> | <a href="../../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../../ovr0/contact.doreferrerwww.cplusplus.com_252freference_~312.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','../../../edit.cgiasetsetinsert.htm'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../../delete.cgiasetsetinsert'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../../httpsssl/default.htm' : '../../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
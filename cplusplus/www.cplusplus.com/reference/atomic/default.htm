<!DOCTYPE html><!-- saved from url=(0053)http://www.cplusplus.com/reference/atomic/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>&lt;atomic&gt; - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Reference</a></li>
<li class="here">&lt;atomic&gt;</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">header</div>
<h1>&lt;atomic&gt;<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div id="I_description">Atomic</div>
<section id="description">
Atomic types are types that encapsulate a value whose access is guaranteed to not cause data races and can be used to synchronize memory accesses among different threads.<br>
<br>
This header declares two C++ classes, <samp><a href="atomic/default.htm">atomic</a></samp> and <samp><a href="atomic_flag/default.htm">atomic_flag</a></samp>, that implement all the features of atomic types in self-contained classes. The header also declares an entire set of <i>C-style</i> types and functions compatible with the atomic support in C.<br>
</section>
<br>
<section id="classes">
<h3>Classes</h3>
<dl class="links"><dt><a href= "atomic/default.htm"><b>atomic</b></a></dt><dd>Atomic <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "atomic_flag/default.htm"><b>atomic_flag</b></a></dt><dd>Atomic flag <span class="typ">(class)</span></dd></dl>
</section>
<br>
<section id="types">
<h3>Types</h3>
<dl class="links"><dt><a href= "memory_order/default.htm"><b>memory_order</b></a></dt><dd>Memory order <span class="typ">(enum)</span></dd></dl>
<br>
<h4>C-style atomic types</h4>
The following <i>atomic types</i> are also defined in this header; each with the same behavior as the respective instantiation of <samp><a href="atomic/default.htm">atomic</a></samp> for the listed <i>contained type</i>.<br>
<table class="boxed"><tr><th>contained type</th><th>atomic type</th><th>description</th></tr>
<tr><td><code>bool</code></td><td><samp>atomic_bool</samp></td><td></td></tr>
<tr><td><code>char</code></td><td><samp>atomic_char</samp></td><td rowspan="14">atomics for <i><a href="../type_traits/is_fundamental/default.htm">fundamental integral types</a></i>.<br>
These are either typedefs of the corresponding full specialization of the <samp><a href="atomic/default.htm">atomic</a></samp> class template or a base class of such specialization.<br>
</td></tr>
<tr><td><code>signed char</code></td><td><samp>atomic_schar</samp></td></tr>
<tr><td><code>unsigned char</code></td><td><samp>atomic_uchar</samp></td></tr>
<tr><td><code>short</code></td><td><samp>atomic_short</samp></td></tr>
<tr><td><code>unsigned short</code></td><td><samp>atomic_ushort</samp></td></tr>
<tr><td><code>int</code></td><td><samp>atomic_int</samp></td></tr>
<tr><td><code>unsigned int</code></td><td><samp>atomic_uint</samp></td></tr>
<tr><td><code>long</code></td><td><samp>atomic_long</samp></td></tr>
<tr><td><code>unsigned long</code></td><td><samp>atomic_ulong</samp></td></tr>
<tr><td><code>long long</code></td><td><samp>atomic_llong</samp></td></tr>
<tr><td><code>unsigned long long</code></td><td><samp>atomic_ullong</samp></td><tr><td><code>wchar_t</code></td><td><samp>atomic_wchar_t</samp></td></tr>
<tr><td><code>char16_t</code></td><td><samp>atomic_char16_t</samp></td></tr>
<tr><td><code>char32_t</code></td><td><samp>atomic_char32_t</samp></td></tr>
<tr><td><samp>intmax_t</samp></td><td><samp>atomic_intmax_t</samp></td><td rowspan="14">atomics for <i><a href="../cinttypes/default.htm">width-based integrals</a></i> (those defined in <samp><a href="../../_5f3ccinttypesgt">&lt;cinttypes&gt;</a></samp>).<br>
Each of these is either an alias of one of the above <i>atomics for fundamental integral types</i> or of a full specialization of the <samp><a href="atomic/default.htm">atomic</a></samp> class template with an <i>extended integral type</i>.<br>
<br>
Where <i>N</i> is one in 8, 16, 32, 64, or any other type width supported by the library.</td></tr>
<tr><td><samp>uintmax_t</samp></td><td><samp>atomic_uintmax_t</samp></td></tr>
<tr><td><code>int_least</code><i>N</i><code>_t</code></td><td><code>atomic_int_least</code><i>N</i><code>_t</code></td></tr>
<tr><td><code>uint_least</code><i>N</i><code>_t</code></td><td><code>atomic_uint_least</code><i>N</i><code>_t</code></td></tr>
<tr><td><code>int_fast</code><i>N</i><code>_t</code></td><td><code>atomic_int_fast</code><i>N</i><code>_t</code></td></tr>
<tr><td><code>uint_fast</code><i>N</i><code>_t</code></td><td><code>atomic_uint_fast</code><i>N</i><code>_t</code></td></tr>
<tr><td><samp>intptr_t</samp></td><td><samp>atomic_intptr_t</samp></td></tr>
<tr><td><samp>uintptr_t</samp></td><td><samp>atomic_uintptr_t</samp></td></tr>
<tr><td><samp>size_t</samp></td><td><samp>atomic_size_t</samp></td></tr>
<tr><td><samp>ptrdiff_t</samp></td><td><samp>atomic_ptrdiff_t</samp></td></tr>
</table>
</section>
<br>
<section id="functions">
<h3>Functions</h3>
<dl class="links"><dt><a href= "kill_dependency/default.htm"><b>kill_dependency</b></a></dt><dd>Kill dependency <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_thread_fence/default.htm"><b>atomic_thread_fence</b></a></dt><dd>Thread fence <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_signal_fence/default.htm"><b>atomic_signal_fence</b></a></dt><dd>Signal fence <span class="typ">(function)</span></dd></dl>
<br>
<h4>Functions for atomic objects (C-style)</h4>
<dl class="links"><dt><a href= "atomic_is_lock_free/default.htm"><b>atomic_is_lock_free</b></a></dt><dd>Is lock-free <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_init/default.htm"><b>atomic_init</b></a></dt><dd>Initialize atomic object <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_store/default.htm"><b>atomic_store</b></a></dt><dd>Modify contained value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_store_explicit/default.htm"><b>atomic_store_explicit</b></a></dt><dd>Modify contained value (explicit memory order) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_load/default.htm"><b>atomic_load</b></a></dt><dd>Read contained value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_load_explicit/default.htm"><b>atomic_load_explicit</b></a></dt><dd>Read contained value (explicit memory order) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_exchange/default.htm"><b>atomic_exchange</b></a></dt><dd>Read and modify contained value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_exchange_explicit/default.htm"><b>atomic_exchange_explicit</b></a></dt><dd>Read  and modify contained value (explicit memory order) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_compare_exchange_weak/default.htm"><b>atomic_compare_exchange_weak</b></a></dt><dd>Compare and exchange contained value (weak) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_compare_exchange_weak_explicit/default.htm"><b>atomic_compare_exchange_weak_explicit</b></a></dt><dd>Compare and exchange contained value (weak, explicit) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_compare_exchange_strong/default.htm"><b>atomic_compare_exchange_strong</b></a></dt><dd>Compare and exchange contained value (strong) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_compare_exchange_strong_explicit/default.htm"><b>atomic_compare_exchange_strong_explicit</b></a></dt><dd>Compare and exchange contained value (strong, explicit) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_add/default.htm"><b>atomic_fetch_add</b></a></dt><dd>Add to contained value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_add_explicit/default.htm"><b>atomic_fetch_add_explicit</b></a></dt><dd>Add to contained value (explicit memory order) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_sub/default.htm"><b>atomic_fetch_sub</b></a></dt><dd>Subtract from contained value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_sub_explicit/default.htm"><b>atomic_fetch_sub_explicit</b></a></dt><dd>Subtract from contained value (explicit memory order) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_and/default.htm"><b>atomic_fetch_and</b></a></dt><dd>Apply bitwise AND to contained value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_and_explicit/default.htm"><b>atomic_fetch_and_explicit</b></a></dt><dd>Apply bitwise AND to contained value (explicit memory order) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_or/default.htm"><b>atomic_fetch_or</b></a></dt><dd>Apply bitwise OR to contained value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_or_explicit/default.htm"><b>atomic_fetch_or_explicit</b></a></dt><dd>Apply bitwise OR to contained value (explicit memory order) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_xor/default.htm"><b>atomic_fetch_xor</b></a></dt><dd>Apply bitwise XOR to contained value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_fetch_xor_explicit/default.htm"><b>atomic_fetch_xor_explicit</b></a></dt><dd>Apply bitwise XOR to contained value (explicit memory order) <span class="typ">(function)</span></dd></dl>
<br>
<h4>Functions for atomic flags (C-style)</h4>
<dl class="links"><dt><a href= "atomic_flag_test_and_set/default.htm"><b>atomic_flag_test_and_set</b></a></dt><dd>Test and set atomic flag <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_flag_test_and_set_explicit/default.htm"><b>atomic_flag_test_and_set_explicit</b></a></dt><dd>Test and set atomic flag (explicit memory order) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_flag_clear/default.htm"><b>atomic_flag_clear</b></a></dt><dd>Clear atomic flag <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "atomic_flag_clear_explicit/default.htm"><b>atomic_flag_clear_explicit</b></a></dt><dd>Clear atomic flag (explicit memory order) <span class="typ">(function)</span></dd></dl>
</section>
<br>
<section id="macros">
<h3>Macro functions</h3>
<dl class="links"><dt><a href= "atomic_var_init/default.htm"><b>ATOMIC_VAR_INIT</b></a></dt><dd>Initialization of atomic variable <span class="typ">(macro)</span></dd></dl><dl class="links"><dt><a href= "atomic_flag_init/default.htm"><b>ATOMIC_FLAG_INIT</b></a></dt><dd>Initialization of atomic flag <span class="typ">(macro)</span></dd></dl>
</section>
<br>
<section id="constants">
<h3>Macro constants</h3>
<table class="boxed"><tr><th>macro</th><th>relative to types</th><th>defined as</th></tr>
<tr><td><samp>ATOMIC_BOOL_LOCK_FREE</samp></td><td><code>bool</code></td><td rowspan="10"><code>0</code> if the types are never lock-free.<br>
<code>1</code> it the types are sometimes lock-free.<br>
<code>2</code> if the types are always lock-free.<br>
<br>
Consistent with the value returned by <samp><a href="atomic/is_lock_free/default.htm">atomic::is_lock_free</a></samp>.<br>
</td></tr>
<tr><td><samp>ATOMIC_CHAR_LOCK_FREE</samp></td><td><code>char</code> <br>
<code>signed char</code> <br>
<code>unsigned char</code></td></tr>
<tr><td><samp>ATOMIC_SHORT_LOCK_FREE</samp></td><td><code>short</code> <br>
<code>unsigned short</code></td></tr>
<tr><td><samp>ATOMIC_INT_LOCK_FREE</samp></td><td><code>int</code> <br>
<code>unsigned int</code></td></tr>
<tr><td><samp>ATOMIC_LONG_LOCK_FREE</samp></td><td><code>long</code> <br>
<code>unsigned long</code></td></tr>
<tr><td><samp>ATOMIC_LLONG_LOCK_FREE</samp></td><td><code>long long</code> <br>
<code>unsigned long long</code></td></tr>
<tr><td><samp>ATOMIC_WCHAR_T_LOCK_FREE</samp></td><td><code>wchar_t</code></td></tr>
<tr><td><samp>ATOMIC_CHAR16_T_LOCK_FREE</samp></td><td><code>char16_t</code></td></tr>
<tr><td><samp>ATOMIC_CHAR32_T_LOCK_FREE</samp></td><td><code>char32_t</code></td></tr>
<tr><td><samp>ATOMIC_POINTER_LOCK_FREE</samp></td><td><code>U*</code> <br>
<i>(for any type <samp>U</samp>)</i></td></tr>
</table>
</section>
</div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 selected folder"><a href="default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../iterator/default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="atomic_box">
<h3><b><a href="default.htm">&lt;atomic&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>classes:</h4><ul>
<li class="cpp11 folder"><a href="atomic/default.htm"><span>atomic</span></a></li>
<li class="cpp11 folder"><a href="atomic_flag/default.htm"><span>atomic_flag</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>enum types:</h4><ul>
<li class="cpp11"><a href="memory_order/default.htm"><span>memory_order</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp11"><a href="atomic_signal_fence/default.htm"><span>atomic_signal_fence</span></a></li>
<li class="cpp11"><a href="atomic_thread_fence/default.htm"><span>atomic_thread_fence</span></a></li>
<li class="cpp11"><a href="kill_dependency/default.htm"><span>kill_dependency</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>initialization macros:</h4><ul>
<li class="cpp11"><a href="atomic_flag_init/default.htm"><span>ATOMIC_FLAG_INIT</span></a></li>
<li class="cpp11"><a href="atomic_var_init/default.htm"><span>ATOMIC_VAR_INIT</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions (C-style atomics):</h4><ul>
<li class="cpp11"><a href="atomic_compare_exchange_strong/default.htm"><span>atomic_compare_exchange_strong</span></a></li>
<li class="cpp11"><a href="atomic_compare_exchange_strong_explicit/default.htm"><span>atomic_compare_exchange_strong_explicit</span></a></li>
<li class="cpp11"><a href="atomic_compare_exchange_weak/default.htm"><span>atomic_compare_exchange_weak</span></a></li>
<li class="cpp11"><a href="atomic_compare_exchange_weak_explicit/default.htm"><span>atomic_compare_exchange_weak_explicit</span></a></li>
<li class="cpp11"><a href="atomic_exchange/default.htm"><span>atomic_exchange</span></a></li>
<li class="cpp11"><a href="atomic_exchange_explicit/default.htm"><span>atomic_exchange_explicit</span></a></li>
<li class="cpp11"><a href="atomic_fetch_add/default.htm"><span>atomic_fetch_add</span></a></li>
<li class="cpp11"><a href="atomic_fetch_add_explicit/default.htm"><span>atomic_fetch_add_explicit</span></a></li>
<li class="cpp11"><a href="atomic_fetch_and/default.htm"><span>atomic_fetch_and</span></a></li>
<li class="cpp11"><a href="atomic_fetch_and_explicit/default.htm"><span>atomic_fetch_and_explicit</span></a></li>
<li class="cpp11"><a href="atomic_fetch_or/default.htm"><span>atomic_fetch_or</span></a></li>
<li class="cpp11"><a href="atomic_fetch_or_explicit/default.htm"><span>atomic_fetch_or_explicit</span></a></li>
<li class="cpp11"><a href="atomic_fetch_sub/default.htm"><span>atomic_fetch_sub</span></a></li>
<li class="cpp11"><a href="atomic_fetch_sub_explicit/default.htm"><span>atomic_fetch_sub_explicit</span></a></li>
<li class="cpp11"><a href="atomic_fetch_xor/default.htm"><span>atomic_fetch_xor</span></a></li>
<li class="cpp11"><a href="atomic_fetch_xor_explicit/default.htm"><span>atomic_fetch_xor_explicit</span></a></li>
<li class="cpp11"><a href="atomic_flag_clear/default.htm"><span>atomic_flag_clear</span></a></li>
<li class="cpp11"><a href="atomic_flag_clear_explicit/default.htm"><span>atomic_flag_clear_explicit</span></a></li>
<li class="cpp11"><a href="atomic_flag_test_and_set/default.htm"><span>atomic_flag_test_and_set</span></a></li>
<li class="cpp11"><a href="atomic_flag_test_and_set_explicit/default.htm"><span>atomic_flag_test_and_set_explicit</span></a></li>
<li class="cpp11"><a href="atomic_init/default.htm"><span>atomic_init</span></a></li>
<li class="cpp11"><a href="atomic_is_lock_free/default.htm"><span>atomic_is_lock_free</span></a></li>
<li class="cpp11"><a href="atomic_load/default.htm"><span>atomic_load</span></a></li>
<li class="cpp11"><a href="atomic_load_explicit/default.htm"><span>atomic_load_explicit</span></a></li>
<li class="cpp11"><a href="atomic_store/default.htm"><span>atomic_store</span></a></li>
<li class="cpp11"><a href="atomic_store_explicit/default.htm"><span>atomic_store_explicit</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../contact.doreferrerwww.cplusplus.com_252freference_2~12.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','../new.cgiaatomic.htm'));
			el.appendChild(btn('Edit Page','Edit Page','edit','../edit.cgiaatomic.htm'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaatomic'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
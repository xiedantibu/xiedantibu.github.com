<!DOCTYPE html><!-- saved from url=(0075)http://www.cplusplus.com/reference/iterator/istreambuf_iterator/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>istreambuf_iterator - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Reference</a></li>
<li><a href="../default.htm">&lt;iterator&gt;</a></li>
<li class="here">istreambuf_iterator</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;iterator&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>istreambuf_iterator</h1>
<div class="C_prototype"><pre>template &lt;class charT, class traits=char_traits&lt;charT&gt; &gt;  class istreambuf_iterator;</pre></div><div id="I_description">Input stream buffer iterator</div>
<section id="description">
<div class="hierarchy">
<ul>
<li><b><a href="../../../iterator">iterator</a></b></li>
<li><b>istreambuf_iterator</b></li>
</ul>
</div>
<br>
Istreambuf iterators are <a href="../inputiterator/default.htm">input iterators</a> that read successive elements from a <i><a href="../../streambuf/basic_streambuf/default.htm">stream buffer</a></i>.<br>
<br>
They are constructed from a <samp><a href="../../streambuf/basic_streambuf/default.htm">basic_streambuf</a></samp> object open for reading, to which they become associated.<br>
<br>
This kind of iterator has a special state as an <i>end-of-stream</i> iterator, which is acquired when the end of the stream is reached, and is also the resulting value of a default-constructed object: This value can be used as the end of a range in any function accepting iterator ranges to indicate that the range includes all the elements up to the end of the input buffer.<br>
<br>
It is defined with a behavior similar to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> charT=<var>char</var>, <var>class</var> traits=char_traits&lt;charT&gt; &gt;
  <var>class</var> istreambuf_iterator :
    <var>public</var> iterator&lt;input_iterator_tag, charT,
                    <var>typename</var> traits::off_type, charT*, charT&amp;&gt;
{
<var>public</var>:
  <var>typedef</var> charT char_type;
  <var>typedef</var> traits traits_type;
  <var>typedef</var> <var>typename</var> traits::int_type int_type;
  <var>typedef</var> basic_streambuf&lt;charT,traits&gt; streambuf_type;
  <var>typedef</var> basic_istream&lt;charT,traits&gt; istream_type;

  <var>class</var> proxy {
    charT keep_; streambuf_type* sbuf_;
  <var>public</var>:
    proxy (charT c, streambuf_type* sbuf) : keep_(c), sbuf_(sbuf) { }
    charT <var>operator</var>*() {<var>return</var> keep_;}
  };

  istreambuf_iterator() <var>throw</var>() : sbuf_(0) { }
  istreambuf_iterator(istream_type&amp; s) <var>throw</var>(): sbuf_(s.rdbuf()) { }
  istreambuf_iterator(streambuf_type* s) <var>throw</var>(): sbuf_(s) { }
  istreambuf_iterator(<var>const</var> proxy&amp; p) <var>throw</var>(): sbuf_(p.sbuf_) { }

  charT <var>operator</var>*() <var>const</var> { <var>return</var> sbuf_-&gt;sgetc(); }
  istreambuf_iterator&lt;charT,traits&gt;&amp; <var>operator</var>++() { sbuf_-&gt;sbumpc(); <var>return</var> *<var>this</var>; }
  proxy <var>operator</var>++(<var>int</var>) {<var>return</var> proxy(sbuf_-&gt;sbumpc(),sbuf_);}

  <var>bool</var> equal (istreambuf_iterator&amp; b) <var>const</var> {
    <var>if</var> ( sbuf_==0 || *(*<var>this</var>)==traits::eof() ) 
    { <var>if</var> ( b.sbuf_==0 || *b==traits::eof() ) <var>return</var> <var>true</var>; }
    <var>else</var> <var>if</var> ( b.sbuf_!=0 &amp;&amp; *b!= traits::eof() ) <var>return</var> <var>true</var>;
    <var>return</var> <var>false</var>;
  }

<var>private</var>:
  streambuf_type* sbuf_;
  
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Header <code><a href="../../../_5f3citeratorgt">&lt;iterator&gt;</a></code> defines the comparison with <code>operator==</code> and <code>operator!=</code>): Two <samp>istreambuf_iterators</samp> compare equal if both are <i>end-of-stream</i> iterators or neither is, regardless of the <i>streambuf</i> object they use.<br>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>charT</dt>
<dd>Character type. This is the first template parameter in the <samp><a href="../../streambuf/basic_streambuf/default.htm">basic_streambuf</a></samp> object.</dd>
<dt>traits</dt>
<dd><a href="../../string/char_traits/default.htm">Character traits</a>. This is the second template parameter in <samp><a href="../../streambuf/basic_streambuf/default.htm">basic_streambuf</a></samp> object.</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th>member</th><th>definition in <samp>istreambuf_iterator</samp></th><th>description</th></tr>
<tr><td><samp>streambuf_type</samp></td><td><samp><a href="../../streambuf/basic_streambuf/default.htm">basic_streambuf</a>&lt;charT,traits&gt;</samp></td><td><samp>Type of the associated <samp><a href="../../streambuf/basic_streambuf/default.htm">basic_streambuf</a></samp> object</td></tr>
<tr><td><samp>istream_type</samp></td><td><samp><a href="../../istream/basic_istream/default.htm">basic_istream</a>&lt;charT,traits&gt;</samp></td><td></td></tr>
<tr><td><samp>iterator_category</samp></td><td><samp><a href="../../../input_iterator_tag">input_iterator_tag</a></samp></td><td><a href="../inputiterator/default.htm">Input iterator</a></td></tr>
<tr><td><samp>value_type</samp></td><td><samp>T</samp></td><td>Type of the elements pointed by the iterator</td></tr>
<tr><td><samp>char_type</samp></td><td><samp>charT</samp></td><td>Type of the characters handled by the associated stream buffer</td></tr>
<tr><td><samp>traits_type</samp></td><td><samp>traits</samp></td><td><a href="../../string/char_traits/default.htm">Character traits</a> for associated stream buffer</td></tr>
<tr><td><samp>int_type</samp></td><td><code><a href="../../../char_traits_3a_3aint_type">traits::int_type</a></code></td><td>Int type to represent character values or <i>end-of-file</i></td></tr>
<tr><td><samp>difference_type</samp></td><td><code><a href="../../../char_traits_3a_3aoff_type">traits::off_type</a></code></td><td></td></tr>
<tr><td><samp>pointer</samp></td><td><code>charT*</code></td><td></td></tr>
<tr><td><samp>reference</samp></td><td><code>charT&</code></td><td></td></tr>
</table>
</div>
<div title="C++11">
<table class="boxed">
<tr><th>member</th><th>definition in <samp>istreambuf_iterator</samp></th><th>description</th></tr>
<tr><td><samp>streambuf_type</samp></td><td><samp><a href="../../streambuf/basic_streambuf/default.htm">basic_streambuf</a>&lt;charT,traits&gt;</samp></td><td><samp>Type of the associated <samp><a href="../../streambuf/basic_streambuf/default.htm">basic_streambuf</a></samp> object</td></tr>
<tr><td><samp>istream_type</samp></td><td><samp><a href="../../istream/basic_istream/default.htm">basic_istream</a>&lt;charT,traits&gt;</samp></td><td></td></tr>
<tr><td><samp>iterator_category</samp></td><td><samp><a href="../../../input_iterator_tag">input_iterator_tag</a></samp></td><td><a href="../inputiterator/default.htm">Input iterator</a></td></tr>
<tr><td><samp>value_type</samp></td><td><samp>T</samp></td><td>Type of the elements pointed by the iterator</td></tr>
<tr><td><samp>char_type</samp></td><td><samp>charT</samp></td><td>Type of the characters handled by the associated stream buffer</td></tr>
<tr><td><samp>traits_type</samp></td><td><samp>traits</samp></td><td><a href="../../string/char_traits/default.htm">Character traits</a> for associated stream buffer</td></tr>
<tr><td><samp>int_type</samp></td><td><code><a href="../../../char_traits_3a_3aint_type">traits::int_type</a></code></td><td>Int type to represent character values or <i>end-of-file</i></td></tr>
<tr><td><samp>difference_type</samp></td><td><code><a href="../../../char_traits_3a_3aoff_type">traits::off_type</a></code></td><td></td></tr>
<tr><td><samp>pointer</samp></td><td><i>unspecified</i></td><td></td></tr>
<tr><td><samp>reference</samp></td><td><samp>charT</samp></td><td></td></tr>
</table>
</div>
</div>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl>
<dt>constructor</dt>
<dd><samp><a href="../../../istreambuf_iterator">istreambuf_iterator</a></samp> objects are constructed from either a <samp><a href="../../streambuf/basic_streambuf/default.htm">basic_streambuf</a></samp> object or a <samp><a href="../../istream/basic_istream/default.htm">basic_istream</a></samp> object.<br>
The default constructor constructs an <i>end-of-stream</i> iterator and the copy constructor constructs a copy of the iterator passed as argument.</dd>
<dt><code>operator*</code></dt>
<dd>Returns the current value in the stream buffer.</dd>
<dt><code>operator++</code></dt>
<dd>Advances the position of the <samp><a href="../../streambuf/basic_streambuf/default.htm">basic_streambuf</a></samp> object by one element.</dd>
<dt><code>proxy</code></dt>
<dd>Temporary type returned by the post-increment operator (which can be implicitly converted to the class type). A member class is just one of the possible ways to preserve a <samp><a href="../../../streambuf_iterator">streambuf_iterator</a></samp> value. Some implementations of <samp><a href="../../../istreambuf_iterator">istreambuf_iterator</a></samp> may not have this member class if they use an alternate method.</dd>
</dl>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>// istreambuf_iterator example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cin, std::cout</cite>
<dfn>#include &lt;iterator&gt;     </dfn><cite>// std::istreambuf_iterator</cite>
<dfn>#include &lt;string&gt;       </dfn><cite>// std::string</cite>

<var>int</var> main () {
  std::istreambuf_iterator&lt;<var>char</var>&gt; eos;                    <cite>// end-of-range iterator</cite>
  std::istreambuf_iterator&lt;<var>char</var>&gt; iit (std::cin.rdbuf()); <cite>// stdin iterator</cite>
  std::string mystring;

  std::cout &lt;&lt; <kbd>"Please, enter your name: "</kbd>;

  <var>while</var> (iit!=eos &amp;&amp; *iit!=<kbd>'\n'</kbd>) mystring+=*iit++;

  std::cout &lt;&lt; <kbd>"Your name is "</kbd> &lt;&lt; mystring &lt;&lt; <kbd>".\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Please, enter your name: HAL 9000
Your name is HAL 9000.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "../ostreambuf_iterator/default.htm"><b>ostreambuf_iterator</b></a></dt><dd>Output stream buffer iterator <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "../inputiterator/default.htm"><b>input_iterator_tag</b></a></dt><dd>Input iterator category <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "../../istream/istream/default.htm"><b>istream</b></a></dt><dd>Input stream <span class="typ">(class)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="iterator_box">
<h3><b><a href="../default.htm">&lt;iterator&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="../iterator/default.htm"><span>iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../iterator_traits/default.htm"><span>iterator_traits</span></a></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp98 cpp11"><a href="../advance/default.htm"><span>advance</span></a></li>
<li class="cpp98 cpp11"><a href="../back_inserter/default.htm"><span>back_inserter</span></a></li>
<li class="cpp11"><a href="../begin/default.htm"><span>begin</span></a></li>
<li class="cpp98 cpp11"><a href="../distance/default.htm"><span>distance</span></a></li>
<li class="cpp11"><a href="../end/default.htm"><span>end</span></a></li>
<li class="cpp98 cpp11"><a href="../front_inserter/default.htm"><span>front_inserter</span></a></li>
<li class="cpp98 cpp11"><a href="../inserter/default.htm"><span>inserter</span></a></li>
<li class="cpp11"><a href="../make_move_iterator/default.htm"><span>make_move_iterator</span></a></li>
<li class="cpp11"><a href="../next/default.htm"><span>next</span></a></li>
<li class="cpp11"><a href="../prev/default.htm"><span>prev</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>iterator categories:</h4><ul>
<li class="cpp98 cpp11"><a href="../bidirectionaliterator/default.htm"><span>bidirectional_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../forwarditerator/default.htm"><span>forward_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../inputiterator/default.htm"><span>input_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../outputiterator/default.htm"><span>output_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../randomaccessiterator/default.htm"><span>random_access_iterator_tag</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>predefined iterators:</h4><ul>
<li class="cpp98 cpp11"><a href="../back_insert_iterator/default.htm"><span>back_insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../front_insert_iterator/default.htm"><span>front_insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../insert_iterator/default.htm"><span>insert_iterator</span></a></li>
<li class="cpp98 cpp11 selected"><a href="default.htm"><span>istreambuf_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../istream_iterator/default.htm"><span>istream_iterator</span></a></li>
<li class="cpp11 folder"><a href="../move_iterator/default.htm"><span>move_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../ostreambuf_iterator/default.htm"><span>ostreambuf_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../ostream_iterator/default.htm"><span>ostream_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../reverse_iterator/default.htm"><span>reverse_iterator</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~1658.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiaiteratoristreambuf_iterator'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiaiteratoristreambuf_iterator'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0069)http://www.cplusplus.com/reference/iterator/move_iterator/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>move_iterator - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Reference</a></li>
<li><a href="../default.htm">&lt;iterator&gt;</a></li>
<li class="here">move_iterator</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;iterator&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>move_iterator<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class Iterator&gt; class move_iterator;</pre></div><div id="I_description">Move iterator</div>
<section id="description">
This class adapts an iterator so that dereferencing it produces <i>rvalue references</i> (as if <samp><a href="../../utility/move/default.htm">std::move</a></samp> was applied), while all other operations behave as in the regular iterator.<br>
<br>
This <i>iterator adaptor</i> keeps an internal copy of an iterator (known as its <i><a href="../../../move_iterator_3a_3abase">base iterator</a></i>) on which all operations are reflected. A copy of the <i>base iterator</i> with the current state can be obtained at any time by calling member <samp><a href="../../../move_iterator_3a_3abase">base</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>Iterator</dt>
<dd>An <i><a href="../inputiterator/default.htm">input iterator</a></i> type.<br>
The use of certain of its members may require the iterator category to be <i><a href="../bidirectionaliterator/default.htm">bidirectional</a></i> or <i><a href="../randomaccessiterator/default.htm">random-access</a></i>.<br>
</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
<table class="boxed">
<tr><th>member</th><th>definition in <samp>move_iterator</samp></th><th>description</th></tr>
<tr><td><samp>iterator_type</samp></td><td><samp>Iterator</samp></td><td><samp>Iterator</samp>'s type</td></tr>
<tr><td><samp>iterator_category</samp></td><td><code>iterator_traits&lt;Iterator&gt;::iterator_category</code></td><td>Preserves <samp>Iterator</samp>'s category</td></tr>
<tr><td><samp>value_type</samp></td><td><code>iterator_traits&lt;Iterator&gt;::value_type</code></td><td>Preserves <samp>Iterator</samp>'s value type</td></tr>
<tr><td><samp>difference_type</samp></td><td><code>iterator_traits&lt;Iterator&gt;::difference_type</code></td><td>Preserves <samp>Iterator</samp>'s difference type</td></tr>
<tr><td><samp>pointer</samp></td><td><samp>Iterator</samp></td><td>(same as <samp>iterator_type</samp>)</td></tr>
<tr><td><samp>reference</samp></td><td><code>value_type&&</code></td><td></td></tr>
</table>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "move_iterator/default.htm"><b>(constructor)</b></a></dt><dd>Construct move_iterator object <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "base/default.htm"><b>base</b></a></dt><dd>Return base iterator <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator_2a/default.htm"><b>operator*</b></a></dt><dd>Dereference iterator <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator/default.htm"><b>operator+</b></a></dt><dd>Addition operator <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator/default.htm"><b>operator++</b></a></dt><dd>Increment iterator position <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator/default.htm"><b>operator+=</b></a></dt><dd>Advance iterator <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator-/default.htm"><b>operator-</b></a></dt><dd>Subtraction operator <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator--/default.htm"><b>operator--</b></a></dt><dd>Decrease iterator position <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator-/default.htm"><b>operator-=</b></a></dt><dd>Decrease iterator <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator-_5f3e/default.htm"><b>operator-&gt;</b></a></dt><dd>Dereference iterator <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator/default.htm"><b>operator[]</b></a></dt><dd>Dereference iterator with offset <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Non-member function overloads</h3>
<dl class="links"><dt><a href= "operators/default.htm"><b>relational operators</b></a></dt><dd>Relational operators for move_iterator <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "operator_plus-free/default.htm"><b>operator+</b></a></dt><dd>Addition operator <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "operator_minus-free/default.htm"><b>operator-</b></a></dt><dd>Subtraction operator <span class="typ">(function template)</span></dd></dl>
<br>
<h3>Non-member helper functions</h3>
<dl class="links"><dt><a href= "../make_move_iterator/default.htm"><b>make_move_iterator</b></a></dt><dd>Construct move iterator <span class="typ">(function template)</span></dd></dl>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br></code></pre></td>
<td class="source"><pre><code><cite>// move_iterator example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;iterator&gt;     </dfn><cite>// std::move_iterator</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>
<dfn>#include &lt;string&gt;       </dfn><cite>// std::string</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::copy</cite>

<var>int</var> main () {
  std::vector&lt;std::string&gt; foo (3);
  std::vector&lt;std::string&gt; bar {<kbd>"one"</kbd>,<kbd>"two"</kbd>,<kbd>"three"</kbd>};

  <var>typedef</var> std::vector&lt;std::string&gt;::iterator Iter;

  std::copy ( std::move_iterator&lt;Iter&gt;(bar.begin()),
              std::move_iterator&lt;Iter&gt;(bar.end()),
              foo.begin() );

  <cite>// bar now contains unspecified values; clear it:</cite>
  bar.clear();

  std::cout &lt;&lt; <kbd>"foo:"</kbd>;
  <var>for</var> (std::string&amp; x : foo) std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; x;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
foo: one two three
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="implementation">
<h3>Possible implementation</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br></code></pre></td>
<td class="source"><pre><code><var>namespace</var> std {
<var>template</var> &lt;<var>class</var> Iterator&gt; <var>class</var> move_iterator {
  Iterator current;
<var>public</var>:
  <var>typedef</var> Iterator iterator_type;
  <var>typedef</var> <var>typename</var> iterator_traits&lt;Iterator&gt;::iterator_category iterator_category;
  <var>typedef</var> <var>typename</var> iterator_traits&lt;Iterator&gt;::value_type        value_type;
  <var>typedef</var> <var>typename</var> iterator_traits&lt;Iterator&gt;::difference_type   difference_type;
  <var>typedef</var> Iterator pointer
  <var>typedef</var> value_type&amp;&amp; reference;

  move_iterator() {}
  <var>explicit</var> move_iterator (Iterator it) : current(it) {}
  <var>template</var> &lt;<var>class</var> Iter&gt; move_iterator (<var>const</var> move_iterator&lt;Iter&gt;&amp; it) : current(it.current) {}
  <var>template</var> &lt;<var>class</var> Iter&gt; move_iterator&amp; <var>operator</var>= (<var>const</var> move_iterator&lt;Iter&gt;&amp; it)
  { current = it.current; }

  iterator_type base() <var>const</var> { <var>return</var> current; }
  pointer <var>operator</var>-&gt;() <var>const</var> { <var>return</var> current; }
  reference <var>operator</var>*() <var>const</var> { <var>return</var> std::move(*current); }
  move_iterator&amp; <var>operator</var>++() { ++current; <var>return</var> *<var>this</var>; }
  move_iterator&amp; <var>operator</var>--() { --current; <var>return</var> *<var>this</var>; }
  move_iterator&amp; <var>operator</var>++(<var>int</var>) { move_iterator temp = *<var>this</var>; ++current; <var>return</var> temp; }
  move_iterator&amp; <var>operator</var>--(<var>int</var>) { move_iterator temp = *<var>this</var>; --current; <var>return</var> temp; }
  move_iterator <var>operator</var>+ (difference_type n) <var>const</var> { <var>return</var> move_iterator(current+n); }
  move_iterator <var>operator</var>- (difference_type n) <var>const</var> { <var>return</var> move_iterator(current-n); }
  move_iterator <var>operator</var>+= (difference_type n) { current+=n; <var>return</var> *<var>this</var>; }
  move_iterator <var>operator</var>-= (difference_type n) { current-=n; <var>return</var> *<var>this</var>; }
  <var>auto</var> <var>operator</var>[](difference_type n) <var>const</var> -&gt; <var>decltype</var>(std::move(current[n]))
  { <var>return</var> std::move(current[n]); }
};
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "../make_move_iterator/default.htm"><b>make_move_iterator</b></a></dt><dd>Construct move iterator <span class="typ">(function template)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="iterator_box">
<h3><b><a href="../default.htm">&lt;iterator&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="../iterator/default.htm"><span>iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../iterator_traits/default.htm"><span>iterator_traits</span></a></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp98 cpp11"><a href="../advance/default.htm"><span>advance</span></a></li>
<li class="cpp98 cpp11"><a href="../back_inserter/default.htm"><span>back_inserter</span></a></li>
<li class="cpp11"><a href="../begin/default.htm"><span>begin</span></a></li>
<li class="cpp98 cpp11"><a href="../distance/default.htm"><span>distance</span></a></li>
<li class="cpp11"><a href="../end/default.htm"><span>end</span></a></li>
<li class="cpp98 cpp11"><a href="../front_inserter/default.htm"><span>front_inserter</span></a></li>
<li class="cpp98 cpp11"><a href="../inserter/default.htm"><span>inserter</span></a></li>
<li class="cpp11"><a href="../make_move_iterator/default.htm"><span>make_move_iterator</span></a></li>
<li class="cpp11"><a href="../next/default.htm"><span>next</span></a></li>
<li class="cpp11"><a href="../prev/default.htm"><span>prev</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>iterator categories:</h4><ul>
<li class="cpp98 cpp11"><a href="../bidirectionaliterator/default.htm"><span>bidirectional_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../forwarditerator/default.htm"><span>forward_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../inputiterator/default.htm"><span>input_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../outputiterator/default.htm"><span>output_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../randomaccessiterator/default.htm"><span>random_access_iterator_tag</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>predefined iterators:</h4><ul>
<li class="cpp98 cpp11"><a href="../back_insert_iterator/default.htm"><span>back_insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../front_insert_iterator/default.htm"><span>front_insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../insert_iterator/default.htm"><span>insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../istreambuf_iterator/default.htm"><span>istreambuf_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../istream_iterator/default.htm"><span>istream_iterator</span></a></li>
<li class="cpp11 selected folder"><a href="default.htm"><span>move_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../ostreambuf_iterator/default.htm"><span>ostreambuf_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../ostream_iterator/default.htm"><span>ostream_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../reverse_iterator/default.htm"><span>reverse_iterator</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="move_iterator_box">
<h3><b><a href="default.htm">move_iterator</a></b></h3>
<ul>
<li class="cpp11"><a href="move_iterator/default.htm"><span>move_iterator::move_iterator</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="base/default.htm"><span>move_iterator::base</span></a></li>
<li class="cpp11"><a href="operator_2a/default.htm"><span>move_iterator::operator*</span></a></li>
<li class="cpp11"><a href="operator/default.htm"><span>move_iterator::operator+</span></a></li>
<li class="cpp11"><a href="operator/default.htm"><span>move_iterator::operator++</span></a></li>
<li class="cpp11"><a href="operator/default.htm"><span>move_iterator::operator+=</span></a></li>
<li class="cpp11"><a href="operator-/default.htm"><span>move_iterator::operator-</span></a></li>
<li class="cpp11"><a href="operator--/default.htm"><span>move_iterator::operator--</span></a></li>
<li class="cpp11"><a href="operator-/default.htm"><span>move_iterator::operator-=</span></a></li>
<li class="cpp11"><a href="operator-_5f3e/default.htm"><span>move_iterator::operator-&gt;</span></a></li>
<li class="cpp11"><a href="operator/default.htm"><span>move_iterator::operator=</span></a></li>
<li class="cpp11"><a href="operator/default.htm"><span>move_iterator::operator[]</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp11"><a href="operators/default.htm"><span>relational operators (move_iterator)</span></a></li>
<li class="cpp11"><a href="operator_minus-free/default.htm"><span>operator- (move_iterator)</span></a></li>
<li class="cpp11"><a href="operator_plus-free/default.htm"><span>operator+ (move_iterator)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~1663.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','../../new.cgiaiteratormove_iterator'));
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiaiteratormove_iterator'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiaiteratormove_iterator'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
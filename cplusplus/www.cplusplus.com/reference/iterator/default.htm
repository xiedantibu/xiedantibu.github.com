<!DOCTYPE html><!-- saved from url=(0055)http://www.cplusplus.com/reference/iterator/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>&lt;iterator&gt; - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../v321/main.css">
<script src="../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../default.htm">Reference</a></li>
<li class="here">&lt;iterator&gt;</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">header</div>
<h1>&lt;iterator&gt;</h1>
<div id="I_description">Iterator definitions</div>
<section id="description">
An <i>iterator</i> is any object that, pointing to some element in a range of elements (such as an array or a <a href="../stl/default.htm">container</a>), has the ability to iterate through the elements of that range using a set of operators (with at least the increment (<code>++</code>) and dereference (<code>*</code>) operators).<br>
<br>
The most obvious form of iterator is a <i>pointer</i>: A pointer can point to elements in an array, and can iterate through them using the increment operator (<code>++</code>). But other kinds of iterators are possible. For example, each <a href="../stl/default.htm">container</a> type (such as a <samp><a href="../list/list/default.htm">list</a></samp>) has a specific <i>iterator</i> type designed to iterate through its elements.<br>
<br>
Notice that while a pointer is a form of iterator, not all iterators have the same functionality of pointers; Depending on the properties supported by iterators, they are classified into five different categories:<br>
</section>
<br>
<section id="properties">
<h3>Iterator categories</h3>
Iterators are classified into five categories depending on the functionality they implement:<br>
<br>
<div class="hierarchy">
<ul>
<li><b><a href="inputiterator/default.htm">Input</a></b><b><a href="outputiterator/default.htm">Output</a></b></li>
<li><b><a href="forwarditerator/default.htm">Forward</a></b></li>
<li><b><a href="bidirectionaliterator/default.htm">Bidirectional</a></b></li>
<li><b><a href="randomaccessiterator/default.htm">Random Access</a></b></li>
</ul>
</div>
<br>
<a href="inputiterator/default.htm">Input</a> and <a href="outputiterator/default.htm">output</a> iterators are the most limited types of iterators: they can perform sequential single-pass input or output operations.<br>
<br>
<a href="forwarditerator/default.htm">Forward iterators</a> have all the functionality of <a href="inputiterator/default.htm">input iterators</a> and -if they are not <i>constant iterators</i>- also the functionality of <a href="outputiterator/default.htm">output iterators</a>, although they are limited to one direction in which to iterate through a range (forward). All <a href="../stl/default.htm">standard containers</a> support at least forward iterator types.<br>
<br>
<a href="bidirectionaliterator/default.htm">Bidirectional iterators</a> are like <a href="forwarditerator/default.htm">forward iterators</a> but can also be iterated through backwards.<br>
<br>
<a href="randomaccessiterator/default.htm">Random-access iterators</a> implement all the functionality of <a href="bidirectionaliterator/default.htm">bidirectional iterators</a>, and also have the ability to access ranges non-sequentially: distant elements can be accessed directly by applying an offset value to an iterator without iterating through all the elements in between. These iterators have a similar functionality to standard pointers (pointers are iterators of this category).<br>
<br>
The properties of each iterator category are:<br>
<br>
<table class="boxed">
<tr><th colspan="4">category</th><th>properties</th><th>valid expressions</th></tr>
<tr><td colspan="4" rowspan="2">all categories</td><td><i><a href="../type_traits/is_copy_constructible/default.htm">copy-constructible</a></i>, <i><a href="../type_traits/is_copy_assignable/default.htm">copy-assignable</a> and <i><a href="../type_traits/is_destructible/default.htm">destructible</a></i></td><td><code>X b(a);<br>
b = a;</code></td></tr>
<tr><td>Can be incremented</td><td><code>++a<br>
a++</code></td></tr>
<tr><td rowspan="10"><a href="randomaccessiterator/default.htm">Random Access</a></td><td rowspan="6"><a href="bidirectionaliterator/default.htm">Bidirectional</a></td><td rowspan="5"><a href="forwarditerator/default.htm">Forward</a></td><td rowspan="2"><a href="inputiterator/default.htm">Input</a></td><td>Supports equality/inequality comparisons</td><td><code>a == b<br>
a != b</code></td></tr>
<tr><td>Can be dereferenced as an <i>rvalue</i></td><td><tt>*a<br>
a-&gt;m</tt></td></tr>
<tr><td><a href="outputiterator/default.htm">Output</a></td><td>Can be dereferenced as an <i>lvalue</i> <br>
(only for <i>mutable iterator types</i>)</td><td><tt>*a = t<br>
*a++ = t</tt></td></tr>
<tr><td rowspan="2"></td><td><i><a href="../type_traits/is_default_constructible/default.htm">default-constructible</a></i></td><td><tt>X a;<br>
X()</tt></td></tr>
<tr><td>Multi-pass: neither dereferencing nor incrementing affects dereferenceability</td><td><code>{ b=a; *a++; *b; }</code> </td></tr>
<tr><td colspan="2"></td><td>Can be decremented</td><td><tt>--a<br>
a--<br>
*a--</tt></td></tr>
<tr><td colspan="3" rowspan="4"></td><td>Supports arithmetic operators <tt>+</tt> and <tt>-</tt></td><td><tt>a + n<br>
n + a<br>
a - n<br>
a - b</tt></td></tr>
<tr><td>Supports inequality comparisons (<tt>&lt;</tt>, <tt>&gt;</tt>, <tt>&lt;=</tt> and <tt>&gt;=</tt>) between iterators</td><td><tt>a &lt; b<br>
a &gt; b<br>
a &lt;= b<br>
a &gt;= b</tt></td></tr>
<tr><td>Supports compound assignment operations <tt>+=</tt> and <tt>-=</tt></td><td><tt>a += n<br>
a -= n</tt></td></tr>
<tr><td>Supports offset dereference operator (<tt>[]</tt>)</td><td><tt>a[n]</tt></td></tr>
</table>
<br>
Where <tt>X</tt> is an iterator type, <tt>a</tt> and <tt>b</tt> are objects of this iterator type, <tt>t</tt> is an object of the type pointed by the iterator type, and <tt>n</tt> is an integer value.<br>
<br>
For more details, see the references for <a href="inputiterator/default.htm">input iterator</a>, <a href="outputiterator/default.htm">output iterator</a>, <a href="forwarditerator/default.htm">forward iterator</a>, <a href="bidirectionaliterator/default.htm">bidirectional iterator</a> and <a href="randomaccessiterator/default.htm">random-access iterator</a>.<br>
</section>
<br>
<section id="functions">
<h3>Functions</h3>
<b>Iterator operations</b>:<br>
<dl class="links"><dt><a href= "advance/default.htm"><b>advance</b></a></dt><dd>Advance iterator <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "distance/default.htm"><b>distance</b></a></dt><dd>Return distance between iterators <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "begin/default.htm"><b>begin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Iterator to beginning <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "end/default.htm"><b>end <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Iterator to end <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "prev/default.htm"><b>prev <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Get iterator to previous element <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "next/default.htm"><b>next <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Get iterator to next element <span class="typ">(function template)</span></dd></dl>
<br>
<b>Iterator generators</b>:<br>
<dl class="links"><dt><a href= "back_inserter/default.htm"><b>back_inserter</b></a></dt><dd>Construct back insert iterator <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "front_inserter/default.htm"><b>front_inserter</b></a></dt><dd>Constructs front insert iterator <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "inserter/default.htm"><b>inserter</b></a></dt><dd>Construct insert iterator <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "make_move_iterator/default.htm"><b>make_move_iterator <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct move iterator <span class="typ">(function template)</span></dd></dl>
</section>
<br>
<section id="classes">
<h3>Classes</h3>
<dl class="links"><dt><a href= "iterator/default.htm"><b>iterator</b></a></dt><dd>Iterator base class <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "iterator_traits/default.htm"><b>iterator_traits</b></a></dt><dd>Iterator traits <span class="typ">(class template)</span></dd></dl>
<br>
<h4>Predefined iterators</h4>
<dl class="links"><dt><a href= "reverse_iterator/default.htm"><b>reverse_iterator</b></a></dt><dd>Reverse iterator <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "move_iterator/default.htm"><b>move_iterator <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Move iterator <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "back_insert_iterator/default.htm"><b>back_insert_iterator</b></a></dt><dd>Back insert iterator <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "front_insert_iterator/default.htm"><b>front_insert_iterator</b></a></dt><dd>Front insert iterator <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "insert_iterator/default.htm"><b>insert_iterator</b></a></dt><dd>Insert iterator <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "istream_iterator/default.htm"><b>istream_iterator</b></a></dt><dd>Istream iterator <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "ostream_iterator/default.htm"><b>ostream_iterator</b></a></dt><dd>Ostream iterator <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "istreambuf_iterator/default.htm"><b>istreambuf_iterator</b></a></dt><dd>Input stream buffer iterator <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "ostreambuf_iterator/default.htm"><b>ostreambuf_iterator</b></a></dt><dd>Output stream buffer iterator <span class="typ">(class template)</span></dd></dl>
<br>
<h4>Category tags</h4>
<dl class="links"><dt><a href= "inputiterator/default.htm"><b>input_iterator_tag</b></a></dt><dd>Input iterator category <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "outputiterator/default.htm"><b>output_iterator_tag</b></a></dt><dd>Output iterator category <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "forwarditerator/default.htm"><b>forward_iterator_tag</b></a></dt><dd>Forward iterator category <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "bidirectionaliterator/default.htm"><b>bidirectional_iterator_tag</b></a></dt><dd>Bidirectional iterator category <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "randomaccessiterator/default.htm"><b>random_access_iterator_tag</b></a></dt><dd>Random-access iterator category <span class="typ">(class)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="iterator_box">
<h3><b><a href="default.htm">&lt;iterator&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="iterator/default.htm"><span>iterator</span></a></li>
<li class="cpp98 cpp11"><a href="iterator_traits/default.htm"><span>iterator_traits</span></a></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp98 cpp11"><a href="advance/default.htm"><span>advance</span></a></li>
<li class="cpp98 cpp11"><a href="back_inserter/default.htm"><span>back_inserter</span></a></li>
<li class="cpp11"><a href="begin/default.htm"><span>begin</span></a></li>
<li class="cpp98 cpp11"><a href="distance/default.htm"><span>distance</span></a></li>
<li class="cpp11"><a href="end/default.htm"><span>end</span></a></li>
<li class="cpp98 cpp11"><a href="front_inserter/default.htm"><span>front_inserter</span></a></li>
<li class="cpp98 cpp11"><a href="inserter/default.htm"><span>inserter</span></a></li>
<li class="cpp11"><a href="make_move_iterator/default.htm"><span>make_move_iterator</span></a></li>
<li class="cpp11"><a href="next/default.htm"><span>next</span></a></li>
<li class="cpp11"><a href="prev/default.htm"><span>prev</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>iterator categories:</h4><ul>
<li class="cpp98 cpp11"><a href="bidirectionaliterator/default.htm"><span>bidirectional_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="forwarditerator/default.htm"><span>forward_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="inputiterator/default.htm"><span>input_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="outputiterator/default.htm"><span>output_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="randomaccessiterator/default.htm"><span>random_access_iterator_tag</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>predefined iterators:</h4><ul>
<li class="cpp98 cpp11"><a href="back_insert_iterator/default.htm"><span>back_insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="front_insert_iterator/default.htm"><span>front_insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="insert_iterator/default.htm"><span>insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="istreambuf_iterator/default.htm"><span>istreambuf_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="istream_iterator/default.htm"><span>istream_iterator</span></a></li>
<li class="cpp11 folder"><a href="move_iterator/default.htm"><span>move_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="ostreambuf_iterator/default.htm"><span>ostreambuf_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="ostream_iterator/default.htm"><span>ostream_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="reverse_iterator/default.htm"><span>reverse_iterator</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../default.htm">Home page</a> | <a href="../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../ovr0/contact.doreferrerwww.cplusplus.com_252freference_~144.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','../new.cgiaiterator.htm'));
			el.appendChild(btn('Edit Page','Edit Page','edit','../edit.cgiaiterator.htm'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../delete.cgiaiterator'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../httpsssl/default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
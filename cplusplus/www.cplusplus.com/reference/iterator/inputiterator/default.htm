<!DOCTYPE html><!-- saved from url=(0069)http://www.cplusplus.com/reference/iterator/inputiterator/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>input_iterator_tag - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Reference</a></li>
<li><a href="../default.htm">&lt;iterator&gt;</a></li>
<li class="here">input_iterator_tag</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">class</div>
<div id="I_file">&lt;iterator&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>input_iterator_tag</h1>
<div class="C_prototype"><pre>struct input_iterator_tag {};</pre></div><div id="I_description">Input iterator category</div>
<section id="description">
Empty class to identify the category of an iterator as an <i>input iterator</i>:<br>
<br>
<h3>Input iterators</h3>
<div class="hierarchy">
<ul>
<li><b>Input</b><b><a href="../outputiterator/default.htm">Output</a></b></li>
<li><b><a href="../forwarditerator/default.htm">Forward</a></b></li>
<li><b><a href="../bidirectionaliterator/default.htm">Bidirectional</a></b></li>
<li><b><a href="../randomaccessiterator/default.htm">Random Access</a></b></li>
</ul>
</div>
<br>
Input iterators are iterators that can be used in sequential input operations, where each value pointed by the iterator is read only once and then the iterator is incremented.<br>
<br>
All <i><a href="../forwarditerator/default.htm">forward</a></i>, <i><a href="../bidirectionaliterator/default.htm">bidirectional</a></i> and <i><a href="../randomaccessiterator/default.htm">random-access</a></i> iterators are also valid <i>input iterators</i>.<br>
<br>
There is not a single type of <i>input iterator</i>: Each container may define its own specific iterator type able to iterate through it and access its elements. But all <i>input iterators</i> support -at least- the following operations:<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th>property</th><th>valid expressions</th></tr>
<tr><td>Is <i><a href="../../type_traits/is_copy_constructible/default.htm">copy-constructible</a></i>, <i><a href="../../type_traits/is_copy_assignable/default.htm">copy-assignable</a> and <i><a href="../../type_traits/is_destructible/default.htm">destructible</a></i></td><td><code>X b(a);<br>
b = a;</code></td></tr>
<tr><td>Can be compared for equivalence using the equality/inequality operators<br>
(meaningful if both iterators are be <i>in domain</i>).</td><td><code>a == b<br>
a != b</code></tr>
<tr><td>Can be dereferenced <u>as an <i>rvalue</i></u> (if in a <i>dereferenceable state</i>).</td><td><code>*a<br>
a-&gt;m</code></td></tr>
<tr><td>Can be incremented (if in a <i>dereferenceable state</i>).<br>
The result is either also <i>dereferenceable</i> or a <i>past-the-end</i> iterator.<br>
The previous iterator value is not required to be <i>dereferenceable</i> after the increase.</td><td><code>++a<br>
(void)a++<br>
*a++</code></td></tr>
<tr><td>Its <i>value type</i> does not need to be assignable</td><td><code>t = u</code> <i>not required</i></td></tr>
</table>
</div>
<div title="C++11">
<table class="boxed">
<tr><th>property</th><th>valid expressions</th></tr>
<tr><td>Is <i><a href="../../type_traits/is_copy_constructible/default.htm">copy-constructible</a></i>, <i><a href="../../type_traits/is_copy_assignable/default.htm">copy-assignable</a> and <i><a href="../../type_traits/is_destructible/default.htm">destructible</a></i></td><td><code>X b(a);<br>
b = a;</code></td></tr>
<tr><td>Can be compared for equivalence using the equality/inequality operators<br>
(meaningful if both iterators are be <i>in domain</i>).</td><td><code>a == b<br>
a != b</code></tr>
<tr><td>Can be dereferenced <u>as an <i>rvalue</i></u> (if in a <i>dereferenceable state</i>).</td><td><code>*a<br>
a-&gt;m</code></td></tr>
<tr><td>Can be incremented (if in a <i>dereferenceable state</i>).<br>
The result is either also <i>dereferenceable</i> or a <i>past-the-end</i> iterator.<br>
The previous iterator value is not required to be <i>dereferenceable</i> after the increase.</td><td><code>++a<br>
(void)a++<br>
*a++</code></td></tr>
<tr><td>Its <i>value type</i> does not need to be assignable</td><td><code>t = u</code> <i>not required</i></td></tr>
<tr><td>Lvalues are <i>swappable</i>.</td><td><code><a href="../../utility/swap/default.htm">swap</a>(a,b)</code></td></tr>
</table>
</div>
</div>
<br>
Where <samp>X</samp> is an <i>input iterator type</i>, <samp>a</samp> and <samp>b</samp> are objects of this iterator type, and <samp>t</samp> and <samp>u</samp> are objects of the type pointed by the iterator type.<br>
<br>
Algorithms requiring <i>input iterators</i> should be <i>single-pass input algorithms</i>: algorithms pass through an iterator position once at most.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "../outputiterator/default.htm"><b>output_iterator_tag</b></a></dt><dd>Output iterator category <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "../forwarditerator/default.htm"><b>forward_iterator_tag</b></a></dt><dd>Forward iterator category <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "../bidirectionaliterator/default.htm"><b>bidirectional_iterator_tag</b></a></dt><dd>Bidirectional iterator category <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "../randomaccessiterator/default.htm"><b>random_access_iterator_tag</b></a></dt><dd>Random-access iterator category <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "../iterator/default.htm"><b>iterator</b></a></dt><dd>Iterator base class <span class="typ">(class template)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="iterator_box">
<h3><b><a href="../default.htm">&lt;iterator&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="../iterator/default.htm"><span>iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../iterator_traits/default.htm"><span>iterator_traits</span></a></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp98 cpp11"><a href="../advance/default.htm"><span>advance</span></a></li>
<li class="cpp98 cpp11"><a href="../back_inserter/default.htm"><span>back_inserter</span></a></li>
<li class="cpp11"><a href="../begin/default.htm"><span>begin</span></a></li>
<li class="cpp98 cpp11"><a href="../distance/default.htm"><span>distance</span></a></li>
<li class="cpp11"><a href="../end/default.htm"><span>end</span></a></li>
<li class="cpp98 cpp11"><a href="../front_inserter/default.htm"><span>front_inserter</span></a></li>
<li class="cpp98 cpp11"><a href="../inserter/default.htm"><span>inserter</span></a></li>
<li class="cpp11"><a href="../make_move_iterator/default.htm"><span>make_move_iterator</span></a></li>
<li class="cpp11"><a href="../next/default.htm"><span>next</span></a></li>
<li class="cpp11"><a href="../prev/default.htm"><span>prev</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>iterator categories:</h4><ul>
<li class="cpp98 cpp11"><a href="../bidirectionaliterator/default.htm"><span>bidirectional_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../forwarditerator/default.htm"><span>forward_iterator_tag</span></a></li>
<li class="cpp98 cpp11 selected"><a href="default.htm"><span>input_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../outputiterator/default.htm"><span>output_iterator_tag</span></a></li>
<li class="cpp98 cpp11"><a href="../randomaccessiterator/default.htm"><span>random_access_iterator_tag</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>predefined iterators:</h4><ul>
<li class="cpp98 cpp11"><a href="../back_insert_iterator/default.htm"><span>back_insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../front_insert_iterator/default.htm"><span>front_insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../insert_iterator/default.htm"><span>insert_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../istreambuf_iterator/default.htm"><span>istreambuf_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../istream_iterator/default.htm"><span>istream_iterator</span></a></li>
<li class="cpp11 folder"><a href="../move_iterator/default.htm"><span>move_iterator</span></a></li>
<li class="cpp98 cpp11"><a href="../ostreambuf_iterator/default.htm"><span>ostreambuf_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../ostream_iterator/default.htm"><span>ostream_iterator</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../reverse_iterator/default.htm"><span>reverse_iterator</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus~1645.com_">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiaiteratorinputiterator'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiaiteratorinputiterator'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
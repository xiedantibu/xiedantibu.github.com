<!DOCTYPE html><!-- saved from url=(0066)http://www.cplusplus.com/reference/string/basic_string/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>basic_string - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Reference</a></li>
<li><a href="../default.htm">&lt;string&gt;</a></li>
<li class="here">basic_string</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>basic_string</h1>
<div class="C_prototype"><pre>template &lt; class charT,           class traits = char_traits&lt;charT&gt;,    // basic_string::traits_type           class Alloc = allocator&lt;charT&gt;        // basic_string::allocator_type           &gt; class basic_string;</pre></div><div id="I_description">Generic string class</div>
<section id="description">
The <tt>basic_string</tt> is the generalization of class <a href="../string/default.htm">string</a> for any character type (see <a href="../string/default.htm">string</a> for a description).<br>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>charT</dt>
<dd>Character type.<br>
The string is formed by a sequence of characters of this type.<br>
This shall be a non-array <a href="../../type_traits/is_pod/default.htm">POD type</a>.</dd>
<dt>traits</dt>
<dd><a href="../char_traits/default.htm">Character traits</a> class that defines essential properties of the characters used by <a href="default.htm">basic_string</a> objects (see <a href="../char_traits/default.htm">char_traits</a>).<br>
<tt>traits::char_type</tt> shall be the same as <tt>charT</tt>.<br>
Aliased as member type <tt>basic_string::traits_type</tt>.</dd>
<dt>Alloc</dt>
<dd>Type of the allocator object used to define the storage allocation model. By default, the <a href="../../memory/allocator/default.htm">allocator</a> class template is used, which defines the simplest memory allocation model and is value-independent.<br>
Aliased as member type <tt>basic_string::allocator_type</tt>.</dd>
</dl>
<br>
Note: Because the first template parameter is not aliased as any member type, <tt>charT</tt> is used throughout this reference to refer to this type.<br>
</section>
<br>
<section id="instantiations">
<h3>Template instantiations</h3>
<dl class="links"><dt><a href= "../string/default.htm"><b>string</b></a></dt><dd>String class <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "../wstring/default.htm"><b>wstring</b></a></dt><dd>Wide string <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "../u16string/default.htm"><b>u16string <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>String of 16-bit characters <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "../u32string/default.htm"><b>u32string <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>String of 32-bit characters <span class="typ">(class)</span></dd></dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>traits_type</tt></td><td>The second template parameter (<tt>traits</tt>)</td><td>defaults to: <tt><a href="../char_traits/default.htm">char_traits</a>&lt;charT&gt;</tt></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The third template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="../../memory/allocator/default.htm">allocator</a>&lt;charT&gt;</tt></td></tr>
<tr><td><tt>value_type</tt></td><td><tt>traits_type::char_type</tt></td><td>shall be the same as <tt>charT</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>allocator_type::reference</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>charT&</tt></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>allocator_type::const_reference</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>const charT&</tt></td></tr>
<tr><td><tt>pointer</tt></td><td><tt>allocator_type::pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>charT*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt>allocator_type::const_pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>const charT*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="../../iterator/randomaccessiterator/default.htm">random access iterator</a> to <tt>charT</tt></td><td>convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="../../iterator/randomaccessiterator/default.htm">random access iterator</a> to <tt>const charT</tt></td><td></td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>difference_type</tt></td><td><tt>allocator_type::difference_type</tt></td><td>usually the same as <a href="../../cstddef/ptrdiff_t/default.htm">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td><tt>allocator_type::difference_type</tt></td><td>usually the same as <a href="../../cstddef/size_t/default.htm">size_t</a></td></tr>
</table>
</div>
<div title="C++11">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>traits_type</tt></td><td>The second template parameter (<tt>traits</tt>)</td><td>defaults to: <tt><a href="../char_traits/default.htm">char_traits</a>&lt;charT&gt;</tt></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The third template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="../../memory/allocator/default.htm">allocator</a>&lt;charT&gt;</tt></td></tr>
<tr><td><tt>value_type</tt></td><td><tt>traits_type::char_type</tt></td><td>shall be the same as <tt>charT</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>value_type&</tt></td><td></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>const value_type&</tt></td><td></td></tr>
<tr><td><tt>pointer</tt></td><td><tt><a href="../../memory/allocator_traits/default.htm">allocator_traits</a>&lt;allocator_type&gt;::pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>charT*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt><a href="../../memory/allocator_traits/default.htm">allocator_traits</a>&lt;allocator_type&gt;::const_pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>const charT*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="../../iterator/randomaccessiterator/default.htm">random access iterator</a> to <tt>charT</tt></td><td>convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="../../iterator/randomaccessiterator/default.htm">random access iterator</a> to <tt>const charT</tt></td><td></td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>difference_type</tt></td><td><tt><a href="../../memory/allocator_traits/default.htm">allocator_traits</a>&lt;allocator_type&gt;::difference_type</tt></td><td>usually the same as <a href="../../cstddef/ptrdiff_t/default.htm">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td><tt><a href="../../memory/allocator_traits/default.htm">allocator_traits</a>&lt;allocator_type&gt;::difference_type</tt></td><td>usually the same as <a href="../../cstddef/size_t/default.htm">size_t</a></td></tr>
</table>
</div>
</div>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "basic_string/default.htm"><b>(constructor)</b></a></dt><dd>Construct basic_string object <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "~basic_string/default.htm"><b>(destructor)</b></a></dt><dd>String destructor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator/default.htm"><b>operator=</b></a></dt><dd>String assignment <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Iterators</b>:<br>
<dl class="links"><dt><a href= "begin/default.htm"><b>begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "end/default.htm"><b>end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "rbegin/default.htm"><b>rbegin</b></a></dt><dd>Return reverse iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "rend/default.htm"><b>rend</b></a></dt><dd>Return reverse iterator to reverse end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "cbegin/default.htm"><b>cbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "cend/default.htm"><b>cend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "crbegin/default.htm"><b>crbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "crend/default.htm"><b>crend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse end <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Capacity</b>:<br>
<dl class="links"><dt><a href= "size/default.htm"><b>size</b></a></dt><dd>Return size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "length/default.htm"><b>length</b></a></dt><dd>Return length of string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "max_size/default.htm"><b>max_size</b></a></dt><dd>Return maximum size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "resize/default.htm"><b>resize</b></a></dt><dd>Resize string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "capacity/default.htm"><b>capacity</b></a></dt><dd>Return size of allocated storage <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "reserve/default.htm"><b>reserve</b></a></dt><dd>Request a change in capacity <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "clear/default.htm"><b>clear</b></a></dt><dd>Clear string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "empty/default.htm"><b>empty</b></a></dt><dd>Test whether string is empty <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "shrink_to_fit/default.htm"><b>shrink_to_fit <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Shrink to fit <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Element access</b>:<br>
<dl class="links"><dt><a href= "operator/default.htm"><b>operator[]</b></a></dt><dd>Get character of string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "at/default.htm"><b>at</b></a></dt><dd>Get character of string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "back/default.htm"><b>back <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Access last character <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "front/default.htm"><b>front <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Access first character <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Modifiers</b>:<br>
<dl class="links"><dt><a href= "operator/default.htm"><b>operator+=</b></a></dt><dd>Append to string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "append/default.htm"><b>append</b></a></dt><dd>Append to string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "push_back/default.htm"><b>push_back</b></a></dt><dd>Append character to string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "assign/default.htm"><b>assign</b></a></dt><dd>Assign content to string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "insert/default.htm"><b>insert</b></a></dt><dd>Insert into string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "erase/default.htm"><b>erase</b></a></dt><dd>Erase characters from string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "replace/default.htm"><b>replace</b></a></dt><dd>Replace portion of string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "swap/default.htm"><b>swap</b></a></dt><dd>Swap string values <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "pop_back/default.htm"><b>pop_back <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Delete last character <span class="typ">(public member function)</span></dd></dl>
<br>
<b>String operations</b>:<br>
<dl class="links"><dt><a href= "c_str/default.htm"><b>c_str</b></a></dt><dd>Get C-string equivalent</dd></dl><dl class="links"><dt><a href= "data/default.htm"><b>data</b></a></dt><dd>Get string data <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "get_allocator/default.htm"><b>get_allocator</b></a></dt><dd>Get allocator <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "copy/default.htm"><b>copy</b></a></dt><dd>Copy sequence of characters from string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "find/default.htm"><b>find</b></a></dt><dd>Find first occurrence in string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "rfind/default.htm"><b>rfind</b></a></dt><dd>Find last occurrence in string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "find_first_of/default.htm"><b>find_first_of</b></a></dt><dd>Find character in string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "find_last_of/default.htm"><b>find_last_of</b></a></dt><dd>Find character in string from the end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "find_first_not_of/default.htm"><b>find_first_not_of</b></a></dt><dd>Find non-matching character in string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "find_last_not_of/default.htm"><b>find_last_not_of</b></a></dt><dd>Find non-matching character in string from the end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "substr/default.htm"><b>substr</b></a></dt><dd>Generate substring <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "compare/default.htm"><b>compare</b></a></dt><dd>Compare strings <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Non-member function overloads</h3>
<dl class="links"><dt><a href= "operator/default.htm"><b>operator+</b></a></dt><dd>Concatenate strings <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "operators/default.htm"><b>relational operators</b></a></dt><dd>Relational operators for basic_string <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "swap-free/default.htm"><b>swap</b></a></dt><dd>Exchanges the values of two strings <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "operator_5f3e_5f3e/default.htm"><b>operator&gt;&gt;</b></a></dt><dd>Extract string from stream <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "operator_5f3c_5f3c/default.htm"><b>operator&lt;&lt;</b></a></dt><dd>Insert string into stream <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "getline/default.htm"><b>getline</b></a></dt><dd>Get line from stream into string <span class="typ">(function template)</span></dd></dl>
</section>
<br>
<section id="constants">
<h3>Member constants</h3>
<dl class="links"><dt><a href= "npos/default.htm"><b>npos</b></a></dt><dd>Maximum value of size_type <span class="typ">(public static member constant)</span></dd></dl>
</section>
</div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../list/default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iterator/default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="string_box">
<h3><b><a href="../default.htm">&lt;string&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>class templates:</h4><ul>
<li class="cpp98 cpp11 selected folder"><a href="default.htm"><span>basic_string</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../char_traits/default.htm"><span>char_traits</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>classes:</h4><ul>
<li class="cpp98 cpp11 folder"><a href="../string/default.htm"><span>string</span></a></li>
<li class="cpp11"><a href="../u16string/default.htm"><span>u16string</span></a></li>
<li class="cpp11"><a href="../u32string/default.htm"><span>u32string</span></a></li>
<li class="cpp98 cpp11"><a href="../wstring/default.htm"><span>wstring</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp11"><a href="../stod/default.htm"><span>stod</span></a></li>
<li class="cpp11"><a href="../stof/default.htm"><span>stof</span></a></li>
<li class="cpp11"><a href="../stoi/default.htm"><span>stoi</span></a></li>
<li class="cpp11"><a href="../stol/default.htm"><span>stol</span></a></li>
<li class="cpp11"><a href="../stold/default.htm"><span>stold</span></a></li>
<li class="cpp11"><a href="../stoll/default.htm"><span>stoll</span></a></li>
<li class="cpp11"><a href="../stoul/default.htm"><span>stoul</span></a></li>
<li class="cpp11"><a href="../stoull/default.htm"><span>stoull</span></a></li>
<li class="cpp11"><a href="../to_string/default.htm"><span>to_string</span></a></li>
<li class="cpp11"><a href="../to_wstring/default.htm"><span>to_wstring</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="basic_string_box">
<h3><b><a href="default.htm">basic_string</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="basic_string/default.htm"><span>basic_string::basic_string</span></a></li>
<li class="cpp98 cpp11"><a href="~basic_string/default.htm"><span>basic_string::~basic_string</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp98 cpp11"><a href="append/default.htm"><span>basic_string::append</span></a></li>
<li class="cpp98 cpp11"><a href="assign/default.htm"><span>basic_string::assign</span></a></li>
<li class="cpp98 cpp11"><a href="at/default.htm"><span>basic_string::at</span></a></li>
<li class="cpp11"><a href="back/default.htm"><span>basic_string::back</span></a></li>
<li class="cpp98 cpp11"><a href="begin/default.htm"><span>basic_string::begin</span></a></li>
<li class="cpp98 cpp11"><a href="capacity/default.htm"><span>basic_string::capacity</span></a></li>
<li class="cpp11"><a href="cbegin/default.htm"><span>basic_string::cbegin</span></a></li>
<li class="cpp11"><a href="cend/default.htm"><span>basic_string::cend</span></a></li>
<li class="cpp98 cpp11"><a href="clear/default.htm"><span>basic_string::clear</span></a></li>
<li class="cpp98 cpp11"><a href="compare/default.htm"><span>basic_string::compare</span></a></li>
<li class="cpp98 cpp11"><a href="copy/default.htm"><span>basic_string::copy</span></a></li>
<li class="cpp11"><a href="crbegin/default.htm"><span>basic_string::crbegin</span></a></li>
<li class="cpp11"><a href="crend/default.htm"><span>basic_string::crend</span></a></li>
<li class="cpp98 cpp11"><a href="c_str/default.htm"><span>basic_string::c_str</span></a></li>
<li class="cpp98 cpp11"><a href="data/default.htm"><span>basic_string::data</span></a></li>
<li class="cpp98 cpp11"><a href="empty/default.htm"><span>basic_string::empty</span></a></li>
<li class="cpp98 cpp11"><a href="end/default.htm"><span>basic_string::end</span></a></li>
<li class="cpp98 cpp11"><a href="erase/default.htm"><span>basic_string::erase</span></a></li>
<li class="cpp98 cpp11"><a href="find/default.htm"><span>basic_string::find</span></a></li>
<li class="cpp98 cpp11"><a href="find_first_not_of/default.htm"><span>basic_string::find_first_not_of</span></a></li>
<li class="cpp98 cpp11"><a href="find_first_of/default.htm"><span>basic_string::find_first_of</span></a></li>
<li class="cpp98 cpp11"><a href="find_last_not_of/default.htm"><span>basic_string::find_last_not_of</span></a></li>
<li class="cpp98 cpp11"><a href="find_last_of/default.htm"><span>basic_string::find_last_of</span></a></li>
<li class="cpp11"><a href="front/default.htm"><span>basic_string::front</span></a></li>
<li class="cpp98 cpp11"><a href="get_allocator/default.htm"><span>basic_string::get_allocator</span></a></li>
<li class="cpp98 cpp11"><a href="insert/default.htm"><span>basic_string::insert</span></a></li>
<li class="cpp98 cpp11"><a href="length/default.htm"><span>basic_string::length</span></a></li>
<li class="cpp98 cpp11"><a href="max_size/default.htm"><span>basic_string::max_size</span></a></li>
<li class="cpp98 cpp11"><a href="operator/default.htm"><span>basic_string::operator+=</span></a></li>
<li class="cpp98 cpp11"><a href="operator/default.htm"><span>basic_string::operator=</span></a></li>
<li class="cpp98 cpp11"><a href="operator/default.htm"><span>basic_string::operator[]</span></a></li>
<li class="cpp11"><a href="pop_back/default.htm"><span>basic_string::pop_back</span></a></li>
<li class="cpp98 cpp11"><a href="push_back/default.htm"><span>basic_string::push_back</span></a></li>
<li class="cpp98 cpp11"><a href="rbegin/default.htm"><span>basic_string::rbegin</span></a></li>
<li class="cpp98 cpp11"><a href="rend/default.htm"><span>basic_string::rend</span></a></li>
<li class="cpp98 cpp11"><a href="replace/default.htm"><span>basic_string::replace</span></a></li>
<li class="cpp98 cpp11"><a href="reserve/default.htm"><span>basic_string::reserve</span></a></li>
<li class="cpp98 cpp11"><a href="resize/default.htm"><span>basic_string::resize</span></a></li>
<li class="cpp98 cpp11"><a href="rfind/default.htm"><span>basic_string::rfind</span></a></li>
<li class="cpp11"><a href="shrink_to_fit/default.htm"><span>basic_string::shrink_to_fit</span></a></li>
<li class="cpp98 cpp11"><a href="size/default.htm"><span>basic_string::size</span></a></li>
<li class="cpp98 cpp11"><a href="substr/default.htm"><span>basic_string::substr</span></a></li>
<li class="cpp98 cpp11"><a href="swap/default.htm"><span>basic_string::swap</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>member constants:</h4><ul>
<li class="cpp98 cpp11"><a href="npos/default.htm"><span>basic_string::npos</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp98 cpp11"><a href="getline/default.htm"><span>getline (basic_string)</span></a></li>
<li class="cpp98 cpp11"><a href="operator/default.htm"><span>operator+ (basic_string)</span></a></li>
<li class="cpp98 cpp11"><a href="operator_5f3c_5f3c/default.htm"><span>operator&lt;&lt; (basic_string)</span></a></li>
<li class="cpp98 cpp11"><a href="operator_5f3e_5f3e/default.htm"><span>operator&gt;&gt; (basic_string)</span></a></li>
<li class="cpp98 cpp11"><a href="operators/default.htm"><span>relational operators (basic_string)</span></a></li>
<li class="cpp98 cpp11"><a href="swap-free/default.htm"><span>swap (basic_string)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../ovr0/contact.doreferrerwww.cplusplus.com_252freference_25~2.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','../../new.cgiastringbasic_string.htm'));
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiastringbasic_string.htm'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiastringbasic_string'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
<!DOCTYPE html><!-- saved from url=(0056)http://www.cplusplus.com/reference/list/list/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>list - C++ Reference</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Reference</a></li>
<li><a href="../default.htm">&lt;list&gt;</a></li>
<li class="here">list</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;list&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>list</h1>
<div class="C_prototype"><pre>template &lt; class T, class Alloc = allocator&lt;T&gt; &gt; class list;</pre></div><div id="I_description">List</div>
<section id="description">
Lists are sequence containers that allow constant time insert and erase operations anywhere within the sequence, and iteration in both directions.<br>
<br>
List containers are implemented as doubly-linked lists; Doubly linked lists can store each of the elements they contain in different and unrelated storage locations. The ordering is kept internally by the association to each element of a link to the element preceding it and a link to the element following it.<br>
<br>
They are very similar to <a href="../../forward_list/forward_list/default.htm">forward_list</a>: The main difference being that <a href="../../forward_list/forward_list/default.htm">forward_list</a> objects are single-linked lists, and thus they can only be iterated forwards, in exchange for being somewhat smaller and more efficient.<br>
<br>
Compared to other base standard sequence containers (<a href="../../array/array/default.htm">array</a>, <a href="../../vector/vector/default.htm">vector</a> and <a href="../../deque/deque/default.htm">deque</a>), lists perform generally better in inserting, extracting and moving elements in any position within the container for which an iterator has already been obtained, and therefore also in algorithms that make intensive use of these, like sorting algorithms.<br>
<br>
The main drawback of <tt>list</tt>s and <a href="../../forward_list/forward_list/default.htm">forward_list</a>s compared to these other sequence containers is that they lack direct access to the elements by their position; For example, to access the sixth element in a <tt>list</tt>, one has to iterate from a known position (like the beginning or the end) to that position, which takes linear time in the distance between these. They also consume some extra memory to keep the linking information associated to each element (which may be an important factor for large lists of small-sized elements).<br>
</section>
<br>
<section id="properties">
<h3>Container properties</h3>
<dl>
<dt>Sequence</dt>
<dd>Elements in sequence containers are ordered in a strict linear sequence. Individual elements are accessed by their position in this sequence.</dd>
<dt>Doubly-linked list</dt>
<dd>Each element keeps information on how to locate the next and the previous elements, allowing constant time insert and erase operations before or after a specific element (even of entire ranges), but no direct random access.</dd>
<dt>Allocator-aware</dt>
<dd>The container uses an allocator object to dynamically handle its storage needs.</dd>
</dl>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>T</dt>
<dd>Type of the elements.<br>
Aliased as member type <tt>list::value_type</tt>.</dd>
<dt>Alloc</dt>
<dd>Type of the allocator object used to define the storage allocation model. By default, the <a href="../../memory/allocator/default.htm">allocator</a> class template is used, which defines the simplest memory allocation model and is value-independent.<br>
Aliased as member type <tt>list::allocator_type</tt>.</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>value_type</tt></td><td>The first template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The second template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="../../memory/allocator/default.htm">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>allocator_type::reference</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>value_type&</tt></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>allocator_type::const_reference</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>const value_type&</tt></td></tr>
<tr><td><tt>pointer</tt></td><td><tt>allocator_type::pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt>allocator_type::const_pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> to <tt>value_type</tt></td><td>convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type, identical to: <tt>iterator_traits&lt;iterator&gt;::difference_type</tt></td><td>usually the same as <a href="../../cstddef/ptrdiff_t/default.htm">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type that can represent any non-negative value of <tt>difference_type</tt></td><td>usually the same as <a href="../../cstddef/size_t/default.htm">size_t</a></td></tr>
</table>
</div>
<div title="C++11">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>value_type</tt></td><td>The first template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The second template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="../../memory/allocator/default.htm">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>value_type&</tt></td><td></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>const value_type&</tt></td><td></td></tr>
<tr><td><tt>pointer</tt></td><td><tt><a href="../../memory/allocator_traits/default.htm">allocator_traits</a>&lt;allocator_type&gt;::pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt><a href="../../memory/allocator_traits/default.htm">allocator_traits</a>&lt;allocator_type&gt;::const_pointer</tt></td><td>for the default <a href="../../memory/allocator/default.htm">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> to <tt>value_type</tt></td><td>convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="../../iterator/bidirectionaliterator/default.htm">bidirectional iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="../../iterator/reverse_iterator/default.htm">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type, identical to:<br>
<tt>iterator_traits&lt;iterator&gt;::difference_type</tt></td><td>usually the same as <a href="../../cstddef/ptrdiff_t/default.htm">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type that can represent any non-negative value of <tt>difference_type</tt></td><td>usually the same as <a href="../../cstddef/size_t/default.htm">size_t</a></td></tr>
</table>
</div>
</div>
</section>
<br>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "list/default.htm"><b>(constructor)</b></a></dt><dd>Construct list <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "~list/default.htm"><b>(destructor)</b></a></dt><dd>List destructor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "operator/default.htm"><b>operator=</b></a></dt><dd>Assign content <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Iterators</b>:<br>
<dl class="links"><dt><a href= "begin/default.htm"><b>begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "end/default.htm"><b>end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "rbegin/default.htm"><b>rbegin</b></a></dt><dd>Return reverse iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "rend/default.htm"><b>rend</b></a></dt><dd>Return reverse iterator to reverse end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "cbegin/default.htm"><b>cbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "cend/default.htm"><b>cend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "crbegin/default.htm"><b>crbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "crend/default.htm"><b>crend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse end <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Capacity</b>:<br>
<dl class="links"><dt><a href= "empty/default.htm"><b>empty</b></a></dt><dd>Test whether container is empty <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "size/default.htm"><b>size</b></a></dt><dd>Return size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "max_size/default.htm"><b>max_size</b></a></dt><dd>Return maximum size <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Element access</b>:<br>
<dl class="links"><dt><a href= "front/default.htm"><b>front</b></a></dt><dd>Access first element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "back/default.htm"><b>back</b></a></dt><dd>Access last element <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Modifiers</b>:<br>
<dl class="links"><dt><a href= "assign/default.htm"><b>assign</b></a></dt><dd>Assign new content to container <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "emplace_front/default.htm"><b>emplace_front <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element at beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "push_front/default.htm"><b>push_front</b></a></dt><dd>Insert element at beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "pop_front/default.htm"><b>pop_front</b></a></dt><dd>Delete first element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "emplace_back/default.htm"><b>emplace_back <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element at the end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "push_back/default.htm"><b>push_back</b></a></dt><dd>Add element at the end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "pop_back/default.htm"><b>pop_back</b></a></dt><dd>Delete last element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "emplace/default.htm"><b>emplace <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "insert/default.htm"><b>insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "erase/default.htm"><b>erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "swap/default.htm"><b>swap</b></a></dt><dd>Swap content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "resize/default.htm"><b>resize</b></a></dt><dd>Change size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "clear/default.htm"><b>clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Operations</b>:<br>
<dl class="links"><dt><a href= "splice/default.htm"><b>splice</b></a></dt><dd>Transfer elements from list to list <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "remove/default.htm"><b>remove</b></a></dt><dd>Remove elements with specific value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "remove_if/default.htm"><b>remove_if</b></a></dt><dd>Remove elements fulfilling condition <span class="typ">(public member function template)</span></dd></dl><dl class="links"><dt><a href= "unique/default.htm"><b>unique</b></a></dt><dd>Remove duplicate values <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "merge/default.htm"><b>merge</b></a></dt><dd>Merge sorted lists <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "sort/default.htm"><b>sort</b></a></dt><dd>Sort elements in container <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "reverse/default.htm"><b>reverse</b></a></dt><dd>Reverse the order of elements <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Observers</b>:<br>
<dl class="links"><dt><a href= "get_allocator/default.htm"><b>get_allocator</b></a></dt><dd>Get allocator <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Non-member function overloads</h3>
<dl class="links"><dt><a href= "operators/default.htm"><b>relational operators (list)</b></a></dt><dd>Relational operators for list <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "swap-free/default.htm"><b>swap (list)</b></a></dt><dd>Exchanges the contents of two lists <span class="typ">(function template)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7973859818";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder doc"><a href="../../../doc/default.htm">Tutorials</a></li>
<li class="folder selected reference"><a href="../../default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="../../default.htm">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="../../clibrary/default.htm">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cassert/default.htm"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cctype/default.htm"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cerrno/default.htm"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cfenv/default.htm"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cfloat/default.htm"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cinttypes/default.htm"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ciso646/default.htm"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../climits/default.htm"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../clocale/default.htm"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cmath/default.htm"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csetjmp/default.htm"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../csignal/default.htm"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdarg/default.htm"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cstdbool/default.htm"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstddef/default.htm"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../cstdint/default.htm"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdio/default.htm"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstdlib/default.htm"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cstring/default.htm"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="../../ctgmath/default.htm"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../ctime/default.htm"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="../../cuchar/default.htm"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwchar/default.htm"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="../../cwctype/default.htm"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="../../stl/default.htm">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="../../array/default.htm"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../deque/default.htm"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../forward_list/default.htm"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../map/default.htm"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../queue/default.htm"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../set/default.htm"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stack/default.htm"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_map/default.htm"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../unordered_set/default.htm"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../vector/default.htm"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../iolibrary/default.htm">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../fstream/default.htm"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iomanip/default.htm"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ios/default.htm"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iosfwd/default.htm"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iostream/default.htm"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../istream/default.htm"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../ostream/default.htm"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../sstream/default.htm"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../streambuf/default.htm"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../multithreading/default.htm">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="../../atomic/default.htm"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../condition_variable/default.htm"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../future/default.htm"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../mutex/default.htm"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../thread/default.htm"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="../../std/default.htm">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="../../algorithm/default.htm"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../bitset/default.htm"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../chrono/default.htm"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../codecvt/default.htm"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../complex/default.htm"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../exception/default.htm"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../functional/default.htm"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../initializer_list/default.htm"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../iterator/default.htm"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../limits/default.htm"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../locale/default.htm"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../memory/default.htm"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../new/default.htm"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../numeric/default.htm"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../random/default.htm"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../ratio/default.htm"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../regex/default.htm"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../stdexcept/default.htm"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../string/default.htm"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../system_error/default.htm"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../tuple/default.htm"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../typeindex/default.htm"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../typeinfo/default.htm"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="../../type_traits/default.htm"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../utility/default.htm"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="../../valarray/default.htm"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="list_box">
<h3><b><a href="../default.htm">&lt;list&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11 selected folder"><a href="default.htm"><span>list</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="list_box">
<h3><b><a href="default.htm">list</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="list/default.htm"><span>list::list</span></a></li>
<li class="cpp98 cpp11"><a href="~list/default.htm"><span>list::~list</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp98 cpp11"><a href="assign/default.htm"><span>list::assign</span></a></li>
<li class="cpp98 cpp11"><a href="back/default.htm"><span>list::back</span></a></li>
<li class="cpp98 cpp11"><a href="begin/default.htm"><span>list::begin</span></a></li>
<li class="cpp11"><a href="cbegin/default.htm"><span>list::cbegin</span></a></li>
<li class="cpp11"><a href="cend/default.htm"><span>list::cend</span></a></li>
<li class="cpp98 cpp11"><a href="clear/default.htm"><span>list::clear</span></a></li>
<li class="cpp11"><a href="crbegin/default.htm"><span>list::crbegin</span></a></li>
<li class="cpp11"><a href="crend/default.htm"><span>list::crend</span></a></li>
<li class="cpp11"><a href="emplace/default.htm"><span>list::emplace</span></a></li>
<li class="cpp11"><a href="emplace_back/default.htm"><span>list::emplace_back</span></a></li>
<li class="cpp11"><a href="emplace_front/default.htm"><span>list::emplace_front</span></a></li>
<li class="cpp98 cpp11"><a href="empty/default.htm"><span>list::empty</span></a></li>
<li class="cpp98 cpp11"><a href="end/default.htm"><span>list::end</span></a></li>
<li class="cpp98 cpp11"><a href="erase/default.htm"><span>list::erase</span></a></li>
<li class="cpp98 cpp11"><a href="front/default.htm"><span>list::front</span></a></li>
<li class="cpp98 cpp11"><a href="get_allocator/default.htm"><span>list::get_allocator</span></a></li>
<li class="cpp98 cpp11"><a href="insert/default.htm"><span>list::insert</span></a></li>
<li class="cpp98 cpp11"><a href="max_size/default.htm"><span>list::max_size</span></a></li>
<li class="cpp98 cpp11"><a href="merge/default.htm"><span>list::merge</span></a></li>
<li class="cpp98 cpp11"><a href="operator/default.htm"><span>list::operator=</span></a></li>
<li class="cpp98 cpp11"><a href="pop_back/default.htm"><span>list::pop_back</span></a></li>
<li class="cpp98 cpp11"><a href="pop_front/default.htm"><span>list::pop_front</span></a></li>
<li class="cpp98 cpp11"><a href="push_back/default.htm"><span>list::push_back</span></a></li>
<li class="cpp98 cpp11"><a href="push_front/default.htm"><span>list::push_front</span></a></li>
<li class="cpp98 cpp11"><a href="rbegin/default.htm"><span>list::rbegin</span></a></li>
<li class="cpp98 cpp11"><a href="remove/default.htm"><span>list::remove</span></a></li>
<li class="cpp98 cpp11"><a href="remove_if/default.htm"><span>list::remove_if</span></a></li>
<li class="cpp98 cpp11"><a href="rend/default.htm"><span>list::rend</span></a></li>
<li class="cpp98 cpp11"><a href="resize/default.htm"><span>list::resize</span></a></li>
<li class="cpp98 cpp11"><a href="reverse/default.htm"><span>list::reverse</span></a></li>
<li class="cpp98 cpp11"><a href="size/default.htm"><span>list::size</span></a></li>
<li class="cpp98 cpp11"><a href="sort/default.htm"><span>list::sort</span></a></li>
<li class="cpp98 cpp11"><a href="splice/default.htm"><span>list::splice</span></a></li>
<li class="cpp98 cpp11"><a href="swap/default.htm"><span>list::swap</span></a></li>
<li class="cpp98 cpp11"><a href="unique/default.htm"><span>list::unique</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp98 cpp11"><a href="operators/default.htm"><span>relational operators (list)</span></a></li>
<li class="cpp98 cpp11"><a href="swap-free/default.htm"><span>swap (list)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../ovr0/contact.doreferrerwww.cplusplus.com_252freference_~154.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','../../new.cgialistlist.htm'));
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgialistlist.htm'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgialistlist'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
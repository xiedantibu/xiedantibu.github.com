<!DOCTYPE html><!-- saved from url=(0060)http://www.cplusplus.com/doc/tutorial/functions2/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Overloads and templates - C++ Tutorials</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Tutorials</a></li>
<li><a href="../default.htm">C++ Language</a></li>
<li class="here">Overloads and templates</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-1947171228411990";
google_ad_slot = "5020710848";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<h1>Overloads and templates</h1>
<section id="overload">
<h3>Overloaded functions</h3>
In C++, two different functions can have the same name if their parameters are different; either because they have a different number of parameters, or because any of their parameters are of a different type. For example: <br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// overloading functions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> operate (<var>int</var> a, <var>int</var> b)
{
  <var>return</var> (a*b);
}

<var>double</var> operate (<var>double</var> a, <var>double</var> b)
{
  <var>return</var> (a/b);
}

<var>int</var> main ()
{
  <var>int</var> x=5,y=2;
  <var>double</var> n=5.0,m=2.0;
  cout &lt;&lt; operate (x,y) &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; operate (n,m) &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>10
2.5</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In this example, there are two functions called <code>operate</code>, but one of them has two parameters of type <code>int</code>, while the other has them of type <code>double</code>. The compiler knows which one to call in each case by examining the types passed as arguments when the function is called. If it is called with two <code>int</code> arguments, it calls to the function that has two <code>int</code> parameters, and if it is called with two <code>double</code>s, it calls the one with two <code>double</code>s.<br>
<br>
In this example, both functions have quite different behaviors, the <code>int</code> version multiplies its arguments, while the <code>double</code> version divides them. This is generally not a good idea. Two functions with the same name are generally expected to have -at least- a similar behavior, but this example demonstrates that is entirely possible for them not to. Two overloaded functions (i.e., two functions with the same name) have entirely different definitions; they are, for all purposes, different functions, that only happen to have the same name.<br>
<br>
Note that a function cannot be overloaded only by its return type. At least one of its parameters must have a different type.<br>
</section>
<br>
<section id="templates">
<h3>Function templates</h3>
Overloaded functions may have the same definition. For example:<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><cite>// overloaded functions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> sum (<var>int</var> a, <var>int</var> b)
{
  <var>return</var> a+b;
}

<var>double</var> sum (<var>double</var> a, <var>double</var> b)
{
  <var>return</var> a+b;
}

<var>int</var> main ()
{
  cout &lt;&lt; sum (10,20) &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; sum (1.0,1.5) &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>30
2.5</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Here, <code>sum</code> is overloaded with different parameter types, but with the exact same body.<br>
<br>
The function <code>sum</code> could be overloaded for a lot of types, and it could make sense for all of them to have the same body. For cases such as this, C++ has the ability to define functions with generic types, known as <i>function templates</i>. Defining a function template follows the same syntax than a regular function, except that it is preceded by the <code>template</code> keyword and a series of template parameters enclosed in angle-brackets &lt;&gt;:<br>
<br>
<code>template &lt;template-parameters&gt; function-declaration</code>
<br>
The template parameters are a series of parameters separated by commas. These parameters can be generic template types by specifying either the <code>class</code> or <code>typename</code> keyword followed by an identifier. This identifier can then be used in the function declaration as if it was a regular type. For example, a generic <code>sum</code> function could be defined as:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> SomeType&gt;
SomeType sum (SomeType a, SomeType b)
{
  <var>return</var> a+b;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
It makes no difference whether the generic type is specified with keyword <code>class</code> or keyword <code>typename</code> in the template argument list (they are 100% synonyms in template declarations).<br>
<br>
In the code above, declaring <code>SomeType</code> (a generic type within the template parameters enclosed in angle-brackets) allows <code>SomeType</code> to be used anywhere in the function definition, just as any other type; it can be used as the type for parameters, as return type, or to declare new variables of this type. In all cases, it represents a generic type that will be determined on the moment the template is instantiated.<br>
<br>
Instantiating  a template is applying the template to create a function using particular types or values for its template parameters. This is done by calling the <i>function template</i>, with the same syntax as calling a regular function, but specifying the template arguments enclosed in angle brackets:<br>
<br>
<code>name &lt;template-arguments&gt; (function-arguments)</code>
<br>
For example, the <code>sum</code> function template defined above can be called with:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>x = sum&lt;<var>int</var>&gt;(10,20);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The function <code>sum&lt;int&gt;</code> is just one of the possible instantiations of function template <code>sum</code>. In this case, by using <code>int</code> as template argument in the call, the compiler automatically instantiates a version of <code>sum</code> where each occurrence of <code>SomeType</code> is replaced by <code>int</code>, as if it was defined as:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>int</var> sum (<var>int</var> a, <var>int</var> b)
{
  <var>return</var> a+b;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Let's see an actual example:<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>// function template</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>template</var> &lt;<var>class</var> T&gt;
T sum (T a, T b)
{
  T result;
  result = a + b;
  <var>return</var> result;
}

<var>int</var> main () {
  <var>int</var> i=5, j=6, k;
  <var>double</var> f=2.0, g=0.5, h;
  k=sum&lt;<var>int</var>&gt;(i,j);
  h=sum&lt;<var>double</var>&gt;(f,g);
  cout &lt;&lt; k &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; h &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>11
2.5</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In this case, we have used <code>T</code> as the template parameter name, instead of <code>SomeType</code>. It makes no difference, and <code>T</code> is actually a quite common template parameter name for generic types. <br>
<br>
In the example above, we used the function template <code>sum</code> twice. The first time with arguments of type <code>int</code>, and the second one with arguments of type <code>double</code>. The compiler has instantiated and then called each time the appropriate version of the function.<br>
<br>
Note also how <code>T</code> is also used to declare a local variable of that (generic) type within <code>sum</code>:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>T result;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Therefore, result will be a variable of the same type as the parameters <code>a</code> and <code>b</code>, and as the type returned by the function.<br>
In this specific case where the generic type <code>T</code> is used as a parameter for <code>sum</code>, the compiler is even able to deduce the data type automatically without having to explicitly specify it within angle brackets. Therefore, instead of explicitly specifying the template arguments with:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>k = sum&lt;<var>int</var>&gt; (i,j);
h = sum&lt;<var>double</var>&gt; (f,g);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
It is possible to instead simply write:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>k = sum (i,j);
h = sum (f,g);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
without the type enclosed in angle brackets. Naturally, for that, the type shall be unambiguous. If <code>sum</code> is called with arguments of different types, the compiler may not be able to deduce the type of <code>T</code> automatically.<br>
<br>
Templates are a powerful and versatile feature. They can have multiple template parameters, and the function can still use regular non-templated types. For example:<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>// function templates</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>template</var> &lt;<var>class</var> T, <var>class</var> U&gt;
<var>bool</var> are_equal (T a, U b)
{
  <var>return</var> (a==b);
}

<var>int</var> main ()
{
  <var>if</var> (are_equal(10,10.0))
    cout &lt;&lt; <kbd>"x and y are equal\n"</kbd>;
  <var>else</var>
    cout &lt;&lt; <kbd>"x and y are not equal\n"</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>x and y are equal</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Note that this example uses automatic template parameter deduction in the call to <code>are_equal</code>:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>are_equal(10,10.0)</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Is equivalent to:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code>are_equal&lt;<var>int</var>,<var>double</var>&gt;(10,10.0)</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Since, in C++, integer literals with no suffix (such as <code>10</code>) are always of type <code>int</code>, and floating-point literals without suffix (such as <code>10.0</code>) are always of type <code>double</code>, there is no ambiguity possible, and thus the template arguments can be omitted in the call.<br>
</section>
<br>
<section id="nontype">
<h3>Non-type template arguments</h3>
The template parameters can not only include types introduced by <code>class</code> or <code>typename</code>, but can also include expressions of a particular type:<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code><cite>// template arguments</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>template</var> &lt;<var>class</var> T, <var>int</var> N&gt;
T fixed_multiply (T val)
{
  <var>return</var> val * N;
}

<var>int</var> main() {
  std::cout &lt;&lt; fixed_multiply&lt;<var>int</var>,2&gt;(10) &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; fixed_multiply&lt;<var>int</var>,3&gt;(10) &lt;&lt; <kbd>'\n'</kbd>;
}</code></pre></td>
<td class="output"><pre><samp>20
30</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The second argument of the <code>fixed_multiply</code> function template is of type <code>int</code>. It just looks like a regular function parameter, and can actually be used just like one.<br>
<br>
But there exists a major difference: the value of template parameters is determined on compile-time to generate a different instantiation of the function <code>fixed_multiply</code>, and thus the value of that argument is never passed during runtime: The two calls to <code>fixed_multiply</code> in <code>main</code> essentially call two versions of the function: one that always multiplies by two, and one that always multiplies by three. For that same reason, the second template argument needs to be a constant expression (it cannot be passed a variable).<br>
</section>
<table class="C_docPrevNext"><tr><td class="prev"><a href="../functions/default.htm" rel="prev"><img src="../../../ico/32arrowleft.png" width="32" height="32" alt="Previous">Previous:<br><b>Functions</b></a></td><td class="index"><a href="../default.htm" rel="index"><img src="../../../ico/32doc.png" width="32" height="32" alt="Index"><br>Index</a></td><td class="next"><a href="../namespaces/default.htm" rel="next"><img src="../../../ico/32arrowright.png" width="32" height="32" alt="Next">Next:<br><b>Name visibility</b></a></td></tr></table></div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-1947171228411990";
google_ad_slot = "5020710848";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder selected doc"><a href="../../default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="doc_box">
<h3><b><a href="../../default.htm">Tutorials</a></b></h3>
<ul>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>C++ Language</span></a></li>
<li><a href="../../ascii/default.htm"><span>Ascii Codes</span></a></li>
<li><a href="../../boolean/default.htm"><span>Boolean Operations</span></a></li>
<li><a href="../../hex/default.htm"><span>Numerical Bases</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="tutorial_box">
<h3><b><a href="../default.htm">C++ Language</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>Introduction:</h4><ul>
<li class="folder"><a href="../introduction/default.htm"><span>Compilers</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Basics of C++:</h4><ul>
<li><a href="../program_structure/default.htm"><span>Structure of a program</span></a></li>
<li><a href="../variables/default.htm"><span>Variables and types</span></a></li>
<li><a href="../constants/default.htm"><span>Constants</span></a></li>
<li><a href="../operators/default.htm"><span>Operators</span></a></li>
<li><a href="../basic_io/default.htm"><span>Basic Input/Output</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Program structure:</h4><ul>
<li><a href="../control/default.htm"><span>Statements and flow control</span></a></li>
<li><a href="../functions/default.htm"><span>Functions</span></a></li>
<li class="selected"><a href="default.htm"><span>Overloads and templates</span></a></li>
<li><a href="../namespaces/default.htm"><span>Name visibility</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Compound data types:</h4><ul>
<li><a href="../arrays/default.htm"><span>Arrays</span></a></li>
<li><a href="../ntcs/default.htm"><span>Character sequences</span></a></li>
<li><a href="../pointers/default.htm"><span>Pointers</span></a></li>
<li><a href="../dynamic/default.htm"><span>Dynamic memory</span></a></li>
<li><a href="../structures/default.htm"><span>Data structures</span></a></li>
<li><a href="../other_data_types/default.htm"><span>Other data types</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Classes:</h4><ul>
<li><a href="../classes/default.htm"><span>Classes (I)</span></a></li>
<li><a href="../templates/default.htm"><span>Classes (II)</span></a></li>
<li><a href="../classes2/default.htm"><span>Special members</span></a></li>
<li><a href="../inheritance/default.htm"><span>Friendship and inheritance</span></a></li>
<li><a href="../polymorphism/default.htm"><span>Polymorphism</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Other language features:</h4><ul>
<li><a href="../typecasting/default.htm"><span>Type conversions</span></a></li>
<li><a href="../exceptions/default.htm"><span>Exceptions</span></a></li>
<li><a href="../preprocessor/default.htm"><span>Preprocessor directives</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Standard library:</h4><ul>
<li><a href="../files/default.htm"><span>Input/output with files</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-1947171228411990";
google_ad_slot = "7556847525";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus.com_252fdoc_252ftut~13.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiatutorialfunctions2.htm'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiatutorialfunctions2'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
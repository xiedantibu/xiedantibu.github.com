<!DOCTYPE html><!-- saved from url=(0061)http://www.cplusplus.com/doc/tutorial/inheritance/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Friendship and inheritance - C++ Tutorials</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Tutorials</a></li>
<li><a href="../default.htm">C++ Language</a></li>
<li class="here">Friendship and inheritance</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-1947171228411990";
google_ad_slot = "5020710848";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<h1>Friendship and inheritance</h1>
<section id="friend_functions">
<h3>Friend functions</h3>
In principle, private and protected members of a class cannot be accessed from outside the same class in which they are declared. However, this rule does not apply to <i>"friends"</i>.<br>
<br>
<dfn>Friends</dfn> are functions or classes declared with the <code>friend</code> keyword.<br>
<br>
A non-member function can access the private and protected members of a class if it is declared a <i>friend</i> of that class. That is done by including a declaration of this external function within the class, and preceding it with the keyword <code>friend</code>:<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></code></pre></td>
<td class="source"><pre><code><cite>// friend functions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    Rectangle() {}
    Rectangle (<var>int</var> x, <var>int</var> y) : width(x), height(y) {}
    <var>int</var> area() {<var>return</var> width * height;}
    <var>friend</var> Rectangle duplicate (<var>const</var> Rectangle&amp;);
};

Rectangle duplicate (<var>const</var> Rectangle&amp; param)
{
  Rectangle res;
  res.width = param.width*2;
  res.height = param.height*2;
  <var>return</var> res;
}

<var>int</var> main () {
  Rectangle foo;
  Rectangle bar (2,3);
  foo = duplicate (bar);
  cout &lt;&lt; foo.area() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>24</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The <code>duplicate</code> function is a <i>friend</i> of class <code>Rectangle</code>. Therefore, function <code>duplicate</code> is able to access the members <code>width</code> and <code>height</code> (which are private) of different objects of type <code>Rectangle</code>. Notice though that neither in the declaration of <code>duplicate</code> nor in its later use in <code>main</code>, member function <code>duplicate</code> is considered a member of class <code>Rectangle</code>. It isn't! It simply has access to its private and protected members without being a member.<br>
<br>
Typical use cases of friend functions are operations that are conducted between two different classes accessing private or protected members of both. <br>
</section>
<br>
<section id="friend_classes">
<h3>Friend classes</h3>
Similar to friend functions, a friend class is a class whose members have access to the private or protected members of another class:<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br></code></pre></td>
<td class="source"><pre><code><cite>// friend class</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Square;

<var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    <var>int</var> area ()
      {<var>return</var> (width * height);}
    <var>void</var> convert (Square a);
};

<var>class</var> Square {
  <var>friend</var> <var>class</var> Rectangle;
  <var>private</var>:
    <var>int</var> side;
  <var>public</var>:
    Square (<var>int</var> a) : side(a) {}
};

<var>void</var> Rectangle::convert (Square a) {
  width = a.side;
  height = a.side;
}
  
<var>int</var> main () {
  Rectangle rect;
  Square sqr (4);
  rect.convert(sqr);
  cout &lt;&lt; rect.area();
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>16</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In this example, class <code>Rectangle</code> is a friend of class <code>Square</code> allowing <code>Rectangle</code>'s member functions to access private and protected members of <code>Square</code>. More concretely, <code>Rectangle</code> accesses the member variable <code>Square::side</code>, which describes the side of the square.<br>
<br>
There is something else new in this example: at the beginning of the program, there is an empty declaration of class <code>Square</code>. This is necessary because class <code>Rectangle</code> uses <code>Square</code> (as a parameter in member <code>convert</code>), and <code>Square</code> uses <code>Rectangle</code> (declaring it a friend). <br>
<br>
Friendships are never corresponded unless specified: In our example, <code>Rectangle</code> is considered a friend class by <code>Square</code>, but Square is not considered a friend by <code>Rectangle</code>. Therefore, the member functions of <code>Rectangle</code> can access the protected and private members of <code>Square</code> but not the other way around. Of course, <code>Square</code> could also be declared friend of <code>Rectangle</code>, if needed, granting such an access.<br>
<br>
Another property of friendships is that they are not transitive: The friend of a friend is not considered a friend unless explicitly specified.<br>
</section>
<br>
<section id="inheritance">
<h3>Inheritance between classes</h3>
Classes in C++ can be extended, creating new classes which retain characteristics of the base class. This process, known as inheritance, involves a <i>base class</i> and a <i>derived class</i>: The <i>derived class</i> inherits the members of the <i>base class</i>, on top of which it can add its own members.<br>
<br>
For example, let's imagine a series of classes to describe two kinds of polygons: rectangles and triangles. These two polygons have certain common properties, such as the values needed to calculate their areas: they both can be described simply with a height and a width (or base).<br>
<br>
This could be represented in the world of classes with a class <code>Polygon</code> from which we would derive the two other ones: <code>Rectangle</code> and <code>Triangle</code>:<br>
<br>
<img src="inheritance.png" alt="">
<br>
The <code>Polygon</code> class would contain members that are common for both types of polygon. In our case: <code>width</code> and <code>height</code>. And <code>Rectangle</code> and <code>Triangle</code> would be its derived classes, with specific features that are different from one type of polygon to the other.<br>
<br>
Classes that are derived from others inherit all the accessible members of the base class. That means that if a base class includes a member <code>A</code> and we derive a class from it with another member called <code>B</code>, the derived class will contain both member <code>A</code> and member <code>B</code>.<br>
<br>
The inheritance relationship of two classes is declared in the derived class. Derived classes definitions use the following syntax:<br>
<br>
<code>
class derived_class_name: public base_class_name<br>
{ /*...*/ };<br>
</code>
<br>
Where <code>derived_class_name</code> is the name of the derived class and <code>base_class_name</code> is the name of the class on which it is based. The <code>public</code> access specifier may be replaced by any one of the other access specifiers (<code>protected</code> or <code>private</code>). This access specifier limits the most accessible level for the members inherited from the base class: The members with a more accessible level are inherited with this level instead, while the members with an equal or more restrictive access level keep their restrictive level in the derived class.<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br></code></pre></td>
<td class="source"><pre><code><cite>// derived classes</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b;}
 };

<var>class</var> Rectangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> width * height; }
 };

<var>class</var> Triangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> width * height / 2; }
  };
  
<var>int</var> main () {
  Rectangle rect;
  Triangle trgl;
  rect.set_values (4,5);
  trgl.set_values (4,5);
  cout &lt;&lt; rect.area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; trgl.area() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>20
10</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The objects of the classes <code>Rectangle</code> and <code>Triangle</code> each contain members inherited from <code>Polygon</code>. These are: <code>width</code>, <code>height</code> and <code>set_values</code>.<br>
<br>
The <code>protected</code> access specifier used in class <code>Polygon</code> is similar to <code>private</code>. Its only difference occurs in fact with inheritance: When a class inherits another one, the members of the derived class can access the protected members inherited from the base class, but not its private members.<br>
<br>
By declaring <code>width</code> and <code>height</code> as <code>protected</code> instead of <code>private</code>, these members are also accessible from the derived classes <code>Rectangle</code> and <code>Triangle</code>, instead of just from members of <code>Polygon</code>. If they were public, they could be access just from anywhere.<br>
 <br>
We can summarize the different access types according to which functions can access them in the following way: <br>
<br>
<table class="boxed">
<tr><th>Access</th><th><code>public</code></th><th><code>protected</code></th><th><code>private</code></th></tr>
<tr><td>members of the same class</td><td class="yes">yes</td><td class="yes">yes</td><td class="yes">yes</td></tr>
<tr><td>members of derived class</td><td class="yes">yes</td><td class="yes">yes</td><td class="no">no</td></tr>
<tr><td>not members</td><td class="yes">yes</td><td class="no">no</td><td class="no">no</td></tr>
</table>
<br>
Where "not members" represents any access from outside the class, such as from <code>main</code>, from another class or from a function.<br>
<br>
In the example above, the members inherited by <code>Rectangle</code> and <code>Triangle</code> have the same access permissions as they had in their base class <code>Polygon</code>:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code>Polygon::width           <cite>// protected access</cite>
Rectangle::width         <cite>// protected access</cite>

Polygon::set_values()    <cite>// public access</cite>
Rectangle::set_values()  <cite>// public access  </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This is because the inheritance relation has been declared using the <code>public</Code> keyword on each of the derived classes:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>class</var> Rectangle: <var>public</var> Polygon { <cite>/* ... */</cite> }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This <code>public</code> keyword after the colon (<code>:</code>) denotes the most accessible level the members inherited from the class that follows it (in this case <code>Polygon</code>) will have from the derived class (in this case <code>Rectangle</code>). Since <code>public</code> is the most accessible level, by specifying this keyword the derived class will inherit all the members with the same levels they had in the base class.<br>
<br>
With <code>protected</code>, all public members of the base class are inherited as <code>protected</code> in the derived class. Conversely, if the most restricting access level is specified (<code>private</code>), all the base class members are inherited as <code>private</code> and thus cannot be accessed from the derived class.<br>
<br>
For example, if daughter were a class derived from mother that we defined as:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>class</var> Daughter: <var>protected</var> Mother;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This would set <code>protected</code> as the less restrictive access level for the members of <code>Daughter</code> that it inherited from mother. That is, all members that were <code>public</code> in <code>Mother</code> would become <code>protected</code> in <code>Daughter</code>. Of course, this would not restrict <code>Daughter</code> from declaring its own public members. That <i>less restrictive access level</i> is only set for the members inherited from <code>Mother</code>.<br>
<br>
If no access level is specified for the inheritance, the compiler assumes private for classes declared with keyword <code>class</code> and public for those declared with <code>struct</code>.<br>
</section>
<br>
<section id="what_is_inherited">
<h3>What is inherited from the base class?</h3>
In principle, a derived class inherits every member of a base class except:<br>
<br>
<ul>
<li>its constructors and its destructor</li>
<li>its assignment operator members (operator=)</li>
<li>its friends</li>
<li>its private members</li>
</ul>
<br>
Although the constructors and destructors of the base class are not inherited as constructors and destructors in the derived class, they are still called by the derived class's constructor. Unless otherwise specified, the constructors of derived classes call the default constructors of their base classes (i.e., the constructor taking no arguments), which must exist.<br>
<br>
Calling a different constructor of a base class is possible, using the same syntax as to initialize member variables in the initialization list:<br>
<br>
<code>
derived_constructor_name (parameters) : base_constructor_name (parameters) {...}<br>
</code>
<br>
For example: <br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></code></pre></td>
<td class="source"><pre><code><cite>// constructors and derived classes</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Mother {
  <var>public</var>:
    Mother ()
      { cout &lt;&lt; <kbd>"Mother: no parameters\n"</kbd>; }
    Mother (<var>int</var> a)
      { cout &lt;&lt; <kbd>"Mother: int parameter\n"</kbd>; }
};

<var>class</var> Daughter : <var>public</var> Mother {
  <var>public</var>:
    Daughter (<var>int</var> a)
      { cout &lt;&lt; <kbd>"Daughter: int parameter\n\n"</kbd>; }
};

<var>class</var> Son : <var>public</var> Mother {
  <var>public</var>:
    Son (<var>int</var> a) : Mother (a)
      { cout &lt;&lt; <kbd>"Son: int parameter\n\n"</kbd>; }
};

<var>int</var> main () {
  Daughter kelly(0);
  Son bud(0);
  
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>Mother: no parameters
Daughter: int parameter

Mother: int parameter
Son: int parameter</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Notice the difference between which <code>Mother</code>'s constructor is called when a new <code>Daughter</code> object is created and which when it is a <code>Son</code> object. The difference is due to the different constructor declarations of <code>Daughter</code> and <code>Son</code>:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>Daughter (<var>int</var> a)          <cite>// nothing specified: call default constructor</cite>
Son (<var>int</var> a) : Mother (a)  <cite>// constructor specified: call this specific constructor </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="multiple_inheritance">
<h3>Multiple inheritance</h3>
A class may inherit from more than one class by simply specifying more base classes, separated by commas, in the list of a class's base classes (i.e., after the colon). For example, if the program had a specific class to print on screen called <code>Output</code>, and we wanted our classes <code>Rectangle</code> and <code>Triangle</code> to also inherit its members in addition to those of <code>Polygon</code> we could write:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>class</var> Rectangle: <var>public</var> Polygon, <var>public</var> Output;
<var>class</var> Triangle: <var>public</var> Polygon, <var>public</var> Output; </code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Here is the complete example: <br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br></code></pre></td>
<td class="source"><pre><code><cite>// multiple inheritance</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    Polygon (<var>int</var> a, <var>int</var> b) : width(a), height(b) {}
};

<var>class</var> Output {
  <var>public</var>:
    <var>static</var> <var>void</var> print (<var>int</var> i);
};

<var>void</var> Output::print (<var>int</var> i) {
  cout &lt;&lt; i &lt;&lt; <kbd>'\n'</kbd>;
}

<var>class</var> Rectangle: <var>public</var> Polygon, <var>public</var> Output {
  <var>public</var>:
    Rectangle (<var>int</var> a, <var>int</var> b) : Polygon(a,b) {}
    <var>int</var> area ()
      { <var>return</var> width*height; }
};

<var>class</var> Triangle: <var>public</var> Polygon, <var>public</var> Output {
  <var>public</var>:
    Triangle (<var>int</var> a, <var>int</var> b) : Polygon(a,b) {}
    <var>int</var> area ()
      { <var>return</var> width*height/2; }
};
  
<var>int</var> main () {
  Rectangle rect (4,5);
  Triangle trgl (4,5);
  rect.print (rect.area());
  Triangle::print (trgl.area());
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>20
10  </samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section><table class="C_docPrevNext"><tr><td class="prev"><a href="../classes2/default.htm" rel="prev"><img src="../../../ico/32arrowleft.png" width="32" height="32" alt="Previous">Previous:<br><b>Special members</b></a></td><td class="index"><a href="../default.htm" rel="index"><img src="../../../ico/32doc.png" width="32" height="32" alt="Index"><br>Index</a></td><td class="next"><a href="../polymorphism/default.htm" rel="next"><img src="../../../ico/32arrowright.png" width="32" height="32" alt="Next">Next:<br><b>Polymorphism</b></a></td></tr></table></div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-1947171228411990";
google_ad_slot = "5020710848";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder selected doc"><a href="../../default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="doc_box">
<h3><b><a href="../../default.htm">Tutorials</a></b></h3>
<ul>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>C++ Language</span></a></li>
<li><a href="../../ascii/default.htm"><span>Ascii Codes</span></a></li>
<li><a href="../../boolean/default.htm"><span>Boolean Operations</span></a></li>
<li><a href="../../hex/default.htm"><span>Numerical Bases</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="tutorial_box">
<h3><b><a href="../default.htm">C++ Language</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>Introduction:</h4><ul>
<li class="folder"><a href="../introduction/default.htm"><span>Compilers</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Basics of C++:</h4><ul>
<li><a href="../program_structure/default.htm"><span>Structure of a program</span></a></li>
<li><a href="../variables/default.htm"><span>Variables and types</span></a></li>
<li><a href="../constants/default.htm"><span>Constants</span></a></li>
<li><a href="../operators/default.htm"><span>Operators</span></a></li>
<li><a href="../basic_io/default.htm"><span>Basic Input/Output</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Program structure:</h4><ul>
<li><a href="../control/default.htm"><span>Statements and flow control</span></a></li>
<li><a href="../functions/default.htm"><span>Functions</span></a></li>
<li><a href="../functions2/default.htm"><span>Overloads and templates</span></a></li>
<li><a href="../namespaces/default.htm"><span>Name visibility</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Compound data types:</h4><ul>
<li><a href="../arrays/default.htm"><span>Arrays</span></a></li>
<li><a href="../ntcs/default.htm"><span>Character sequences</span></a></li>
<li><a href="../pointers/default.htm"><span>Pointers</span></a></li>
<li><a href="../dynamic/default.htm"><span>Dynamic memory</span></a></li>
<li><a href="../structures/default.htm"><span>Data structures</span></a></li>
<li><a href="../other_data_types/default.htm"><span>Other data types</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Classes:</h4><ul>
<li><a href="../classes/default.htm"><span>Classes (I)</span></a></li>
<li><a href="../templates/default.htm"><span>Classes (II)</span></a></li>
<li><a href="../classes2/default.htm"><span>Special members</span></a></li>
<li class="selected"><a href="default.htm"><span>Friendship and inheritance</span></a></li>
<li><a href="../polymorphism/default.htm"><span>Polymorphism</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Other language features:</h4><ul>
<li><a href="../typecasting/default.htm"><span>Type conversions</span></a></li>
<li><a href="../exceptions/default.htm"><span>Exceptions</span></a></li>
<li><a href="../preprocessor/default.htm"><span>Preprocessor directives</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Standard library:</h4><ul>
<li><a href="../files/default.htm"><span>Input/output with files</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-1947171228411990";
google_ad_slot = "7556847525";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus.com_252fdoc_252ftut~12.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiatutorialinheritance.htm'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiatutorialinheritance'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
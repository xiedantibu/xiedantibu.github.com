<!DOCTYPE html><!-- saved from url=(0060)http://www.cplusplus.com/doc/tutorial/exceptions/default.htm --><meta http-equiv="X-UA-Compatible" content="IE=Edge" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Exceptions - C++ Tutorials</title>
<link rel="canonical" href="default.htm">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico">
<link rel="stylesheet" type="text/css" href="../../../v321/main.css">
<script src="../../../v321/main.js" type="text/javascript"></script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="../../../default.htm" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="../../default.htm">Tutorials</a></li>
<li><a href="../default.htm">C++ Language</a></li>
<li class="here">Exceptions</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support"><script type="text/javascript"><!--
if (!cookieGet("hspt31")) {
  document.write('<div class="C_DonateBox"></div>');
}
//-->
</script><div class="C_ad728"><script type="text/javascript"><!--
google_ad_client = "ca-pub-1947171228411990";
google_ad_slot = "5020710848";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><div class="C_supportbottom"></div></div><div id="I_content">
<div class="C_doc">
<h1>Exceptions</h1>
<section id="exceptions">
Exceptions provide a way to react to exceptional circumstances (like runtime errors) in programs by transferring control to special functions called <i>handlers</i>.<br>
<br>
To catch exceptions, a portion of code is placed under exception inspection. This is done by enclosing that portion of code in a <i>try-block</i>. When an exceptional circumstance arises within that block, an exception is thrown that transfers the control to the exception handler. If no exception is thrown, the code continues normally and all handlers are ignored.<br>
<br>
An exception is thrown by using the <code>throw</code> keyword from inside the <code>try</code> block. Exception handlers are declared with the keyword <code>catch</code>, which must be placed immediately after the <code>try</code> block:<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><cite>// exceptions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  <var>try</var>
  {
    <var>throw</var> 20;
  }
  <var>catch</var> (<var>int</var> e)
  {
    cout &lt;&lt; <kbd>"An exception occurred. Exception Nr. "</kbd> &lt;&lt; e &lt;&lt; <kbd>'\n'</kbd>;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>An exception occurred. Exception Nr. 20</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The code under exception handling is enclosed in a <code>try</code> block. In this example this code simply throws an exception:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>throw</var> 20;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
A <code>throw</code> expression accepts one parameter (in this case the integer value <code>20</code>), which is passed as an argument to the exception handler.<br>
<br>
The exception handler is declared with the <code>catch</code> keyword immediately after the closing brace of the <code>try</code> block. The syntax for <code>catch</code> is similar to a regular function with one parameter. The type of this parameter is very important, since the type of the argument passed by the <code>throw</code> expression is checked against it, and only in the case they match, the exception is caught by that handler.<br>
<br>
Multiple handlers (i.e., <code>catch</code> expressions) can be chained; each one with a different parameter type. Only the handler whose argument type matches the type of the exception specified in the <code>throw</code> statement is executed.<br>
<br>
If an ellipsis (<code>...</code>) is used as the parameter of <code>catch</code>, that handler will catch any exception no matter what the type of the exception thrown. This can be used as a default handler that catches all exceptions not caught by other handlers:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code><var>try</var> {
  <cite>// code here</cite>
}
<var>catch</var> (<var>int</var> param) { cout &lt;&lt; <kbd>"int exception"</kbd>; }
<var>catch</var> (<var>char</var> param) { cout &lt;&lt; <kbd>"char exception"</kbd>; }
<var>catch</var> (...) { cout &lt;&lt; <kbd>"default exception"</kbd>; }</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In this case, the last handler would catch any exception thrown of a type that is neither <code>int</code> nor <code>char</code>.<br>
<br>
After an exception has been handled the program, execution resumes after the <i>try-catch</i> block, not after the <code>throw</code> statement!.<br>
<br>
It is also possible to nest <code>try-catch</code> blocks within more external <code>try</code> blocks. In these cases, we have the possibility that an internal <code>catch</code> block forwards the exception to its external level. This is done with the expression <code>throw;</code> with no arguments. For example: <br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><var>try</var> {
  <var>try</var> {
      <cite>// code here</cite>
  }
  <var>catch</var> (<var>int</var> n) {
      <var>throw</var>;
  }
}
<var>catch</var> (...) {
  cout &lt;&lt; <kbd>"Exception occurred"</kbd>;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="exception_specification">
<h3>Exception specification</h3>
Older code may contain <i>dynamic exception specifications</i>. They are now deprecated in C++, but still supported. A <i>dynamic exception specification</i> follows the declaration of a function, appending a <code>throw</code> specifier to it. For example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>double</var> myfunction (<var>char</var> param) <var>throw</var> (<var>int</var>);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This declares a function called <code>myfunction</code>, which takes one argument of type <code>char</code> and returns a value of type <code>double</code>. If this function throws an exception of some type other than <code>int</code>, the function calls <samp><a href="../../../reference/exception/unexpected/default.htm">std::unexpected</a></samp> instead of looking for a handler or calling <samp><a href="../../../reference/exception/terminate/default.htm">std::terminate</a></samp>.<br>
<br>
If this <code>throw</code> specifier is left empty with no type, this means that <samp><a href="../../../reference/exception/unexpected/default.htm">std::unexpected</a></samp> is called for any exception. Functions with no <code>throw</code> specifier (regular functions) never call <samp><a href="../../../reference/exception/unexpected/default.htm">std::unexpected</a></samp>, but follow the normal path of looking for their exception handler.<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>int</var> myfunction (<var>int</var> param) <var>throw</var>(); <cite>// all exceptions call unexpected</cite>
<var>int</var> myfunction (<var>int</var> param);         <cite>// normal exception handling </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="standard_exceptions">
<h3>Standard exceptions</h3>
The C++ Standard library provides a base class specifically designed to declare objects to be thrown as exceptions. It is called <code><a href="../../../reference/exception/exception/default.htm">std::exception</a></code> and is defined in the <code><a href="../../../_5f3cexceptiongt">&lt;exception&gt;</a></code> header. This class has a virtual member function called <code>what</code> that returns a null-terminated character sequence (of type <code>char *</code>) and that can be overwritten in derived classes to contain some sort of description of the exception.<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// using standard exceptions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;exception&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> myexception: <var>public</var> exception
{
  <var>virtual</var> <var>const</var> <var>char</var>* what() <var>const</var> <var>throw</var>()
  {
    <var>return</var> <kbd>"My exception happened"</kbd>;
  }
} myex;

<var>int</var> main () {
  <var>try</var>
  {
    <var>throw</var> myex;
  }
  <var>catch</var> (exception&amp; e)
  {
    cout &lt;&lt; e.what() &lt;&lt; <kbd>'\n'</kbd>;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp>My exception happened.</samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
We have placed a handler that catches exception objects by reference (notice the ampersand <code>&</code> after the type), therefore this catches also classes derived from <code>exception</code>, like our <code>myex</code> object of type <code>myexception</code>.<br>
<br>
All exceptions thrown by components of the C++ Standard library throw exceptions derived from this <code>exception</code> class. These are:<br>
<br>
<table class="boxed">
<tr><th>exception</th><th>description</th></tr>
<tr><td><code><a href="../../../reference/new/bad_alloc/default.htm">bad_alloc</a></code></td><td>thrown by <code>new</code> on allocation failure</td></tr>
<tr><td><code><a href="../../../reference/typeinfo/bad_cast/default.htm">bad_cast</a></code></td><td>thrown by <code>dynamic_cast</code> when it fails in a dynamic cast</td></tr>
<tr><td><code><a href="../../../reference/exception/bad_exception/default.htm">bad_exception</a></code></td><td>thrown by certain dynamic exception specifiers</td></tr>
<tr><td><code><a href="../../../reference/typeinfo/bad_typeid/default.htm">bad_typeid</a></code></td><td>thrown by <code>typeid</code></td></tr>
<tr><td><code><a href="../../../reference/functional/bad_function_call/default.htm">bad_function_call</a></code></td><td>thrown by empty <code><a href="../../../reference/functional/function/default.htm">function</a></code> objects</td></tr>
<tr><td><code><a href="../../../reference/memory/bad_weak_ptr/default.htm">bad_weak_ptr</a></code></td><td>thrown by <code><a href="../../../reference/memory/shared_ptr/default.htm">shared_ptr</a></code> when passed a bad <code><a href="../../../reference/memory/weak_ptr/default.htm">weak_ptr</a></code></td></tr>
</table>
<br>
Also deriving from <code>exception</code>, header <code><a href="../../../_5f3cexceptiongt">&lt;exception&gt;</a></code> defines two generic exception types that can be inherited by custom exceptions to report errors:<br>
<br>
<table class="boxed">
<tr><th>exception</th><th>description</th></tr>
<tr><td><code><a href="../../../reference/stdexcept/logic_error/default.htm">logic_error</a></code></td><td>error related to the internal logic of the program</td></tr>
<tr><td><code><a href="../../../reference/stdexcept/runtime_error/default.htm">runtime_error</a></code></td><td>error detected during runtime</td></tr>
</table>
<br>
A typical example where standard exceptions need to be checked for is on memory allocation:<br>
<br>
<div class="auto"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>// bad_alloc standard exception</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;exception&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  <var>try</var>
  {
    <var>int</var>* myarray= <var>new</var> <var>int</var>[1000];
  }
  <var>catch</var> (exception&amp; e)
  {
    cout &lt;&lt; <kbd>"Standard exception: "</kbd> &lt;&lt; e.what() &lt;&lt; endl;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class="output"><pre><samp> </samp></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The exception that may be caught by the exception handler in this example is a <code>bad_alloc</code>. Because <code>bad_alloc</code> is derived from the standard base class <code>exception</code>, it can be caught (capturing by reference, captures all related classes).<br>
</section><table class="C_docPrevNext"><tr><td class="prev"><a href="../typecasting/default.htm" rel="prev"><img src="../../../ico/32arrowleft.png" width="32" height="32" alt="Previous">Previous:<br><b>Type conversions</b></a></td><td class="index"><a href="../default.htm" rel="index"><img src="../../../ico/32doc.png" width="32" height="32" alt="Index"><br>Index</a></td><td class="next"><a href="../preprocessor/default.htm" rel="next"><img src="../../../ico/32arrowright.png" width="32" height="32" alt="Next">Next:<br><b>Preprocessor directives</b></a></td></tr></table></div><div id="CH_bb"></div></div>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-1947171228411990";
google_ad_slot = "5020710848";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="../../../default.htm">C++</a></b></h3>
<ul>
<li class="folder info"><a href="../../../info/default.htm">Information</a></li>
<li class="folder selected doc"><a href="../../default.htm">Tutorials</a></li>
<li class="folder reference"><a href="../../../reference/default.htm">Reference</a></li>
<li class="folder articles"><a href="../../../articles/default.htm">Articles</a></li>
<li class="folder forum"><a href="../../../forum/default.htm">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="doc_box">
<h3><b><a href="../../default.htm">Tutorials</a></b></h3>
<ul>
<li class="cpp98 cpp11 selected folder"><a href="../default.htm"><span>C++ Language</span></a></li>
<li><a href="../../ascii/default.htm"><span>Ascii Codes</span></a></li>
<li><a href="../../boolean/default.htm"><span>Boolean Operations</span></a></li>
<li><a href="../../hex/default.htm"><span>Numerical Bases</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="tutorial_box">
<h3><b><a href="../default.htm">C++ Language</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>Introduction:</h4><ul>
<li class="folder"><a href="../introduction/default.htm"><span>Compilers</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Basics of C++:</h4><ul>
<li><a href="../program_structure/default.htm"><span>Structure of a program</span></a></li>
<li><a href="../variables/default.htm"><span>Variables and types</span></a></li>
<li><a href="../constants/default.htm"><span>Constants</span></a></li>
<li><a href="../operators/default.htm"><span>Operators</span></a></li>
<li><a href="../basic_io/default.htm"><span>Basic Input/Output</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Program structure:</h4><ul>
<li><a href="../control/default.htm"><span>Statements and flow control</span></a></li>
<li><a href="../functions/default.htm"><span>Functions</span></a></li>
<li><a href="../functions2/default.htm"><span>Overloads and templates</span></a></li>
<li><a href="../namespaces/default.htm"><span>Name visibility</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Compound data types:</h4><ul>
<li><a href="../arrays/default.htm"><span>Arrays</span></a></li>
<li><a href="../ntcs/default.htm"><span>Character sequences</span></a></li>
<li><a href="../pointers/default.htm"><span>Pointers</span></a></li>
<li><a href="../dynamic/default.htm"><span>Dynamic memory</span></a></li>
<li><a href="../structures/default.htm"><span>Data structures</span></a></li>
<li><a href="../other_data_types/default.htm"><span>Other data types</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Classes:</h4><ul>
<li><a href="../classes/default.htm"><span>Classes (I)</span></a></li>
<li><a href="../templates/default.htm"><span>Classes (II)</span></a></li>
<li><a href="../classes2/default.htm"><span>Special members</span></a></li>
<li><a href="../inheritance/default.htm"><span>Friendship and inheritance</span></a></li>
<li><a href="../polymorphism/default.htm"><span>Polymorphism</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Other language features:</h4><ul>
<li><a href="../typecasting/default.htm"><span>Type conversions</span></a></li>
<li class="selected"><a href="default.htm"><span>Exceptions</span></a></li>
<li><a href="../preprocessor/default.htm"><span>Preprocessor directives</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>Standard library:</h4><ul>
<li><a href="../files/default.htm"><span>Input/output with files</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-1947171228411990";
google_ad_slot = "7556847525";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<acript type="text/javascript"
src="../../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="../../../default.htm">Home page</a> | <a href="../../../privacy.do.htm">Privacy policy</a><br>&copy; cplusplus.com, 2000-2014 - All rights reserved - <i>v3.1</i><br><a href="../../../contact.doreferrerwww.cplusplus.com_252fdoc_252ftut~10.htm">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','../../edit.cgiatutorialexceptions.htm'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='../../delete.cgiatutorialexceptions'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? '../../../../httpsssl/default.htm' : '../../../../www/default.htm') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>